<?php
require('assets/libs/PHPMailer/src/Exception.php');
require('assets/libs/PHPMailer/src/PHPMailer.php');
require('assets/libs/PHPMailer/src/SMTP.php');

use PHPMailer\PHPMailer\PHPMailer;
use PHPMailer\PHPMailer\SMTP;
use PHPMailer\PHPMailer\Exception;
date_default_timezone_set('Asia/Manila'); // Or your correct timezone


class Api{
    # @var object $db_connection The database connection
    public $db_connection = null;

    public $response = array();

    # -------------------------------------------------------------
    #   Custom functions
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : databaseConnection
    # Purpose    : Checks if database connection is opened.
    #              If not, then this method tries to open it.
    #              @return bool Success status of the
    #              database connecting process
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function databaseConnection(){
        // if connection already exists
        if ($this->db_connection != null) {
            return true;
        } else {
            try {
                $this->db_connection = new PDO('mysql:host='. DB_HOST .';dbname='. DB_NAME . ';charset=utf8', DB_USER, DB_PASS, array(PDO::MYSQL_ATTR_LOCAL_INFILE => true));
                return true;
            } catch (PDOException $e) {
                $this->errors[] = $e->getMessage();
            }
        }
        // default return
        return false;
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : authenticate
    # Purpose    : Authenticates the user.
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
     public function authenticate($username, $password){
        if ($this->databaseConnection()) {
            $system_date = date('Y-m-d');

            $check_data_exist_one_parameter = $this->check_data_exist_one_parameter('user account', $username);

            if($check_data_exist_one_parameter == 1){
                $user_account_details = $this->get_data_details_one_parameter('user account', $username);
                $user_id = $user_account_details[0]['EMPLOYEE_ID'];
                $active = $user_account_details[0]['ACTIVE'];
                $login_attemp = $this->check_number($user_account_details[0]['FAILED_LOGIN']);
                $password_expiry_date = $user_account_details[0]['PASSWORD_EXPIRY_DATE'];

                if($active == 1){
                    # Check if failed login is greater than or equal to 5
                    # then lock the user

                    if($login_attemp >= 5){
                        return 'Locked';
                    }
                    else{
                        # Verify password
                        if($user_account_details[0]['PASSWORD'] == $password){
                            if(strtotime($system_date) > strtotime($password_expiry_date)){
                                return 'Password Expired';
                            }
                            else{
                                # Update failed login attempt to 0
                                $update_login_attempt = $this->update_failed_login_attempt($username, '', 0, NULL);

                                if($update_login_attempt == '1'){
                                    $insert_user_log = $this->insert_logs($username, 'Login', '');

                                    if($insert_user_log == '1'){
                                        return '1';
                                    }
                                    else{
                                        return $insert_user_log;
                                    }
                                }
                                else{
                                    return $update_login_attempt;
                                }
                            }
                        }
                        else{
                            # Update failed login attempt
                            $update_login_attempt = $this->update_failed_login_attempt($username, '', ($login_attemp + 1), date('Y-m-d'));

                            if($update_login_attempt == '1'){
                                $insert_user_log = $this->insert_logs($username, 'ATTEMPT LOGIN', 'User ' . $username . ' attempted to login.');

                                if($insert_user_log == '1'){
                                    return 'Incorrect';
                                }
                                else{
                                    return $insert_user_log;
                                }
                            }
                            else{
                                return $update_login_attempt;
                            }
                        }
                    }
                }
                else{
                    return 'Inactive';
                }
            }
            else{
                return 'Incorrect';
            }
        }
    }

  public function validateSsoToken($token, $emp_id) {
    if ($this->databaseConnection()) {
        $current_time = date('Y-m-d H:i:s');

        $sql = "SELECT * FROM tbluseraccount
                WHERE EMPLOYEE_ID = :emp_id
                AND SSO_TOKEN = :token
                AND TOKEN_EXPIRY > :current_time";

        $stmt = $this->db_connection->prepare($sql);
        $stmt->bindParam(':emp_id', $emp_id);
        $stmt->bindParam(':token', $token);
        $stmt->bindParam(':current_time', $current_time);
        $stmt->execute();

        if($stmt->rowCount() > 0) {
            $user_data = $stmt->fetch(PDO::FETCH_ASSOC);

            // Set ALL required session variables
            $_SESSION['employee_id'] = $emp_id;
            $_SESSION['username'] = $user_data['USERNAME'];
            $_SESSION['logged_in'] = 1;  // Critical for session.php
            $_SESSION['is_logged_in'] = true;
            $_SESSION['role_id'] = $user_data['ROLE_ID'] ?? null;
            $_SESSION['lock'] = 0;  // Ensure not locked

            // Update token for security
            $new_token = bin2hex(random_bytes(32));
            $new_expiry = date('Y-m-d H:i:s', strtotime('+30 minutes'));

            $update_sql = "UPDATE tbluseraccount
                          SET SSO_TOKEN = :new_token, TOKEN_EXPIRY = :new_expiry
                          WHERE EMPLOYEE_ID = :emp_id";

            $update_stmt = $this->db_connection->prepare($update_sql);
            $update_stmt->execute([
                ':new_token' => $new_token,
                ':new_expiry' => $new_expiry,
                ':emp_id' => $emp_id
            ]);

            return '1';
        }
        return 'Invalid or expired token';
    }
    return 'Database connection failed';
}

public function cleanupExpiredTokens() {
    if ($this->databaseConnection()) {
        try {
            $current_time = date('Y-m-d H:i:s');

            $sql = "UPDATE `tbluseraccount`
                    SET SSO_TOKEN = NULL, TOKEN_EXPIRY = NULL
                    WHERE TOKEN_EXPIRY < :current_time";

            $stmt = $this->db_connection->prepare($sql);
            $stmt->bindParam(':current_time', $current_time);
            $stmt->execute();
        } catch (PDOException $e) {
            error_log('Error cleaning up expired tokens: ' . $e->getMessage());
        }
    }
}


public function get_user_data($emp_id) {
    if ($this->databaseConnection()) {
        try {
            $sql = "SELECT * FROM tbluseraccount WHERE EMPLOYEE_ID = :emp_id";
            $stmt = $this->db_connection->prepare($sql);
            $stmt->bindParam(':emp_id', $emp_id);
            $stmt->execute();

            if($stmt->rowCount() > 0) {
                return $stmt->fetch(PDO::FETCH_ASSOC);
            }
            return false;
        } catch (PDOException $e) {
            error_log("Database error in get_user_data: " . $e->getMessage());
            return false;
        }
    }
    return false;
}


     # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : random_string
    # Purpose    : To generate Random String.
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    function generateRandomString($length = 10) {
        $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
        $charactersLength = strlen($characters);
        $randomString = '';
        for ($i = 0; $i < $length; $i++) {
            $randomString .= $characters[rand(0, $charactersLength - 1)];
        }
        return $randomString;
    }


    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : convert_date
    # Purpose    : To convert date.
    #
    # Returns    : String
    #
    # -------------------------------------------------------------


    function convert_date($date, $inputFormat, $outputFormat) {
        $date = DateTime::createFromFormat($inputFormat, $date);
        return $date->format($outputFormat);
    }


    # -------------------------------------------------------------
    #
    # Name       : string to number
    # Purpose    : converts String to Number
    #
    # Returns    : Double
    #
    # -------------------------------------------------------------
    function string_to_number($string_number){

        $var = (double)filter_var($string_number, FILTER_SANITIZE_NUMBER_FLOAT, FILTER_FLAG_ALLOW_FRACTION);

        return $var;
    }




    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : backup_database
    # Purpose    : Backs-up the database.
    #
    # Returns    : String
    #
    # -------------------------------------------------------------







    public function backup_database($file_name, $username){
        if ($this->databaseConnection()) {
            $backup_file = 'database_backup/' . $file_name . '_' . time() . '.sql';

            exec('C:\xampp\mysql\bin\mysqldump.exe -u '. DB_USER .' -p'. DB_PASS .' '. DB_NAME .' -r "'. $backup_file .'"  2>&1', $output, $return);

            if(!$return) {
                $insert_user_log = $this->insert_logs($username, 'Database Backup', 'User ' . $username . ' backed-up the database.');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else {
                return $return;
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : format_date
    # Purpose    : Returns date with a custom formatting
    #              Avoids error when date is greater
    #              than the year 2038 or less than
    #              January 01, 1970.
    #
    # Returns    : Date
    #
    # -------------------------------------------------------------
    public function format_date($format, $date, $modify){
        if(!empty($modify)){
            $datestring = (new DateTime($date))->modify($modify)->format($format);
        }
        else{
            $datestring = (new DateTime($date))->format($format);
        }

        return $datestring;
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : CryptRC4
    # Purpose    : Returns the encrypted password using RC4-40.
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function CryptRC4($text) {
        return openssl_encrypt($text, "RC4-40", ENCRYPTION_KEY, 1 | 2);
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : ToHexDump
    # Purpose    : Encrypt the text or password to binary hex.
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function ToHexDump($text) {
        return bin2hex($text);
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : FromHexDump
    # Purpose    : Decrypt the text or password to binary hex.
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function FromHexDump($text) {
        return hex2bin($text);
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : encrypt_data
    # Purpose    : Encrypt the text.
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function encrypt_data($text) {
        return $this->ToHexDump($this->CryptRC4($text));
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : decrypt_data
    # Purpose    : Decrypt the text.
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function decrypt_data($text) {
        return $this->CryptRC4($this->FromHexDump($text));
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : remove_comma
    # Purpose    : Removes comma from number
    #
    # Returns    : Number
    #
    # -------------------------------------------------------------
    public function remove_comma($number){
        return str_replace(',', '', $number);
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : add_months
    # Purpose    : Add months to calculated date
    #
    # Returns    : Number
    #
    # -------------------------------------------------------------
    public function add_months($months, DateTime $dateObject){
        # Format date to Y-m-d
        # Get the last day of the given month
        $next = new DateTime($dateObject->format('Y-m-d'));
        $next->modify('last day of +'.$months.' month');

        # If $dateObject day is greater than the day of $next
        # Return the difference
        # Else create a new interval
        if($dateObject->format('d') > $next->format('d')) {
            return $dateObject->diff($next);
        } else {
            return new DateInterval('P'.$months.'M');
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : send_notification_email
    # Purpose    : Sends notification email
    #
    # Returns    : Number
    #
    # -------------------------------------------------------------
    public function send_notification_email($email, $subject, $message, $ishtml, $charset){
        $email_configuration_details = $this->get_data_details_one_parameter('email configuration', '1');
        $mail_host = $email_configuration_details[0]['MAIL_HOST'];
        $port = $email_configuration_details[0]['PORT'];
        $smtp_auth = $email_configuration_details[0]['SMTP_AUTH'];
        $smtp_auto_tls = $email_configuration_details[0]['SMTP_AUTO_TLS'];
        $mail_username = $email_configuration_details[0]['USERNAME'];
        $mail_password = $this->decrypt_data($email_configuration_details[0]['PASSWORD']);
        $mail_encryption = $email_configuration_details[0]['MAIL_ENCRYPTION'];
        $mail_from_name = $email_configuration_details[0]['MAIL_FROM_NAME'];
        $mail_from_email = $email_configuration_details[0]['MAIL_FROM_EMAIL'];

        $mail = new PHPMailer();
        $mail->isSMTP();
        $mail->SMTPDebug = SMTP::DEBUG_OFF;

        $mail->Host = $mail_host;
        $mail->Port = $port;
        $mail->SMTPSecure = $mail_encryption;
        $mail->SMTPAuth = $smtp_auth;
        $mail->SMTPAutoTLS = $smtp_auto_tls;
        $mail->Username = $mail_username;
        $mail->Password = $mail_password;
        $mail->setFrom($mail_from_email, $mail_from_name);
        $mail->addAddress($email, $email);
        $mail->Subject = $subject;

        /*if($type == 'newsletter subscriber' || $type == 'contact us message' || $type == 'event participant' || $type == 'sales agent application' || $type == 'asset bid' || $type == 'asset inquiry' || $type == 'product inquiry' || $type == 'career application'){
            $message = file_get_contents('email-template/contact-us.html');
            $message = str_replace('@companywebsite', $company_website, $message);
            $message = str_replace('@companylogo', $company_logo, $message);
            $message = str_replace('@year', date('Y'), $message);
            $message = str_replace('@companyname', $company_name, $message);
            $message = str_replace('@companyaddress', $company_address, $message);

            if($type == 'newsletter subscriber'){
                $message = str_replace('@messagetitle', 'Thank you!', $message);
                $message = str_replace('@message', 'Thank you for subscribing to our newsletter. <br/> You will be the first to know about our latest news and events.', $message);
            }
            else if($type == 'contact us message'){
                $message = str_replace('@messagetitle', 'Thank you!', $message);
                $message = str_replace('@message', 'We have received your message and would like to thank you for writing to us. We will get back to you soon.', $message);
            }
            else if($type == 'sales agent application' || $type == 'career application'){
                $message = str_replace('@messagetitle', 'Thank you!', $message);
                $message = str_replace('@message', 'We have received your application. We will review your application and get back to you soon.', $message);
            }
            else if($type == 'asset bid'){
                $message = str_replace('@messagetitle', 'Thank you!', $message);
                $message = str_replace('@message', 'We have received your bid. We will review your bid and get back to you soon.', $message);
            }
            else if($type == 'asset inquiry' || $type == 'product inquiry'){
                $message = str_replace('@messagetitle', 'Thank you!', $message);
                $message = str_replace('@message', 'We have received your inquiry. We will get back to you soon.', $message);
            }
            else {
                $message = str_replace('@messagetitle', 'Thank you!', $message);
                $message = str_replace('@message', 'We have received your registration to our event. We are looking forward to seeing you there!', $message);
            }
        }
        else if($type == 'contact us notification' || $type == 'sales agent application notification' || $type == 'asset bid notification' || $type == 'asset inquiry notification' || $type == 'product inquiry notification' || $type == 'career application notification'){
            $message = file_get_contents('email-template/notification.html');
            $message = str_replace('@companywebsite', $company_website, $message);
            $message = str_replace('@companylogo', $company_logo, $message);
            $message = str_replace('@year', date('Y'), $message);
            $message = str_replace('@companyname', $company_name, $message);
            $message = str_replace('@companyaddress', $company_address, $message);


            if($type == 'contact us notification'){
                $message = str_replace('@messagetitle', 'Contact Us Message Notification', $message);
                $message = str_replace('@message', 'A new message has been received.', $message);
            }
            else if($type == 'sales agent application notification'){
                $message = str_replace('@messagetitle', 'Sales Agent Application Notification', $message);
                $message = str_replace('@message', 'A new sales agent application has been received.', $message);
            }
            else if($type == 'asset bid notification'){
                $message = str_replace('@messagetitle', 'Asset Bid Notification', $message);
                $message = str_replace('@message', 'A new bid has been received.', $message);
            }
            else if($type == 'asset inquiry notification'){
                $message = str_replace('@messagetitle', 'Asset Inquiry Notification', $message);
                $message = str_replace('@message', 'A new asset inquiry has been received.', $message);
            }
            else if($type == 'product inquiry notification'){
                $message = str_replace('@messagetitle', 'Product Inquiry Notification', $message);
                $message = str_replace('@message', 'A new product inquiry has been received.', $message);
            }
            else if($type == 'career application notification'){
                $message = str_replace('@messagetitle', 'Career Application Notification', $message);
                $message = str_replace('@message', 'A new career application has been received.', $message);
            }
        }*/

        if($ishtml == 1){
            $mail->isHTML(true);
            $mail->MsgHTML($message);
            $mail->CharSet=$charset;
        }
        else{
            $mail->Body = $message;
        }

        if ($mail->send()) {
            return '1';
        }
        else {
            return 'Mailer Error: ' . $mail->ErrorInfo;
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : generate_payroll
    # Purpose    : Generates payroll
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function generate_payroll($generate_payroll_option, $employee, $payroll_start_date, $payroll_end_date, $remarks, $username){
        if ($this->databaseConnection()) {
            $error = '';
            $employment_status = '1';
            $systemdate = date('Y-m-d');

            $last_payroll_period = $this->get_last_payroll_period($payroll_start_date);
            $last_payroll_start_date = $this->check_date('empty', $last_payroll_period[0]['PAYROLL_START_DATE'], '', 'Y-m-d', '', '', '');
            $last_payroll_end_date = $this->check_date('empty', $last_payroll_period[0]['PAYROLL_END_DATE'], '', 'Y-m-d', '', '', '');

            if($generate_payroll_option == 'all'){
                $sql = $this->db_connection->prepare("SELECT EMPLOYEE_ID FROM tblemployeeprofile WHERE EMPLOYMENT_STATUS = :employment_status AND EMPLOYEE_ID NOT LIKE 'USER-%'");
                $sql->bindParam(':employment_status', $employment_status);
            }
            else if($generate_payroll_option == 'selected'){
                $sql = $this->db_connection->prepare("SELECT EMPLOYEE_ID FROM tblemployeeprofile WHERE EMPLOYMENT_STATUS = :employment_status AND (FIND_IN_SET(cast(EMPLOYEE_ID as char), :employee) AND EMPLOYEE_ID NOT LIKE 'USER-%')");
                $sql->bindParam(':employment_status', $employment_status);
                $sql->bindParam(':employee', $employee);
            }
            else if($generate_payroll_option == 'exclude'){
                $sql = $this->db_connection->prepare("SELECT EMPLOYEE_ID FROM tblemployeeprofile WHERE EMPLOYMENT_STATUS = :employment_status AND (NOT FIND_IN_SET(cast(EMPLOYEE_ID as char), :employee) AND EMPLOYEE_ID NOT LIKE 'USER-%')");
                $sql->bindParam(':employment_status', $employment_status);
                $sql->bindParam(':employee', $employee);
            }
            else{
                $sql = $this->db_connection->prepare("SELECT EMPLOYEE_ID FROM tblpayrollgroupemployee WHERE PAYROLL_GROUP_ID = :generate_payroll_option AND EMPLOYEE_ID IN (SELECT EMPLOYEE_ID FROM tblemployeeprofile WHERE EMPLOYMENT_STATUS = :employment_status EMPLOYEE_ID NOT LIKE 'USER-%')");
                $sql->bindParam(':generate_payroll_option', $generate_payroll_option);
                $sql->bindParam(':employment_status', $employment_status);
            }

            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    while($row = $sql->fetch()){
                        $employee_id = $row['EMPLOYEE_ID'];

                        $check_payroll_period_start_overlap = $this->check_payroll_period_overlap($employee_id, $payroll_start_date);
                        $check_payroll_period_end_overlap = $this->check_payroll_period_overlap($employee_id, $payroll_end_date);

                        if($check_payroll_period_start_overlap == 0 && $check_payroll_period_end_overlap == 0){
                            $employee_profile_details = $this->get_data_details_one_parameter('employee profile', $employee_id);
                            $payroll_period = $employee_profile_details[0]['PAYROLL_PERIOD'];
                            $basic_pay = $employee_profile_details[0]['BASIC_PAY'];
                            $hourly_rate = $employee_profile_details[0]['HOURLY_RATE'];
                            $minute_rate = $employee_profile_details[0]['MINUTE_RATE'];

                            if($payroll_period == 'SEMIMONTHLY'){
                                $basic_pay = $basic_pay / 2;
                            }

                            # Get total deductions
                            $total_late = $this->get_payroll_late_total($employee_id, $payroll_start_date, $payroll_end_date);
                            $total_early_leaving = $this->get_payroll_early_leave_total($employee_id, $payroll_start_date, $payroll_end_date);
                            $total_overtime = $this->get_payroll_total_overtime($employee_id, $payroll_start_date, $payroll_end_date);
                            $total_unpaid_leave = $this->get_payroll_unpaid_leave_total($employee_id, $payroll_start_date, $payroll_end_date);
                            $total_deduction = $this->get_payroll_total_specification('DEDUCTION', $employee_id, $payroll_start_date, $payroll_end_date);

                            # Get total hours worked
                            $total_attendance_record = $this->get_payroll_total_hours_worked($employee_id, $payroll_start_date, $payroll_end_date);

                            # Get total income
                            $total_allowance = $this->get_payroll_total_specification('ALLOWANCE', $employee_id, $payroll_start_date, $payroll_end_date);
                            $total_other_income = $this->get_payroll_total_specification('OTHERINCOME', $employee_id, $payroll_start_date, $payroll_end_date);

                            # Get withholding tax
                            $withholding_tax = $this->get_withholding_tax($employee_id, $payroll_start_date, $payroll_end_date);

                            # Get gross pay
                            $gross_pay = $basic_pay + $total_allowance + $total_other_income;

                            # Get net pay
                            $net_pay = $gross_pay - ($total_deduction + ($total_late * $minute_rate) + ($total_early_leaving * $minute_rate) + ($total_unpaid_leave * $hourly_rate));

                            # Insert payroll
                            $insert_payroll = $this->insert_payroll($employee_id, $payroll_start_date, $payroll_end_date, $total_attendance_record, $gross_pay, $net_pay, $total_deduction, $withholding_tax, $total_late, $total_early_leaving, $total_overtime, $total_unpaid_leave, $total_allowance, $total_other_income, $systemdate, $remarks, $username);

                            if($insert_payroll != '1'){
                                $error = $insert_payroll;
                            }
                        }
                    }
                }

                return $error;
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : reverse_payroll
    # Purpose    : Reverse payroll
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function reverse_payroll($payroll_id, $employee_id, $username){
        if ($this->databaseConnection()) {
            $systemdate = date('Y-m-d');

            $sql = $this->db_connection->prepare("UPDATE tblpayroll SET STATUS = '2', REVERSAL_DATE = :systemdate WHERE PAYROLL_ID = :payroll_id AND EMPLOYEE_ID = :employee_id");
            $sql->bindParam(':systemdate', $systemdate);
            $sql->bindParam(':payroll_id', $payroll_id);
            $sql->bindParam(':employee_id', $employee_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Reverse Payroll', 'User ' . $username . ' reverse payroll (' . $payroll_id . ') of employee ('. $employee_id .').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : pay_payroll
    # Purpose    : Pay payroll
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function pay_payroll($bank_reference, $payroll_id, $employee_id, $username){
        if ($this->databaseConnection()) {
            $systemdate = date('Y-m-d');

            $sql = $this->db_connection->prepare("UPDATE tblpayroll SET STATUS = '1', PAY_DATE = :systemdate, BANK_REFERENCE = :bank_reference WHERE PAYROLL_ID = :payroll_id AND EMPLOYEE_ID = :employee_id");
            $sql->bindParam(':systemdate', $systemdate);
            $sql->bindParam(':bank_reference', $bank_reference);
            $sql->bindParam(':payroll_id', $payroll_id);
            $sql->bindParam(':employee_id', $employee_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Pay Payroll', 'User ' . $username . ' pay payroll (' . $payroll_id . ') of employee ('. $employee_id .').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : duplicate_payroll_specification
    # Purpose    : duplicate payroll specification
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function duplicate_payroll_specification($payroll_id, $employee_id, $username){
        if ($this->databaseConnection()) {
            $error = '';
            $sql = $this->db_connection->prepare("SELECT SPEC_TYPE, STATUS, CATEGORY, SPEC_AMOUNT, PAYROLL_DATE FROM tblpayrollspec WHERE PAYROLL_ID = :payroll_id AND EMPLOYEE_ID = :employee_id");
            $sql->bindParam(':payroll_id', $payroll_id);
            $sql->bindParam(':employee_id', $employee_id);

            if($sql->execute()){
                while($row = $sql->fetch()){
                    $spec_type = $row['SPEC_TYPE'];
                    $spec_amount = $row['SPEC_AMOUNT'];
                    $category = $row['CATEGORY'];
                    $payroll_date =  $this->check_date('empty', $row['PAYROLL_DATE'], '', 'Y-m-d', '', '', '');

                    $insert_payroll_specification = $this->insert_payroll_specification($employee_id, $spec_type, '0', $category, $spec_amount, $payroll_date, $username);

                    if($insert_payroll_specification != '1'){
                        $error = $insert_payroll_specification;
                    }
                }

                if(empty($error)){
                    return '1';
                }
                else{
                    return $error;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : time_elapsed_string
    # Purpose    : returns the time elapsed
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function time_elapsed_string($datetime, $full = false) {
        $now = new DateTime;
        $ago = new DateTime($datetime);
        $diff = $now->diff($ago);

        $diff->w = floor($diff->d / 7);
        $diff->d -= $diff->w * 7;

        $string = array(
            'y' => 'year',
            'm' => 'month',
            'w' => 'week',
            'd' => 'day',
            'h' => 'hour',
            'i' => 'minute',
            's' => 'second',
        );
        foreach ($string as $k => &$v) {
            if ($diff->$k) {
                $v = $diff->$k . ' ' . $v . ($diff->$k > 1 ? 's' : '');
            } else {
                unset($string[$k]);
            }
        }

        if (!$full) $string = array_slice($string, 0, 1);
        return $string ? implode(', ', $string) . ' ago' : 'just now';
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #   Check data exist
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : check_role_permissions
    # Purpose    : Checks the permissions of the role.
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function check_role_permissions($username, $permissionid){
        if ($this->databaseConnection()) {
            $permission_count = 0;
            $active = 1;

            $employee_profile_details = $this->get_data_details_one_parameter('employee profile', $username);
            $employee_id = $employee_profile_details[0]['EMPLOYEE_ID'];

            $pieces = explode('-', $employee_id);

            if($pieces[0] == 'USER'){
                $sql = $this->db_connection->prepare('SELECT ROLE_ID FROM tbluseraccount WHERE USERNAME = :username AND ROLE_ID IN (SELECT ROLE_ID FROM tblrole WHERE ACTIVE = :active)');
            }
            else{
                $sql = $this->db_connection->prepare('SELECT ROLE_ID FROM tblroleuser WHERE USERNAME = :username AND ROLE_ID IN (SELECT ROLE_ID FROM tblrole WHERE ACTIVE = :active)');
            }

            $sql->bindParam(':username', $username);
            $sql->bindParam(':active', $active);

            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    while($row = $sql->fetch()){
                        $roleid = trim($row['ROLE_ID']);

                        $permission_count = $permission_count + $this->get_permission_count($roleid, $permissionid);
                    }
                }

                return $permission_count;
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : check_email_notification
    # Purpose    : Checks the email notification status.
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function check_email_notification($notification_id){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('SELECT ACTIVE FROM tblnotificationsetting WHERE NOTIFICATION_ID = :notification_id');
            $sql->bindParam(':notification_id', $notification_id);

            if($sql->execute()){
                $row = $sql->fetch();

                return $row['ACTIVE'];
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : check_document_permissions
    # Purpose    : Checks the permissions of the document.
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function check_document_permissions($permission, $document_id, $employee_id, $employee_department){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('SELECT DOCUMENT_ID FROM tbldocumentemployeepermission WHERE DOCUMENT_ID = :document_id AND EMPLOYEE_ID = :employee_id AND PERMISSION = :permission');
            $sql->bindParam(':document_id', $document_id);
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':permission', $permission);

            if($sql->execute()){
                $employee_permission_count = $sql->rowCount();

                if($employee_permission_count <= 0){
                    $sql2 = $this->db_connection->prepare('SELECT DOCUMENT_ID FROM tbldocumentdepartmentpermission WHERE DOCUMENT_ID = :document_id AND DEPARTMENT_ID = :employee_department AND PERMISSION = :permission');
                    $sql2->bindParam(':document_id', $document_id);
                    $sql2->bindParam(':employee_department', $employee_department);
                    $sql2->bindParam(':permission', $permission);

                    if($sql2->execute()){
                       return $sql2->rowCount();
                    }
                }
                else {
                    return $employee_permission_count;
                }
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : check_authorizer
    # Purpose    : Checks the department authorizer.
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function check_authorizer($document_department, $employee_id){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('SELECT COUNT(DEPARTMENT) AS DEPARTMENT FROM tbldocumentauthorizer WHERE DEPARTMENT = :document_department AND AUTHORIZER = :employee_id');
            $sql->bindParam(':document_department', $document_department);
            $sql->bindParam(':employee_id', $employee_id);

            if($sql->execute()){
                $row = $sql->fetch();

                return $row['DEPARTMENT'];
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }



    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : generate_all_employees
    # Purpose    : generate all employees.
    #
    # Returns    : Array
    #
    # -------------------------------------------------------------
    public function generate_all_employees(){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('SELECT EMPLOYEE_ID,FIRST_NAME,LAST_NAME,MIDDLE_NAME,SUFFIX,USERNAME from tblemployeeprofile ');

            if($sql->execute()){
                $row = $sql->fetchAll();
                return $row;
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }



    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : check_data_exist_one_parameter
    # Purpose    : Checks the existence of data with
    #              one parameter.
    #
    # Returns    : Number
    #
    # -------------------------------------------------------------
    public function check_data_exist_one_parameter($type, $parameter){
        if ($this->databaseConnection()) {
            if(!empty($parameter)){
                $query = 'SELECT COUNT(1) AS TOTAL FROM ';

                switch ($type) {
                    case 'user account':
                        $query .= 'tbluseraccount WHERE USERNAME = :parameter OR EMPLOYEE_ID = :parameter';
                        break;
                    case 'employee profile':
                        $query .= 'tblemployeeprofile WHERE USERNAME = :parameter OR EMPLOYEE_ID = :parameter';
                        break;
                    case 'page':
                        $query .= 'tblpage WHERE PAGE_ID = :parameter';
                        break;
                    case 'permission':
                        $query .= 'tblpermission WHERE PERMISSION_ID = :parameter';
                        break;
                    case 'system parameter':
                        $query .= 'tblsystemparameters WHERE PARAMETER_ID = :parameter';
                        break;
                    case 'role':
                        $query .= 'tblrole WHERE ROLE_ID = :parameter';
                        break;
                    case 'company':
                        $query .= 'tblcompany WHERE COMPANY_ID = :parameter';
                        break;
                    case 'application details':
                        $query .= 'tblapplicationsettings WHERE SETTINGS_ID = :parameter';
                        break;
                    case 'department':
                        $query .= 'tbldepartment WHERE DEPARTMENT_ID = :parameter';
                        break;
                    case 'designation':
                        $query .= 'tbldesignation WHERE DESIGNATION_ID = :parameter';
                        break;
                    case 'branch':
                        $query .= 'tblbranch WHERE BRANCH_ID = :parameter';
                        break;
                     case 'announcement':
                        $query .= 'hr_announcements WHERE ID = :parameter';
                        break;
                    case 'holiday':
                        $query .= 'tblholiday WHERE HOLIDAY_ID = :parameter';
                        break;
                    case 'leave type':
                        $query .= 'tblleavetype WHERE LEAVE_TYPE_ID = :parameter';
                        break;
                    case 'leave entitlement':
                        $query .= 'tblleaveentitlement WHERE LEAVE_ENTITLEMENT_ID = :parameter';
                        break;
                    case 'employee leave':
                        $query .= 'tblleave WHERE LEAVE_ID = :parameter';
                        break;
                    case 'employee document':
                        $query .= 'tblemployeedocument WHERE DOCUMENT_ID = :parameter';
                        break;
                    case 'employee attendance log':
                        $query .= 'tblattendancerecord WHERE ATTENDANCE_ID = :parameter';
                        break;
                    case 'deduction type':
                        $query .= 'tbldeductiontype WHERE DEDUCTION_TYPE_ID = :parameter';
                        break;
                    case 'allowance type':
                        $query .= 'tblallowancetype WHERE ALLOWANCE_TYPE_ID = :parameter';
                        break;
                    case 'other income type':
                        $query .= 'tblotherincometype WHERE OTHER_INCOME_TYPE_ID = :parameter';
                        break;
                    case 'payroll specification':
                        $query .= 'tblpayrollspec WHERE SPEC_ID = :parameter';
                        break;
                    case 'employee superior':
                        $query .= 'tblemployeesuperior WHERE EMPLOYEE_ID = :parameter';
                        break;
                    case 'email notification':
                        $query .= 'tblnotificationsetting WHERE NOTIFICATION_ID = :parameter';
                        break;
                    case 'email configuration':
                        $query .= 'tblmailconfig WHERE MAIL_ID = :parameter';
                        break;
                    case 'payroll group':
                        $query .= 'tblpayrollgroup WHERE PAYROLL_GROUP_ID = :parameter';
                        break;
                    case 'employee attendance adjustment request':
                        $query .= 'tblattendanceadustment WHERE ADJUSTMENT_ID = :parameter';
                        break;
                    case 'telephone log':
                        $query .= 'tbltelephonelogsheet WHERE LOG_ID = :parameter';
                        break;
                    case 'document management setting':
                        $query .= 'tbldocumentfiletype WHERE SETTINGS_ID = :parameter';
                        break;
                    case 'document':
                        $query .= 'tbldocument WHERE DOCUMENT_ID = :parameter';
                        break;
                    case 'transmittal':
                        $query .= 'tbltransmittal WHERE TRANSMITTAL_ID = :parameter';
                        break;
                    case 'suggest to win':
                        $query .= 'tblstw WHERE STW_ID = :parameter';
                        break;
                    case 'suggest to win vote summary':
                        $query .= 'tblstwvotesummary WHERE STW_ID = :parameter';
                        break;
                    case 'training room log':
                        $query .= 'tbltrainingroomlogsheet WHERE LOG_ID = :parameter';
                        break;
                    case 'id number':
                        $query .= 'tblemployeeprofile WHERE ID_NUMBER = :parameter';
                        break;
                    case 'weekly cash flow':
                        $query .= 'tblwcf WHERE WCF_ID = :parameter';
                        break;
                    case 'weekly cash flow particulars':
                        $query .= 'tblwcfparticulars WHERE PARTICULAR_ID = :parameter';
                        break;
                    case 'ticket':
                        $query .= 'tblticket WHERE TICKET_ID = :parameter';
                        break;
                    case 'ticket note':
                        $query .= 'tblticketnotes WHERE NOTE_ID = :parameter';
                        break;
                    case 'ticket attachment':
                        $query .= 'tblticketattachment WHERE ATTACHMENT_ID = :parameter';
                        break;
                    case 'ticket adjustment':
                        $query .= 'tblticketadjustment WHERE ADJUSTMENT_ID = :parameter';
                        break;
                    case 'notification':
                        $query .= 'tblnotifications WHERE NOTIFICATION_ID = :parameter';
                        break;
                    case 'meeting':
                        $query .= 'tblmeeting WHERE MEETING_ID = :parameter';
                        break;
                    case 'meeting note':
                        $query .= 'tblmeetingnotes WHERE NOTE_ID = :parameter';
                        break;
                    case 'meeting task':
                        $query .= 'tblmeetingtask WHERE TASK_ID = :parameter';
                        break;
                    case 'meeting memo':
                        $query .= 'tblmeetingmemo WHERE MEMO_ID = :parameter';
                        break;
                    case 'meeting other matters':
                        $query .= 'tblmeetingothermatters WHERE OTHER_MATTERS_ID = :parameter';
                        break;
                    case 'training':
                        $query .= 'tbltraining WHERE TRAINING_ID = :parameter';
                    break;
                    case 'overtime':
                        $query .= 'tblovertime WHERE OVERTIME_ID = :parameter';
                    break;
					case 'car search parameter':
                        $query .= 'tblcarparameter WHERE PARAMETER_ID = :parameter OR PARAMETER_CODE = :parameter';
                        break;
                    case 'price index item':
                        $query .= 'tblpriceindexitem WHERE ITEM_ID = :parameter';
                        break;
                    case 'price index amount adjustment':
                        $query .= 'tblpriceindexvalueadustment WHERE ADJUSTMENT_ID = :parameter';
                        break;
                    default:
                        $query = '';
                }

                $sql = $this->db_connection->prepare($query);
                $sql->bindParam(':parameter', $parameter);

                if($sql->execute()){
                    $row = $sql->fetch();

                    return $row['TOTAL'];
                }
                else{
                    return $sql->errorInfo()[2];
                }
            }
            else{
                return 0;
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : check_data_exist_two_parameter
    # Purpose    : Checks the existence of data with
    #              two parameters
    #
    # Returns    : Number
    #
    # -------------------------------------------------------------
    public function check_data_exist_two_parameter($type, $parameter1, $parameter2){
        if ($this->databaseConnection()) {
            if(!empty($parameter1) && !empty($parameter2)){
              $query = 'SELECT COUNT(1) AS TOTAL FROM ';

                switch ($type) {
                    case 'system code':
                        $query .= 'tblsystemcode WHERE SYSTEM_TYPE = :parameter1 AND SYSTEM_CODE = :parameter2';
                        break;
                    case 'office shift':
                        $query .= 'tblofficeshift WHERE EMPLOYEE_ID = :parameter1 AND DTR_DAY = :parameter2';
                        break;
                    case 'payroll':
                        $query .= 'tblpayroll WHERE PAYROLL_ID = :parameter1 AND EMPLOYEE_ID = :parameter2';
                        break;
                    case 'document authorizer':
                        $query .= 'tbldocumentauthorizer WHERE DEPARTMENT = :parameter1 AND AUTHORIZER = :parameter2';
                        break;
                    case 'suggest to win vote':
                        $query .= 'tblstwvote WHERE STW_ID = :parameter1 AND EMPLOYEE_ID = :parameter2';
                        break;
                    case 'email recipient':
                        $query .= 'tblemailrecipient WHERE NOTIFICATION_ID = :parameter1 AND RECIPIENT_ID = :parameter2';
                        break;
                    case 'meeting memo':
                        $query .= 'tblmeetingmemo WHERE MEETING_ID = :parameter1 AND DOCUMENT_ID = :parameter2';
                        break;
                    case 'training report':
                        $query .= 'tbltrainingreport WHERE TRAINING_ID = :parameter1 AND EMPLOYEE_ID = :parameter2';
                        break;
                    default:
                        $query = '';
                }

                $sql = $this->db_connection->prepare($query);
                $sql->bindParam(':parameter1', $parameter1);
                $sql->bindParam(':parameter2', $parameter2);

                if($sql->execute()){
                    $row = $sql->fetch();

                    return $row['TOTAL'];
                }
                else{
                    return $sql->errorInfo()[2];
                }
            }
            else{
                return 0;
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : check_data_exist_three_parameter
    # Purpose    : Checks the existence of data with
    #              three parameters
    #
    # Returns    : Number
    #
    # -------------------------------------------------------------
    public function check_data_exist_three_parameter($type, $parameter1, $parameter2, $parameter3){
        if ($this->databaseConnection()) {
            if(!empty($parameter1) && !empty($parameter2) && !empty($parameter3)){
                $query = 'SELECT COUNT(1) AS TOTAL FROM ';

                switch ($type) {
                    case 'deduction amount':
                        $query .= 'tbldeductionamount WHERE DEDUCTION_TYPE_ID = :parameter1 AND START_RANGE = :parameter2 AND END_RANGE = :parameter3';
                        break;
                    case 'payroll':
                        $query .= 'tblpayroll WHERE EMPLOYEE_ID = :parameter1 AND PAYROLL_START_DATE = :parameter2 AND PAYROLL_END_DATE = :parameter3';
                        break;
                    default:
                        $query = '';
                }

                $sql = $this->db_connection->prepare($query);
                $sql->bindParam(':parameter1', $parameter1);
                $sql->bindParam(':parameter2', $parameter2);
                $sql->bindParam(':parameter3', $parameter3);

                if($sql->execute()){
                    $row = $sql->fetch();

                    return $row['TOTAL'];
                }
                else{
                    return $sql->errorInfo()[2];
                }
            }
            else{
                return 0;
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : check_meeting_permission
    # Purpose    : Checks the permissions of the meeting.
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function check_meeting_permission($permission, $meeting_id, $employee_id){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('SELECT MEETING_ID FROM tblmeetingpermission WHERE MEETING_ID = :meeting_id AND EMPLOYEE_ID = :employee_id AND PERMISSION = :permission');
            $sql->bindParam(':meeting_id', $meeting_id);
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':permission', $permission);

            if($sql->execute()){
                return $sql->rowCount();
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #   Update data
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_failed_login_attempt
    # Purpose    : Updates the login attempt.
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_failed_login_attempt($username, $employeeid, $login_attemp, $last_failed_attempt_date){
        if ($this->databaseConnection()) {
            if(!empty($employeeid)){
                $sql = $this->db_connection->prepare('UPDATE tbluseraccount SET FAILED_LOGIN = :login_attempt, LAST_FAILED_LOGIN = :last_failed_attempt_date WHERE EMPLOYEE_ID = :employeeid');
                $sql->bindParam(':login_attempt', $login_attemp);
                $sql->bindParam(':last_failed_attempt_date', $last_failed_attempt_date);
                $sql->bindParam(':employeeid', $employeeid);
            }
            else{
                $sql = $this->db_connection->prepare('UPDATE tbluseraccount SET FAILED_LOGIN = :login_attempt, LAST_FAILED_LOGIN = :last_failed_attempt_date WHERE USERNAME = :username');
                $sql->bindParam(':login_attempt', $login_attemp);
                $sql->bindParam(':last_failed_attempt_date', $last_failed_attempt_date);
                $sql->bindParam(':username', $username);
            }

            if($sql->execute()){
                return '1';
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_user_password
    # Purpose    : Updates the user account password.
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_user_password($username, $password, $password_expiry_date){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('UPDATE tbluseraccount SET PASSWORD = :password, PASSWORD_EXPIRY_DATE = :password_expiry_date WHERE USERNAME = :username');
            $sql->bindParam(':password', $password);
            $sql->bindParam(':password_expiry_date', $password_expiry_date);
            $sql->bindParam(':username', $username);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Password', '');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_page
    # Purpose    : Updates page
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_page($page_name, $page_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblpage SET PAGE_NAME = :page_name, RECORD_LOG = :record_log WHERE PAGE_ID = :page_id');
            $sql->bindParam(':page_name', $page_name);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':page_id', $page_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Page', 'User ' . $username . ' updated Page (' . $page_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_permission
    # Purpose    : Updates permission
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_permission($page_id, $permission_desc, $permission_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblpermission SET PAGE_ID = :page_id, PERMISSION_DESC = :permission_desc, RECORD_LOG = :record_log WHERE PERMISSION_ID = :permission_id');
            $sql->bindParam(':page_id', $page_id);
            $sql->bindParam(':permission_desc', $permission_desc);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':permission_id', $permission_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Permission', 'User ' . $username . ' updated permission (' . $permission_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_system_parameter
    # Purpose    : Updates system parameter
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_system_parameter($description, $extension, $number, $parameter_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblsystemparameters SET PARAMETER_DESC = :description, PARAMETER_EXTENSION = :extension, PARAMETER_NUMBER = :number, RECORD_LOG = :record_log WHERE PARAMETER_ID = :parameter_id');
            $sql->bindParam(':description', $description);
            $sql->bindParam(':extension', $extension);
            $sql->bindParam(':number', $number);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':parameter_id', $parameter_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update System Parameter', 'User ' . $username . ' updated system parameter (' . $parameter_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_system_parameter_value
    # Purpose    : Updates system parameter value
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_system_parameter_value($parameter_number, $parameter_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblsystemparameters SET PARAMETER_NUMBER = :parameter_number, RECORD_LOG = :record_log WHERE PARAMETER_ID = :parameter_id');
            $sql->bindParam(':parameter_number', $parameter_number);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':parameter_id', $parameter_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update System Parameter', 'User ' . $username . ' updated system parameter value (' . $parameter_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_system_code
    # Purpose    : Update system code
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_system_code($system_desc, $system_type, $system_code, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblsystemcode SET SYSTEM_DESC = :system_desc, RECORD_LOG = :record_log WHERE SYSTEM_TYPE = :system_type AND SYSTEM_CODE = :system_code');
            $sql->bindParam(':system_desc', $system_desc);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':system_type', $system_type);
            $sql->bindParam(':system_code', $system_code);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update System Code', 'User ' . $username . ' updated system code (' . $system_code . ') with system type ('. $system_type .').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_role
    # Purpose    : Update role
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_role($role_desc, $role_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblrole SET ROLE_DESC = :role_desc, RECORD_LOG = :record_log WHERE ROLE_ID = :role_id');
            $sql->bindParam(':role_desc', $role_desc);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':role_id', $role_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Role', 'User ' . $username . ' updated role (' . $role_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_role_status
    # Purpose    : Update role status
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_role_status($role_id, $active, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblrole SET ACTIVE = :active, RECORD_LOG = :record_log WHERE ROLE_ID = :role_id');
            $sql->bindParam(':active', $active);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':role_id', $role_id);

            if($sql->execute()){
                if($active == 1){
                    $log_type = 'Activate Role';
                    $log = 'User ' . $username . ' activated role (' . $role_id . ')';
                }
                else{
                    $log_type = 'Deactivate Role';
                    $log = 'User ' . $username . ' deactivated role (' . $role_id . ')';
                }

                $insert_user_log = $this->insert_logs($username, $log_type, $log);

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_user_account_status
    # Purpose    : Update user account status
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_user_account_status($user_cd, $active, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tbluseraccount SET ACTIVE = :active, RECORD_LOG = :record_log WHERE USERNAME = :user_cd');
            $sql->bindParam(':active', $active);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':user_cd', $user_cd);

            if($sql->execute()){
                if($active == 1){
                    $log_type = 'Activate User Account';
                    $log = 'User ' . $username . ' activated user account (' . $user_cd . ')';
                }
                else{
                    $log_type = 'Deactivate User Account';
                    $log = 'User ' . $username . ' deactivated user account (' . $user_cd . ')';
                }

                $insert_user_log = $this->insert_logs($username, $log_type, $log);

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_company_settings
    # Purpose    : Update company settings
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_company_settings($company_name, $email, $phone, $telephone, $website, $address, $start_time, $end_time, $lunch_start_time, $lunch_end_time, $half_day, $working_days_per_month, $late, $working_day_total, $max_clock_in, $health_declaration, $company_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblcompany SET COMPANY_NAME = :company_name, EMAIL = :email, PHONE = :phone, TELEPHONE = :telephone, WEBSITE = :website, ADDRESS = :address, WORKING_DAYS = :working_day_total, START_WORKING_HOURS = :start_time, END_WORKING_HOURS = :end_time, START_LUNCH_BREAK = :lunch_start_time, END_LUNCH_BREAK = :lunch_end_time, MONTHLY_WORKING_DAYS = :working_days_per_month, HALF_DAY_MARK = :half_day, LATE_MARK = :late, MAX_CLOCK_IN = :max_clock_in, HEALTH_DECLARATION = :health_declaration, RECORD_LOG = :record_log WHERE COMPANY_ID = :company_id');
            $sql->bindParam(':company_name', $company_name);
            $sql->bindParam(':email', $email);
            $sql->bindParam(':phone', $phone);
            $sql->bindParam(':telephone', $telephone);
            $sql->bindParam(':website', $website);
            $sql->bindParam(':address', $address);
            $sql->bindParam(':working_day_total', $working_day_total);
            $sql->bindParam(':start_time', $start_time);
            $sql->bindParam(':end_time', $end_time);
            $sql->bindParam(':lunch_start_time', $lunch_start_time);
            $sql->bindParam(':lunch_end_time', $lunch_end_time);
            $sql->bindParam(':working_days_per_month', $working_days_per_month);
            $sql->bindParam(':half_day', $half_day);
            $sql->bindParam(':late', $late);
            $sql->bindParam(':max_clock_in', $max_clock_in);
            $sql->bindParam(':health_declaration', $health_declaration);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':company_id', $company_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Company Settings', 'User ' . $username . ' updated company settings (' . $company_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_profile_image
    # Purpose    : Updates profile image
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_profile_image($profile_image_file_tmp_name, $profile_image_file_actual_ext, $employee_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            if(!empty($profile_image_file_tmp_name)){
                $fileNew = $username . '.' . $profile_image_file_actual_ext;
                $fileDestination = 'assets/images/employees/' . $fileNew;
                $file_path ='./assets/images/employees/' . $fileNew;

                if(!empty($employee_id)){
                    $employee_profile_details = $this->get_data_details_one_parameter('employee profile', $employee_id);
                }
                else{
                    $employee_profile_details = $this->get_data_details_one_parameter('employee profile', $username);
                }

                $profile_image = $employee_profile_details[0]['PROFILE_IMAGE'];

                if(file_exists($profile_image)){
                    if (unlink($profile_image)) {
                        if(move_uploaded_file($profile_image_file_tmp_name, $fileDestination)){
                            if(!empty($employee_id)){
                                $sql = $this->db_connection->prepare('UPDATE tblemployeeprofile SET PROFILE_IMAGE = :file_path, RECORD_LOG = :record_log WHERE EMPLOYEE_ID = :employee_id OR USERNAME = :employee_id');
                                $sql->bindParam(':file_path', $file_path);
                                $sql->bindParam(':record_log', $record_log);
                                $sql->bindParam(':employee_id', $employee_id);

                                if($sql->execute()){
                                    $insert_user_log = $this->insert_logs($username, 'UPDATE PROFILE', 'User ' . $username . ' updated profile image (' . $employee_id . ').');

                                    if($insert_user_log == '1'){
                                        return '1';
                                    }
                                    else{
                                        return $insert_user_log;
                                    }
                                }
                                else{
                                    return $sql->errorInfo()[2];
                                }
                            }
                            else{
                                $sql = $this->db_connection->prepare('UPDATE tblemployeeprofile SET PROFILE_IMAGE = :file_path, RECORD_LOG = :record_log WHERE EMPLOYEE_ID = :username OR USERNAME = :username');
                                $sql->bindParam(':file_path', $file_path);
                                $sql->bindParam(':record_log', $record_log);
                                $sql->bindParam(':username', $username);

                                if($sql->execute()){
                                    $insert_user_log = $this->insert_logs($username, 'UPDATE PROFILE', 'User ' . $username . ' updated profile image (' . $username . ').');

                                    if($insert_user_log == '1'){
                                        return '1';
                                    }
                                    else{
                                        return $insert_user_log;
                                    }
                                }
                                else{
                                    return $sql->errorInfo()[2];
                                }
                            }
                        }
                        else{
                            return 'There was an error uploading your image.';
                        }
                    }
                    else {
                        return $profile_image . ' cannot be deleted due to an error.';
                    }
                }
                else{
                    if(move_uploaded_file($profile_image_file_tmp_name, $fileDestination)){
                        if(!empty($employee_id)){
                            $sql = $this->db_connection->prepare('UPDATE tblemployeeprofile SET PROFILE_IMAGE = :file_path, RECORD_LOG = :record_log WHERE EMPLOYEE_ID = :employee_id OR USERNAME = :employee_id');
                            $sql->bindParam(':file_path', $file_path);
                            $sql->bindParam(':record_log', $record_log);
                            $sql->bindParam(':employee_id', $employee_id);

                            if($sql->execute()){
                                $insert_user_log = $this->insert_logs($username, 'UPDATE PROFILE', 'User ' . $username . ' updated profile image (' . $employee_id . ').');

                                if($insert_user_log == '1'){
                                    return '1';
                                }
                                else{
                                    return $insert_user_log;
                                }
                            }
                            else{
                                return $sql->errorInfo()[2];
                            }
                        }
                        else{
                            $sql = $this->db_connection->prepare('UPDATE tblemployeeprofile SET PROFILE_IMAGE = :file_path, RECORD_LOG = :record_log WHERE EMPLOYEE_ID = :username OR USERNAME = :username');
                            $sql->bindParam(':file_path', $file_path);
                            $sql->bindParam(':record_log', $record_log);
                            $sql->bindParam(':username', $username);

                            if($sql->execute()){
                                $insert_user_log = $this->insert_logs($username, 'UPDATE PROFILE', 'User ' . $username . ' updated profile image (' . $username . ').');

                                if($insert_user_log == '1'){
                                    return '1';
                                }
                                else{
                                    return $insert_user_log;
                                }
                            }
                            else{
                                return $sql->errorInfo()[2];
                            }
                        }
                    }
                    else{
                        return 'There was an error uploading your image.';
                    }
                }
            }
            else{
                return '1';
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_sales_partner_booking
    # Purpose    : Updates sales partner booking
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_sales_partner_booking($fileTmpName, $fileExtension, $username, $submission_type){
        // Connect to database and return if there is an error
        if (!$this->databaseConnection()) {
            return 'Server Error.';
        }

        // Open the file in read mode
        $handle = fopen($fileTmpName, "r");
        if ($handle === FALSE) {
            return "Error opening the file.";
        }

        // Skip the first row (column headers)
        fgetcsv($handle, 1000, ',');

        $query = "START TRANSACTION;";
        $sql = $this->db_connection->prepare($query);
        $sql->execute();

        if ($submission_type == 'replacement') {
            // Remove all the table data in database
            $query = "TRUNCATE TABLE sales_partner_booking;";
            $sql = $this->db_connection->prepare($query);
            $sql->execute();
        }

        // Prepare the SQL statement
        $sql = $this->db_connection->prepare('INSERT INTO sales_partner_booking (id, full_name, branch, promissory_note_amount, disbursement_date) VALUES (:id, :full_name, :branch, :promissory_note_amount, :disbursement_date)');

        // Read the file line by line
        while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
            $sql->bindParam(':id', $data[0]);
            $sql->bindParam(':full_name', $data[1]);
            $sql->bindParam(':branch', $data[2]);
            $sql->bindParam(':promissory_note_amount', $data[3]);
            $sql->bindParam(':disbursement_date', $data[4]);

            // Execute the prepared statement
            if(!$sql->execute()){
                $query = "ROLLBACK;";
                $sql = $this->db_connection->prepare($query);
                $sql->execute();
                return "There was an error in inserting the data.";
            }
        }

        $query = "COMMIT;";
        $sql = $this->db_connection->prepare($query);
        $sql->execute();

        // Close the file
        fclose($handle);

        return 1;
    }


    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_position_monthly_quota
    # Purpose    : Updates position monthly quota
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_position_monthly_quota($fileTmpName, $fileExtension, $username){
        // Connect to database and return if there is an error
        if (!$this->databaseConnection()) {
            return 'Server Error.';
        }

        // Open the file in read mode
        $handle = fopen($fileTmpName, "r");
        if ($handle === FALSE) {
            return "Error opening the file.";
        }

        // Skip the first row (column headers)
        fgetcsv($handle, 1000, ',');

        $query = "START TRANSACTION;";
        $sql = $this->db_connection->prepare($query);
        $sql->execute();

        // Remove all the table data in database
        $query = "TRUNCATE TABLE position_monthly_quota";
        $sql = $this->db_connection->prepare($query);
        $sql->execute();

        // Prepare the SQL statement
        $sql = $this->db_connection->prepare('INSERT INTO position_monthly_quota (id, position_name, quota) VALUES (:id, :position_name, :quota)');

        // Read the file line by line
        while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
            $sql->bindParam(':id', $data[0]);
            $sql->bindParam(':position_name', $data[1]);
            $sql->bindParam(':quota', $data[2]);

            // Execute the prepared statement
            if(!$sql->execute()){
                $query = "ROLLBACK;";
                $sql = $this->db_connection->prepare($query);
                $sql->execute();
                return "There was an error in inserting the data.";
            }
        }

        $query = "COMMIT;";
        $sql = $this->db_connection->prepare($query);
        $sql->execute();

        // Close the file
        fclose($handle);

        return 1;
    }

    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_position_monthly_quota_history
    # Purpose    : Updates position monthly quota history
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_position_monthly_quota_history($fileTmpName, $fileExtension, $username){
        // Connect to database and return if there is an error
        if (!$this->databaseConnection()) {
            return 'Server Error.';
        }

        // Open the file in read mode
        $handle = fopen($fileTmpName, "r");
        if ($handle === FALSE) {
            return "Error opening the file.";
        }

        // Skip the first row (column headers)
        fgetcsv($handle, 1000, ',');

        $query = "START TRANSACTION;";
        $sql = $this->db_connection->prepare($query);
        $sql->execute();

        // Remove all the table data in database
        $query = "TRUNCATE TABLE position_monthly_quota_history";
        $sql = $this->db_connection->prepare($query);
        $sql->execute();

        // Prepare the SQL statement
        $sql = $this->db_connection->prepare('INSERT INTO position_monthly_quota_history (id, full_name, position_monthly_quota_id, date) VALUES (:id, :full_name, :position_monthly_quota_id, :date)');

        // Read the file line by line
        while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
            $sql->bindParam(':id', $data[0]);
            $sql->bindParam(':full_name', $data[1]);
            $sql->bindParam(':position_monthly_quota_id', $data[2]);
            $sql->bindParam(':date', $data[3]);

            // Execute the prepared statement
            if(!$sql->execute()){
                $query = "ROLLBACK;";
                $sql = $this->db_connection->prepare($query);
                $sql->execute();
                return "There was an error in inserting the data.";
            }
        }

        $query = "COMMIT;";
        $sql = $this->db_connection->prepare($query);
        $sql->execute();

        // Close the file
        fclose($handle);

        return 1;
    }

    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_branch_monthly_quota_history
    # Purpose    : Updates branch monthly quota history
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_branch_monthly_quota_history($fileTmpName, $fileExtension, $username){
        // Connect to database and return if there is an error
        if (!$this->databaseConnection()) {
            return 'Server Error.';
        }

        // Open the file in read mode
        $handle = fopen($fileTmpName, "r");
        if ($handle === FALSE) {
            return "Error opening the file.";
        }

        // Skip the first row (column headers)
        fgetcsv($handle, 1000, ',');

        $query = "START TRANSACTION;";
        $sql = $this->db_connection->prepare($query);
        $sql->execute();

        // Remove all the table data in database
        $query = "TRUNCATE TABLE branch_monthly_quota_history";
        $sql = $this->db_connection->prepare($query);
        $sql->execute();

        // Prepare the SQL statement
        $sql = $this->db_connection->prepare('INSERT INTO branch_monthly_quota_history (id, branch, quota, date) VALUES (:id, :branch, :quota, :date)');

        // Read the file line by line
        while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
            $sql->bindParam(':id', $data[0]);
            $sql->bindParam(':branch', $data[1]);
            $sql->bindParam(':quota', $data[2]);
            $sql->bindParam(':date', $data[3]);

            // Execute the prepared statement
            if(!$sql->execute()){
                $query = "ROLLBACK;";
                $sql = $this->db_connection->prepare($query);
                $sql->execute();
                return "There was an error in inserting the data.";
            }
        }

        $query = "COMMIT;";
        $sql = $this->db_connection->prepare($query);
        $sql->execute();

        // Close the file
        fclose($handle);

        return 1;
    }


    public function get_employee_departures() {
    if ($this->databaseConnection()) {
        // Use a Common Table Expression (CTE) to ensure all months are included
        $query = "
            WITH months AS (
                SELECT 1 AS month_num, 'Jan' AS month_name UNION
                SELECT 2, 'Feb' UNION
                SELECT 3, 'Mar' UNION
                SELECT 4, 'Apr' UNION
                SELECT 5, 'May' UNION
                SELECT 6, 'Jun' UNION
                SELECT 7, 'Jul' UNION
                SELECT 8, 'Aug' UNION
                SELECT 9, 'Sep' UNION
                SELECT 10, 'Oct' UNION
                SELECT 11, 'Nov' UNION
                SELECT 12, 'Dec'
            )
            SELECT
                m.month_name AS month,
                COUNT(CASE WHEN e.EXIT_DATE IS NOT NULL THEN e.EMPLOYEE_ID END) AS departures
            FROM
                months m
            LEFT JOIN
                tblemployeeprofile e ON
                    MONTH(e.EXIT_DATE) = m.month_num AND
                    YEAR(e.EXIT_DATE) = YEAR(CURRENT_DATE())
            WHERE
                m.month_num <= MONTH(CURRENT_DATE())
            GROUP BY
                m.month_num, m.month_name
            ORDER BY
                m.month_num";

        $sql = $this->db_connection->prepare($query);

        if (!$sql->execute()) {
            error_log("Error executing employee departures query: " . json_encode($sql->errorInfo()));
            return $sql->errorInfo()[2];
        }

        $result = $sql->fetchAll(PDO::FETCH_ASSOC);

        // Add validation to ensure we have data
        if (empty($result)) {
            error_log("Warning: No employee departure data found");
        }

        return $result;
    }

    return false;
}


/**
 * Get employee work anniversaries for the current month or specified month
 *
 * @param string $username Username for permission checking
 * @param int $permission_id Permission ID to verify access
 * @param int $month Month number (1-12), defaults to current month
 * @return array|bool Array of employees with work anniversaries or false if no permission
 */
public function get_employee_work_anniversaries($username = null, $permission_id = null, $month = null) {
    // Check permissions if parameters are provided
    if ($username && $permission_id) {
        $has_permission = $this->check_role_permissions($username, $permission_id);
        if (!$has_permission) {
            return false;
        }
    }
    if ($this->databaseConnection()) {
        // If no month specified, use current month
        if ($month === null) {
            $month = date('n'); // Current month as number (1-12)
        }
        
        // --- THIS IS THE CORRECTED QUERY ---
        $query = "
            SELECT
                EMPLOYEE_ID,
                FIRST_NAME,
                LAST_NAME,
                JOIN_DATE,
                DAY(JOIN_DATE) AS anniversary_day,
                (YEAR(CURRENT_DATE()) - YEAR(JOIN_DATE)) AS years_of_service, 
                PROFILE_IMAGE,
                DEPARTMENT,
                DESIGNATION
            FROM
                tblemployeeprofile
            WHERE
                MONTH(JOIN_DATE) = ?
                AND EMPLOYMENT_STATUS = 1
                AND (EXIT_DATE IS NULL OR EXIT_DATE > CURRENT_DATE())
                AND (YEAR(CURRENT_DATE()) - YEAR(JOIN_DATE)) > 0
            ORDER BY
                DAY(JOIN_DATE) ASC";
        
        $sql = $this->db_connection->prepare($query);
        if (!$sql->execute([$month])) {
            error_log("Error fetching employee work anniversaries: " . json_encode($sql->errorInfo()));
            return false;
        }
        return $sql->fetchAll(PDO::FETCH_ASSOC);
    }
    return false;
}

public function get_newly_permanent_employees($username = null, $permission_id = null, $month = null) {
    // Check permissions if parameters are provided
    if ($username && $permission_id) {
        $has_permission = $this->check_role_permissions($username, $permission_id);
        if (!$has_permission) {
            return false;
        }
    }

    if ($this->databaseConnection()) {
        // If no month specified, use current month
        if ($month === null) {
            $month = date('n'); // Current month as number (1-12)
        }

        // Get current year
        $year = date('Y');

        $query = "
            SELECT
                e.EMPLOYEE_ID,
                e.FIRST_NAME,
                e.LAST_NAME,
                e.JOIN_DATE,
                e.PERMANENT_DATE,
                e.PROFILE_IMAGE,
                e.BRANCH,
                e.DESIGNATION,
                DATEDIFF(e.PERMANENT_DATE, e.JOIN_DATE) AS days_to_permanent,
                b.BRANCH as BRANCH_NAME,
                d.DESIGNATION as DESIGNATION_NAME
            FROM
                tblemployeeprofile e
            LEFT JOIN
                tblbranch b ON e.BRANCH = b.BRANCH_ID
            LEFT JOIN
                tbldesignation d ON e.DESIGNATION = d.DESIGNATION_ID
            WHERE
                MONTH(e.PERMANENT_DATE) = ?
                AND YEAR(e.PERMANENT_DATE) = ?
                AND e.EMPLOYMENT_STATUS = 1
                AND e.PERMANENT_DATE IS NOT NULL
            ORDER BY
                e.PERMANENT_DATE ASC";

        $sql = $this->db_connection->prepare($query);

        if (!$sql->execute([$month, $year])) {
            error_log("Error fetching newly permanent employees: " . json_encode($sql->errorInfo()));
            return false;
        }

        return $sql->fetchAll(PDO::FETCH_ASSOC);
    }

    return false;
}


public function get_new_employees($username = null, $permission_id = null, $month = null) {
    // Check permissions if parameters are provided
    if ($username && $permission_id) {
        $has_permission = $this->check_role_permissions($username, $permission_id);
        if (!$has_permission) {
            return false;
        }
    }

    if ($this->databaseConnection()) {
        // If no month specified, use current month
        if ($month === null) {
            $month = date('n'); // Current month as number (1-12)
        }

        // Get current year
        $year = date('Y');

        $query = "
            SELECT
                e.EMPLOYEE_ID,
                e.FIRST_NAME,
                e.LAST_NAME,
                e.JOIN_DATE,
                e.PROFILE_IMAGE,
                e.BRANCH,
                e.DESIGNATION,
                b.BRANCH as BRANCH_NAME,
                d.DESIGNATION as DESIGNATION_NAME
            FROM
                tblemployeeprofile e
            LEFT JOIN
                tblbranch b ON e.BRANCH = b.BRANCH_ID
            LEFT JOIN
                tbldesignation d ON e.DESIGNATION = d.DESIGNATION_ID
            WHERE
                MONTH(e.JOIN_DATE) = ?
                AND YEAR(e.JOIN_DATE) = ?
                AND e.EMPLOYMENT_STATUS = 1
            ORDER BY
                e.JOIN_DATE ASC";

        $sql = $this->db_connection->prepare($query);

        if (!$sql->execute([$month, $year])) {
            error_log("Error fetching new employees: " . json_encode($sql->errorInfo()));
            return false;
        }

        return $sql->fetchAll(PDO::FETCH_ASSOC);
    }

    return false;
}




  public function get_employee_headcount_details() {
    if ($this->databaseConnection()) {
        // Define months for the x-axis labels
        $monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        $result = [];
        $currentYear = date('Y');
        $currentMonth = date('n');

        // Calculate headcount for each month up to current month
        for ($monthNum = 1; $monthNum <= $currentMonth; $monthNum++) {
            // Get the last day of the month
            $monthEnd = date('Y-m-t', strtotime("$currentYear-$monthNum-01"));

            // Query for active employees as of month end
            $query = "
                SELECT COUNT(*) as headcount
                FROM tblemployeeprofile
                WHERE
                    (JOIN_DATE <= ?) AND
                    (EXIT_DATE IS NULL OR EXIT_DATE > ?) AND
                    EMPLOYMENT_STATUS = 1 and (username != 'guard')";

            $sql = $this->db_connection->prepare($query);
            $sql->execute([$monthEnd, $monthEnd]);
            $count = $sql->fetch(PDO::FETCH_ASSOC)['headcount'];

            // Add to result array
            $result[] = [
                'month' => $monthNames[$monthNum - 1],
                'headcount' => (int)$count
            ];

            // Debug log to verify counts (optional)
            error_log("Month: {$monthNames[$monthNum - 1]}, Headcount: $count");
        }

        return $result;
    }

    return false;
}


public function get_total_employee_headcount($username = null, $permission_id = null) {
    // Check permissions if parameters are provided
    if ($username && $permission_id) {
        $has_permission = $this->check_role_permissions($username, $permission_id);
        if (!$has_permission) {
            return false;
        }
    }

    if ($this->databaseConnection()) {
        // Get the current date
        $current_date = date('Y-m-d');

        // Query for active employees as of today
        $query = "
            SELECT COUNT(*) as total_headcount
            FROM tblemployeeprofile
            WHERE
                (JOIN_DATE <= ?) AND
                (EXIT_DATE IS NULL OR EXIT_DATE > ?) AND
                EMPLOYMENT_STATUS = 1 AND
                DEPARTMENT != 'DEPT9'";

        $sql = $this->db_connection->prepare($query);
        $sql->execute([$current_date, $current_date]);
        $total_count = $sql->fetch(PDO::FETCH_ASSOC)['total_headcount'];

        return (int)$total_count;
    }

    return false;
}


public function get_total_employee_male($username = null, $permission_id = null) {
    // Check permissions if parameters are provided
    if ($username && $permission_id) {
        $has_permission = $this->check_role_permissions($username, $permission_id);
        if (!$has_permission) {
            return false;
        }
    }

    if ($this->databaseConnection()) {
        // Get the current date
        $current_date = date('Y-m-d');

        // Query for active employees as of today
        $query = "
            SELECT COUNT(*) as total_headcount
            FROM tblemployeeprofile
            WHERE
                (JOIN_DATE <= ?) AND
                (EXIT_DATE IS NULL OR EXIT_DATE > ?) AND
                EMPLOYMENT_STATUS = 1 AND
                GENDER = 'MALE' AND
                (USERNAME != 'guard')";

        $sql = $this->db_connection->prepare($query);
        $sql->execute([$current_date, $current_date]);
        $total_count = $sql->fetch(PDO::FETCH_ASSOC)['total_headcount'];

        return (int)$total_count;
    }

    return false;
}


public function get_total_employee_female($username = null, $permission_id = null) {
    // Check permissions if parameters are provided
    if ($username && $permission_id) {
        $has_permission = $this->check_role_permissions($username, $permission_id);
        if (!$has_permission) {
            return false;
        }
    }

    if ($this->databaseConnection()) {
        // Get the current date
        $current_date = date('Y-m-d');

        // Query for active employees as of today
        $query = "
            SELECT COUNT(*) as total_headcount
            FROM tblemployeeprofile
            WHERE
                (JOIN_DATE <= ?) AND
                (EXIT_DATE IS NULL OR EXIT_DATE > ?) AND
                EMPLOYMENT_STATUS = 1 AND
                GENDER = 'FEMALE' AND
                (USERNAME != 'guard')";

        $sql = $this->db_connection->prepare($query);
        $sql->execute([$current_date, $current_date]);
        $total_count = $sql->fetch(PDO::FETCH_ASSOC)['total_headcount'];

        return (int)$total_count;
    }

    return false;
}

public function get_total_employee_male_staff($username = null, $permission_id = null) {
    // Check permissions if parameters are provided
    if ($username && $permission_id) {
        $has_permission = $this->check_role_permissions($username, $permission_id);
        if (!$has_permission) {
            return false;
        }
    }

    if ($this->databaseConnection()) {
        // Get the current date
        $current_date = date('Y-m-d');

        // Query for active employees as of today
        $query = "
            SELECT COUNT(*) as total_headcount
            FROM tblemployeeprofile
            WHERE
                (JOIN_DATE <= ?) AND
                (EXIT_DATE IS NULL OR EXIT_DATE > ?) AND
                EMPLOYMENT_STATUS = 1 AND
                GENDER = 'MALE' AND POSITION = 'STAFF' AND
                (USERNAME != 'guard')";

        $sql = $this->db_connection->prepare($query);
        $sql->execute([$current_date, $current_date]);
        $total_count = $sql->fetch(PDO::FETCH_ASSOC)['total_headcount'];

        return (int)$total_count;
    }

    return false;
}

public function get_total_employee_female_staff($username = null, $permission_id = null) {
    // Check permissions if parameters are provided
    if ($username && $permission_id) {
        $has_permission = $this->check_role_permissions($username, $permission_id);
        if (!$has_permission) {
            return false;
        }
    }

    if ($this->databaseConnection()) {
        // Get the current date
        $current_date = date('Y-m-d');

        // Query for active employees as of today
        $query = "
            SELECT COUNT(*) as total_headcount
            FROM tblemployeeprofile
            WHERE
                (JOIN_DATE <= ?) AND
                (EXIT_DATE IS NULL OR EXIT_DATE > ?) AND
                EMPLOYMENT_STATUS = 1 AND
                GENDER = 'FEMALE' AND POSITION = 'STAFF' AND
                (USERNAME != 'guard')";

        $sql = $this->db_connection->prepare($query);
        $sql->execute([$current_date, $current_date]);
        $total_count = $sql->fetch(PDO::FETCH_ASSOC)['total_headcount'];

        return (int)$total_count;
    }

    return false;
}

public function get_department_headcount_with_names() {
    if ($this->databaseConnection()) {
        $query = "
            SELECT DEPARTMENT, COUNT(*) AS total_count
            FROM tblemployeeprofile
            WHERE EMPLOYMENT_STATUS = 1 AND DEPARTMENT != 'DEPT9'
            GROUP BY DEPARTMENT";

        $sql = $this->db_connection->prepare($query);
        $sql->execute();
        $raw_results = $sql->fetchAll(PDO::FETCH_ASSOC);

        $results = [];
        foreach ($raw_results as $row) {
            $code = $row['DEPARTMENT'];
            $name = $this->get_data_details_one_parameter('department', $code)[0]['DEPARTMENT'] ?? 'N/A';
            $results[] = [
                'code' => $code,
                'name' => $name,
                'total_count' => $row['total_count']
            ];
        }

        return $results;
    }

    return false;
}

 

public function get_total_employee_female_officer($username = null, $permission_id = null) {
    // Check permissions if parameters are provided
    if ($username && $permission_id) {
        $has_permission = $this->check_role_permissions($username, $permission_id);
        if (!$has_permission) {
            return false;
        }
    }

    if ($this->databaseConnection()) {
        // Get the current date
        $current_date = date('Y-m-d');

        // Query for active employees as of today
        $query = "
            SELECT COUNT(*) as total_headcount
            FROM tblemployeeprofile
            WHERE
                (JOIN_DATE <= ?) AND
                (EXIT_DATE IS NULL OR EXIT_DATE > ?) AND
                EMPLOYMENT_STATUS = 1 AND
                GENDER = 'FEMALE' AND POSITION = 'OFFICER' AND
                (USERNAME != 'guard')";

        $sql = $this->db_connection->prepare($query);
        $sql->execute([$current_date, $current_date]);
        $total_count = $sql->fetch(PDO::FETCH_ASSOC)['total_headcount'];

        return (int)$total_count;
    }

    return false;
}

public function get_total_employee_male_officer($username = null, $permission_id = null) {
    // Check permissions if parameters are provided
    if ($username && $permission_id) {
        $has_permission = $this->check_role_permissions($username, $permission_id);
        if (!$has_permission) {
            return false;
        }
    }

    if ($this->databaseConnection()) {
        // Get the current date
        $current_date = date('Y-m-d');

        // Query for active employees as of today
        $query = "
            SELECT COUNT(*) as total_headcount
            FROM tblemployeeprofile
            WHERE
                (JOIN_DATE <= ?) AND
                (EXIT_DATE IS NULL OR EXIT_DATE > ?) AND
                EMPLOYMENT_STATUS = 1 AND
                GENDER = 'MALE' AND POSITION = 'OFFICER' AND
                (USERNAME != 'guard')";

        $sql = $this->db_connection->prepare($query);
        $sql->execute([$current_date, $current_date]);
        $total_count = $sql->fetch(PDO::FETCH_ASSOC)['total_headcount'];

        return (int)$total_count;
    }

    return false;
}


public function get_position_gender_headcount() {
    if ($this->databaseConnection()) {
        $current_date = date('Y-m-d');

        $query = "
            SELECT POSITION, GENDER, COUNT(*) AS total
            FROM tblemployeeprofile
            WHERE
                (JOIN_DATE <= ?) AND
                (EXIT_DATE IS NULL OR EXIT_DATE > ?) AND
                EMPLOYMENT_STATUS = 1 AND
                USERNAME != 'guard'
            GROUP BY POSITION, GENDER";

        $sql = $this->db_connection->prepare($query);
        $sql->execute([$current_date, $current_date]);
        $result = $sql->fetchAll(PDO::FETCH_ASSOC);

        return $result;
    }

    return false;
}




public function get_total_employee_regular($username = null, $permission_id = null) {
    // Check permissions if parameters are provided
    if ($username && $permission_id) {
        $has_permission = $this->check_role_permissions($username, $permission_id);
        if (!$has_permission) {
            return false;
        }
    }

    if ($this->databaseConnection()) {
        // Get the current date
        $current_date = date('Y-m-d');

        // Query for active employees as of today
        $query = "
            SELECT COUNT(*) as total_headcount
            FROM tblemployeeprofile
            WHERE
                EXIT_DATE IS NULL AND
                PERMANENT_DATE IS NOT NULL AND
                EMPLOYMENT_STATUS = 1";

        $sql = $this->db_connection->prepare($query);
        $sql->execute([$current_date, $current_date]);
        $total_count = $sql->fetch(PDO::FETCH_ASSOC)['total_headcount'];

        return (int)$total_count;
    }

    return false;
}


public function get_total_employee_probitionary($username = null, $permission_id = null) {
    // Check permissions if parameters are provided
    if ($username && $permission_id) {
        $has_permission = $this->check_role_permissions($username, $permission_id);
        if (!$has_permission) {
            return false;
        }
    }

   if ($this->databaseConnection()) {
        // Query for active provisional employees
        $query = "
            SELECT COUNT(*) as total_headcount
            FROM tblemployeeprofile
            WHERE
                EMPLOYEMENT_TYPE = 'PROVISIONAL' AND EMPLOYMENT_STATUS = 1";

        $sql = $this->db_connection->prepare($query);
        $sql->execute(); // Missing execute() call
        $total_count = $sql->fetch(PDO::FETCH_ASSOC)['total_headcount'];

        return (int)$total_count;
    }

    return false;
}


public function get_new_employee_details() {
    if ($this->databaseConnection()) {
        // Use a Common Table Expression (CTE) to ensure all months are included
        $query = "
            WITH months AS (
                SELECT 1 AS month_num, 'Jan' AS month_name UNION
                SELECT 2, 'Feb' UNION
                SELECT 3, 'Mar' UNION
                SELECT 4, 'Apr' UNION
                SELECT 5, 'May' UNION
                SELECT 6, 'Jun' UNION
                SELECT 7, 'Jul' UNION
                SELECT 8, 'Aug' UNION
                SELECT 9, 'Sep' UNION
                SELECT 10, 'Oct' UNION
                SELECT 11, 'Nov' UNION
                SELECT 12, 'Dec'
            )
            SELECT
                m.month_name AS month,
                COUNT(e.EMPLOYEE_ID) AS headcount
            FROM
                months m
            LEFT JOIN
                tblemployeeprofile e ON
                    MONTH(e.JOIN_DATE) = m.month_num AND
                    YEAR(e.JOIN_DATE) = YEAR(CURRENT_DATE()) AND
                    e.EMPLOYEMENT_TYPE = 'PROVISIONAL'
            WHERE
                m.month_num <= MONTH(CURRENT_DATE())
            GROUP BY
                m.month_num, m.month_name
            ORDER BY
                m.month_num";

        $sql = $this->db_connection->prepare($query);

        if (!$sql->execute()) {
            return $sql->errorInfo()[2];
        }

        $result = $sql->fetchAll(PDO::FETCH_ASSOC);

        // Add validation to ensure we have data for all months
        if (empty($result)) {
            error_log("Warning: No new employee data found");
        }

        return $result;
    }

    return false;
}


public function get_employee_birthdays($month = null) {
    if ($this->databaseConnection()) {
        // If no month specified, use current month
        if ($month === null) {
            $month = date('n'); // Current month as number (1-12)
        }

        $query = "
            SELECT
                EMPLOYEE_ID,
                FIRST_NAME,
                LAST_NAME,
                BIRTHDAY,
                DAY(BIRTHDAY) AS birthday_day,
                PROFILE_IMAGE,
                DEPARTMENT,
                DESIGNATION
            FROM
                tblemployeeprofile
            WHERE
                MONTH(BIRTHDAY) = ?
                AND EMPLOYMENT_STATUS = 1
            ORDER BY
                DAY(BIRTHDAY) ASC";

        $sql = $this->db_connection->prepare($query);

        if (!$sql->execute([$month])) {
            error_log("Error fetching employee birthdays: " . json_encode($sql->errorInfo()));
            return false;
        }

        return $sql->fetchAll(PDO::FETCH_ASSOC);
    }

    return false;
}


    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_sales_partner_booking_all
    # Purpose    : Get all sales partner booking
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function get_sales_partner_booking_all(){
        // Connect to database and return if there is an error
        if (!$this->databaseConnection()) {
            return 'Server Error.';
        }

        $query = "
            SELECT *
            FROM
                sales_partner_booking";

        $sql = $this->db_connection->prepare($query);

        if(!$sql->execute()){
            return $sql->errorInfo()[2];
        }

        return $sql->fetchAll(PDO::FETCH_ASSOC);
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_position_monthly_quota_all
    # Purpose    : Get all position monthly quota
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function get_position_monthly_quota_all(){
        // Connect to database and return if there is an error
        if (!$this->databaseConnection()) {
            return 'Server Error.';
        }

        $query = "
            SELECT *
            FROM
                position_monthly_quota
            ORDER BY id";

        $sql = $this->db_connection->prepare($query);

        if(!$sql->execute()){
            return $sql->errorInfo()[2];
        }

        return $sql->fetchAll(PDO::FETCH_ASSOC);
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_position_monthly_quota_history_all
    # Purpose    : Get all position monthly quota history
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function get_position_monthly_quota_history_all(){
        // Connect to database and return if there is an error
        if (!$this->databaseConnection()) {
            return 'Server Error.';
        }

        $query = "
            SELECT *
            FROM
                position_monthly_quota_history
            ORDER BY id";

        $sql = $this->db_connection->prepare($query);

        if(!$sql->execute()){
            return $sql->errorInfo()[2];
        }

        return $sql->fetchAll(PDO::FETCH_ASSOC);
    }

    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_branch_monthly_quota_history_all
    # Purpose    : Get all branch monthly quota history
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function get_branch_monthly_quota_history_all(){
        // Connect to database and return if there is an error
        if (!$this->databaseConnection()) {
            return 'Server Error.';
        }

        $query = "
            SELECT *
            FROM
                branch_monthly_quota_history
            ORDER BY id";

        $sql = $this->db_connection->prepare($query);

        if(!$sql->execute()){
            return $sql->errorInfo()[2];
        }

        return $sql->fetchAll(PDO::FETCH_ASSOC);
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_sales_partner_booking_details
    # Purpose    : Get sales partner booking details
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function get_sales_partner_monthly_booking_details(){
        if ($this->databaseConnection()) {
            $query = "
                WITH
                    sales_partner AS (
                        SELECT
                            pmqh.full_name,
                            pmq.quota
                        FROM
                            position_monthly_quota pmq
                        INNER JOIN
                            position_monthly_quota_history pmqh ON pmqh.position_monthly_quota_id = pmq.id
                        WHERE
                            MONTH(pmqh.date) = MONTH(NOW())
                        AND
                            YEAR(pmqh.date) = YEAR(NOW())
                    )
                SELECT
                    sp.full_name,
                    COALESCE(SUM(spb.promissory_note_amount), 0) AS total_promissory_note_amount,
                    sp.quota,
                    ROUND(IFNULL((COALESCE(SUM(spb.promissory_note_amount), 0) / sp.quota) * 100, 0)) AS percentage_of_quota
                FROM
                    sales_partner sp
                LEFT JOIN
                    sales_partner_booking spb ON sp.full_name = spb.full_name
                    AND MONTH(spb.disbursement_date) = MONTH(NOW())
                    AND YEAR(spb.disbursement_date) = YEAR(NOW())
                GROUP BY
                    sp.full_name
                ORDER BY percentage_of_quota DESC";

            $sql = $this->db_connection->prepare($query);

            if(!$sql->execute()){
                return $sql->errorInfo()[2];
            }

            return $sql->fetchAll(PDO::FETCH_ASSOC);
        }
    }

    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_branch_booking_details
    # Purpose    : Get branch booking details
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function get_branch_monthly_booking_details(){
        if ($this->databaseConnection()) {
            $query = "
                WITH
                    branch AS (
                        SELECT
                            bmqh.branch,
                            bmqh.quota
                        FROM
                            branch_monthly_quota_history bmqh
                        WHERE
                            MONTH(bmqh.date) = MONTH(NOW())
                        AND
                            YEAR(bmqh.date) = YEAR(NOW())
                    )
                SELECT
                    b.branch,
                    COALESCE(SUM(spb.promissory_note_amount), 0) AS total_promissory_note_amount,
                    b.quota,
                    ROUND(IFNULL((COALESCE(SUM(spb.promissory_note_amount), 0) / b.quota) * 100, 0)) AS percentage_of_quota
                FROM
                    branch b
                LEFT JOIN
                    sales_partner_booking spb ON b.branch = spb.branch
                    AND MONTH(spb.disbursement_date) = MONTH(NOW())
                    AND YEAR(spb.disbursement_date) = YEAR(NOW())
                GROUP BY
                    b.branch
                ORDER BY
                    percentage_of_quota DESC";

            $sql = $this->db_connection->prepare($query);

            if(!$sql->execute()){
                return $sql->errorInfo()[2];
            }

            return $sql->fetchAll(PDO::FETCH_ASSOC);
        }
    }



    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_sales_partner_booking_details
    # Purpose    : Get sales partner booking details
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function get_sales_partner_to_date_booking_details(){
        if ($this->databaseConnection()) {
            $query = "
                WITH
                    sales_partner AS (
                        SELECT
                            pmqh.full_name,
                            SUM(pmq.quota) AS quota
                        FROM
                            position_monthly_quota pmq
                        INNER JOIN
                            position_monthly_quota_history pmqh ON pmqh.position_monthly_quota_id = pmq.id
                        WHERE
                            YEAR(pmqh.date) = YEAR(NOW())
                        GROUP BY
                            pmqh.full_name
                    )
                SELECT
                    sp.full_name,
                    COALESCE(SUM(spb.promissory_note_amount), 0) AS total_promissory_note_amount,
                    sp.quota,
                    ROUND(IFNULL((COALESCE(SUM(spb.promissory_note_amount), 0) / sp.quota) * 100, 0)) AS percentage_of_quota
                FROM
                    sales_partner sp
                LEFT JOIN
                    sales_partner_booking spb ON sp.full_name = spb.full_name
                    AND YEAR(spb.disbursement_date) = YEAR(NOW())
                GROUP BY
                    sp.full_name
                ORDER BY percentage_of_quota DESC";

            $sql = $this->db_connection->prepare($query);

            if(!$sql->execute()){
                return $sql->errorInfo()[2];
            }

            return $sql->fetchAll(PDO::FETCH_ASSOC);
        }
    }


    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_branch_booking_details
    # Purpose    : Get branch booking details
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function get_branch_to_date_booking_details(){
        if ($this->databaseConnection()) {
            $query = "
                WITH
                    branch AS (
                        SELECT
                            bmqh.branch,
                            SUM(bmqh.quota) AS quota
                        FROM
                            branch_monthly_quota_history bmqh
                        WHERE
                            YEAR(bmqh.date) = YEAR(NOW())
                        GROUP BY
                            bmqh.branch
                    )
                SELECT
                    b.branch,
                    COALESCE(SUM(spb.promissory_note_amount), 0) AS total_promissory_note_amount,
                    b.quota,
                    ROUND(IFNULL((COALESCE(SUM(spb.promissory_note_amount), 0) / b.quota) * 100, 0)) AS percentage_of_quota
                FROM
                    branch b
                LEFT JOIN
                    sales_partner_booking spb ON b.branch = spb.branch
                    AND YEAR(spb.disbursement_date) = YEAR(NOW())
                GROUP BY
                    b.branch
                ORDER BY
                    percentage_of_quota DESC";

            $sql = $this->db_connection->prepare($query);

            if(!$sql->execute()){
                return $sql->errorInfo()[2];
            }

            return $sql->fetchAll(PDO::FETCH_ASSOC);
        }
    }

    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_profile
    # Purpose    : Updates profile details
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_profile($first_name, $middle_name, $last_name, $suffix, $gender, $birthday, $email, $phone, $telephone, $address, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblemployeeprofile SET FIRST_NAME = :first_name, LAST_NAME = :last_name, MIDDLE_NAME = :middle_name, SUFFIX = :suffix, BIRTHDAY = :birthday, EMAIL = :email, PHONE = :phone, TELEPHONE = :telephone, GENDER = :gender, ADDRESS = :address, RECORD_LOG = :record_log WHERE EMPLOYEE_ID = :username OR USERNAME = :username');
            $sql->bindParam(':first_name', $first_name);
            $sql->bindParam(':last_name', $last_name);
            $sql->bindParam(':middle_name', $middle_name);
            $sql->bindParam(':suffix', $suffix);
            $sql->bindParam(':birthday', $birthday);
            $sql->bindParam(':email', $email);
            $sql->bindParam(':phone', $phone);
            $sql->bindParam(':telephone', $telephone);
            $sql->bindParam(':gender', $gender);
            $sql->bindParam(':address', $address);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':username', $username);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Profile', 'User ' . $username . ' updated profile (' . $username . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_application_settings_images
    # Purpose    : Updates application settings images
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_application_settings_images($file_tmp_name, $file_actual_ext, $type, $settings_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            if(!empty($file_tmp_name)){
                $application_settings_details = $this->get_data_details_one_parameter('application settings', $username);

                if($type == 'login background'){
                    $fileNew = 'login-bg.' . $file_actual_ext;
                    $image = $application_settings_details[0]['LOGIN_BG'] ?? null;
                    $query = 'LOGIN_BG = :file_path';
                    $log = 'User ' . $username . ' updated login backgroud.';
                }
                else if($type == 'logo light'){
                    $fileNew = 'logo-light.' . $file_actual_ext;
                    $image = $application_settings_details[0]['LOGO_LIGHT'] ?? null;
                    $query = 'LOGO_LIGHT = :file_path';
                    $log = 'User ' . $username . ' updated logo light.';
                }
                else if($type == 'logo dark'){
                    $fileNew = 'logo-dark.' . $file_actual_ext;
                    $image = $application_settings_details[0]['LOGO_DARK'] ?? null;
                    $query = 'LOGO_DARK = :file_path';
                    $log = 'User ' . $username . ' updated logo dark.';
                }
                else if($type == 'logo icon light'){
                    $fileNew = 'logo-icon-light.' . $file_actual_ext;
                    $image = $application_settings_details[0]['LOGO_ICON_LIGHT'] ?? null;
                    $query = 'LOGO_ICON_LIGHT = :file_path';
                    $log = 'User ' . $username . ' updated logo icon light.';
                }
                else if($type == 'logo icon dark'){
                    $fileNew = 'logo-icon-dark.' . $file_actual_ext;
                    $image = $application_settings_details[0]['LOGO_ICON_DARK'] ?? null;
                    $query = 'LOGO_ICON_DARK = :file_path';
                    $log = 'User ' . $username . ' updated logo icon dark.';
                }
                else{
                    $fileNew = 'favicon.' . $file_actual_ext;
                    $image = $application_settings_details[0]['FAVICON'] ?? null;
                    $query = 'FAVICON = :file_path';
                    $log = 'User ' . $username . ' updated favicon image.';
                }

                //$fileDestination = $_SERVER['DOCUMENT_ROOT'] . '/eis/assets/images/application-settings/' . $fileNew; orig for older version
                $fileDestination = 'assets/images/application-settings/' . $fileNew;
                $file_path ='./assets/images/application-settings/' . $fileNew;

                if(file_exists($image)){
                    if (unlink($image)) {
                        if(move_uploaded_file($file_tmp_name, $fileDestination)){
                            $sql = $this->db_connection->prepare('UPDATE tblapplicationsettings SET ' . $query . ', RECORD_LOG = :record_log WHERE SETTINGS_ID = :settings_id');
                            $sql->bindParam(':file_path', $file_path);
                            $sql->bindParam(':record_log', $record_log);
                            $sql->bindParam(':settings_id', $settings_id);

                            if($sql->execute()){
                                $insert_user_log = $this->insert_logs($username, 'Update Application Settings', $log);

                                if($insert_user_log == '1'){
                                    return '1';
                                }
                                else{
                                    return $insert_user_log;
                                }
                            }
                            else{
                                return $sql->errorInfo()[2];
                            }
                        }
                        else{
                            return 'There was an error uploading your image.';
                        }
                    }
                    else {
                        return $profile_image . ' cannot be deleted due to an error.';
                    }
                }
                else{
                    if(move_uploaded_file($file_tmp_name, $fileDestination)){
                        $sql = $this->db_connection->prepare('UPDATE tblapplicationsettings SET ' . $query . ', RECORD_LOG = :record_log WHERE SETTINGS_ID = :settings_id');
                        $sql->bindParam(':file_path', $file_path);
                        $sql->bindParam(':record_log', $record_log);
                        $sql->bindParam(':settings_id', $settings_id);

                        if($sql->execute()){
                            $insert_user_log = $this->insert_logs($username, 'Update Application Settings', $log);

                            if($insert_user_log == '1'){
                                return '1';
                            }
                            else{
                                return $insert_user_log;
                            }
                        }
                        else{
                            return $sql->errorInfo()[2];
                        }
                    }
                    else{
                        return 'There was an error uploading your image.';
                    }
                }
            }
            else{
                return '1';
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_application_settings
    # Purpose    : Updates application settings
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_application_settings($currency, $timezone, $dateformat, $timeformat, $settings_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblapplicationsettings SET CURRENCY = :currency, TIMEZONE = :timezone, DATE_FORMAT = :dateformat, TIME_FORMAT = :timeformat, RECORD_LOG = :record_log WHERE SETTINGS_ID = :settings_id');
            $sql->bindParam(':currency', $currency);
            $sql->bindParam(':timezone', $timezone);
            $sql->bindParam(':dateformat', $dateformat);
            $sql->bindParam(':timeformat', $timeformat);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':settings_id', $settings_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Application Settings', 'User ' . $username . ' updated application settings (' . $username . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_employee
    # Purpose    : Updates employee details
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_employee($id_number, $first_name, $middle_name, $last_name, $suffix, $birthday, $employment_type, $employment_status, $join_date, $permanent_date, $end_of_contract, $exit_date, $email, $phone, $telephone, $department, $branch, $designation, $position, $gender, $civil_status, $address, $payroll_period, $basic_pay, $daily_rate, $hourly_rate, $minute_rate, $sss, $tin, $philhealth, $pagibig, $driver_license, $account_name, $account_number, $employee_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblemployeeprofile SET ID_NUMBER = :id_number, FIRST_NAME = :first_name, LAST_NAME = :last_name, MIDDLE_NAME = :middle_name, SUFFIX = :suffix, BIRTHDAY = :birthday, EMPLOYEMENT_TYPE = :employment_type, EMPLOYMENT_STATUS = :employment_status, JOIN_DATE = :join_date, PERMANENT_DATE = :permanent_date, END_OF_CONTRACT = :end_of_contract, EXIT_DATE = :exit_date, EMAIL = :email, PHONE = :phone, TELEPHONE = :telephone, DEPARTMENT = :department, BRANCH = :branch, DESIGNATION = :designation, POSITION = :position, GENDER = :gender, CIVIL_STATUS = :civil_status, ADDRESS = :address, PAYROLL_PERIOD = :payroll_period, BASIC_PAY = :basic_pay, DAILY_RATE = :daily_rate, HOURLY_RATE = :hourly_rate, MINUTE_RATE = :minute_rate, SSS = :sss, TIN = :tin, PHILHEALTH = :philhealth, PAGIBIG = :pagibig, DRIVERS_LICENSE = :driver_license, ACCOUNT_NAME = :account_name, ACCOUNT_NUMBER = :account_number, RECORD_LOG = :record_log WHERE EMPLOYEE_ID = :employee_id');
            $sql->bindParam(':id_number', $id_number);
            $sql->bindParam(':first_name', $first_name);
            $sql->bindParam(':last_name', $last_name);
            $sql->bindParam(':middle_name', $middle_name);
            $sql->bindParam(':suffix', $suffix);
            $sql->bindParam(':birthday', $birthday);
            $sql->bindParam(':employment_type', $employment_type);
            $sql->bindParam(':employment_status', $employment_status);
            $sql->bindParam(':join_date', $join_date);
            $sql->bindParam(':permanent_date', $permanent_date);
             $sql->bindParam(':end_of_contract', $end_of_contract);
            $sql->bindParam(':exit_date', $exit_date);
            $sql->bindParam(':email', $email);
            $sql->bindParam(':phone', $phone);
            $sql->bindParam(':telephone', $telephone);
            $sql->bindParam(':department', $department);
            $sql->bindParam(':branch', $branch);
            $sql->bindParam(':designation', $designation);
            $sql->bindParam(':position', $position);
            $sql->bindParam(':gender', $gender);
            $sql->bindParam(':civil_status', $civil_status);
            $sql->bindParam(':address', $address);
            $sql->bindParam(':payroll_period', $payroll_period);
            $sql->bindParam(':basic_pay', $basic_pay);
            $sql->bindParam(':daily_rate', $daily_rate);
            $sql->bindParam(':hourly_rate', $hourly_rate);
            $sql->bindParam(':minute_rate', $minute_rate);
            $sql->bindParam(':sss', $sss);
            $sql->bindParam(':tin', $tin);
            $sql->bindParam(':philhealth', $philhealth);
            $sql->bindParam(':pagibig', $pagibig);
            $sql->bindParam(':driver_license', $driver_license);
            $sql->bindParam(':account_name', $account_name);
            $sql->bindParam(':account_number', $account_number);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':employee_id', $employee_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Employee', 'User ' . $username . ' updated employee (' . $employee_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }

    // Get comprehensive PMW monitoring data

//     public function get_pmw_monitoring_data($period_type = '', $status = '', $department = '') {
//     if ($this->databaseConnection()) {
//         $where_clause = "WHERE ep.EMPLOYEE_ID NOT LIKE 'USER-%'";

//         if (!empty($period_type)) {
//             $where_clause .= " AND pp.PERIOD_TYPE = :period_type";
//         }

//         if (!empty($status)) {
//             $where_clause .= " AND COALESCE(ps.STATUS, 'PENDING') = :status";
//         }

//         if (!empty($department)) {
//             $where_clause .= " AND ep.DEPARTMENT = :department";
//         }

//         $sql = $this->db_connection->prepare("
//             SELECT
//                 ep.EMPLOYEE_ID,
//                 ep.FIRST_NAME,
//                 ep.LAST_NAME,
//                 ep.MIDDLE_NAME,
//                 ep.SUFFIX,
//                 ep.EMPLOYEMENT_TYPE,
//                 ep.DEPARTMENT,
//                 ep.DESIGNATION,
//                 ep.JOIN_DATE,
//                 pp.PERIOD_ID,
//                 pp.PERIOD_NAME,
//                 pp.PERIOD_TYPE,
//                 pp.DUE_DATE,
//                 COALESCE(ps.STATUS, 'PENDING') as SUBMISSION_STATUS,
//                 ps.SUBMISSION_DATE,
//                 ps.NOTES,
//                 CASE
//                     WHEN pp.DUE_DATE < CURDATE() AND COALESCE(ps.STATUS, 'PENDING') = 'PENDING'
//                     THEN 'OVERDUE'
//                     ELSE COALESCE(ps.STATUS, 'PENDING')
//                 END as CURRENT_STATUS
//             FROM tblemployeeprofile ep
//             CROSS JOIN tblpmwperiods pp
//             LEFT JOIN tblpmwsubmissions ps ON ep.EMPLOYEE_ID = ps.EMPLOYEE_ID AND pp.PERIOD_ID = ps.PERIOD_ID
//             $where_clause
//             AND ((ep.EMPLOYEMENT_TYPE = 'PROBATIONARY' AND pp.PERIOD_TYPE = 'MONTHLY')
//                  OR (ep.EMPLOYEMENT_TYPE = 'REGULAR' AND pp.PERIOD_TYPE = 'QUARTERLY'))
//             AND pp.STATUS = 'ACTIVE'
//             ORDER BY pp.DUE_DATE DESC, ep.LAST_NAME ASC
//         ");

//         if (!empty($period_type)) {
//             $sql->bindParam(':period_type', $period_type);
//         }
//         if (!empty($status)) {
//             $sql->bindParam(':status', $status);
//         }
//         if (!empty($department)) {
//             $sql->bindParam(':department', $department);
//         }

//         if ($sql->execute()) {
//             return $sql->fetchAll();
//         } else {
//             return $sql->errorInfo()[2];
//         }
//     }
// }

// In your api.php file

/**
 * Gets all employees and their PMW submission status for a given period.
 */

// API function to get employee data, ensuring only active employees are returned
public function get_employee_data($username) {
    $sql = $this->db_connection->prepare('
        SELECT * FROM tblemployeeprofile
        WHERE USERNAME = :username AND EMPLOYMENT_STATUS = 1
    ');
    $sql->bindParam(':username', $username, PDO::PARAM_STR);
    $sql->execute();
    return $sql->fetch(PDO::FETCH_ASSOC);  // Returns employee data only if the status is active (1)
}


public function get_alert_status($username) {
    $sql = $this->db_connection->prepare('SELECT alert_status FROM tbl_pmw_alert WHERE username = :username');
    $sql->bindParam(':username', $username, PDO::PARAM_STR);
    $sql->execute();
    return $sql->fetchColumn();  // 'yes' or 'no'
}
public function get_all_employees() {
    // Fetch all active employees (with EMPLOYMENT_STATUS = 1)
    $sql = $this->db_connection->prepare('
        SELECT * FROM tblemployeeprofile WHERE EMPLOYMENT_STATUS = 1
    ');
    $sql->execute();
    return $sql->fetchAll(PDO::FETCH_ASSOC);  // Return all active employees
}

public function get_submission_status($employee_id, $current_period) {
    // Fetch submission status for the employee and given period
    $sql = $this->db_connection->prepare('SELECT submission_status FROM tbl_pmw WHERE employee_id = :employee_id AND period = :current_period');
    $sql->bindParam(':employee_id', $employee_id, PDO::PARAM_INT);
    $sql->bindParam(':current_period', $current_period, PDO::PARAM_STR);
    $sql->execute();
    return $sql->fetchColumn();  // 'submitted' or 'pending'
}




// // Update PMW submission status with comprehensive logging
// In api.php, inside the Api class

/**
 * Inserts or updates a PMW submission record.
 * This is an "upsert" operation.
 *
 * @return string 'Updated', 'Inserted', or an error message.
 */
public function update_pmw_submission($employee_id, $year, $period, $status, $notes, $username) {
    try {
        if (!$this->databaseConnection()) {
            return "Database connection failed.";
        }

        $record_log = 'UPD->' . $username . '->' . date('Y-m-d H:i:s');

        // Step 1: Check if a record already exists for this employee, year, and period.
        $check_sql = $this->db_connection->prepare("
            SELECT SUBMISSION_ID FROM tblpmwsubmissions
            WHERE EMPLOYEE_ID = :employee_id AND PMW_YEAR = :year AND PMW_PERIOD = :period
        ");
        $check_sql->execute([
            ':employee_id' => $employee_id,
            ':year' => $year,
            ':period' => $period
        ]);

        $submission_date = ($status === 'SUBMITTED') ? date('Y-m-d H:i:s') : null;

        // Step 2: If a record exists, UPDATE it.
        if ($check_sql->fetch()) {
            $update_sql = $this->db_connection->prepare("
                UPDATE tblpmwsubmissions
                SET STATUS = :status, NOTES = :notes, SUBMISSION_DATE = :submission_date, SUBMITTED_BY = :username, RECORD_LOG = CONCAT(IFNULL(RECORD_LOG, ''), :record_log)
                WHERE EMPLOYEE_ID = :employee_id AND PMW_YEAR = :year AND PMW_PERIOD = :period
            ");
            $update_sql->execute([
                ':status' => $status,
                ':notes' => $notes,
                ':submission_date' => $submission_date,
                ':username' => $username,
                ':record_log' => "\n" . $record_log,
                ':employee_id' => $employee_id,
                ':year' => $year,
                ':period' => $period
            ]);
            return 'Updated';
        }
        // Step 3: If no record exists, INSERT a new one.
        else {
            // We need the period details (type, dates) to insert a new record.
            // We get this from the employee's profile.
            $emp_sql = $this->db_connection->prepare("SELECT EMPLOYEMENT_TYPE, JOIN_DATE FROM tblemployeeprofile WHERE EMPLOYEE_ID = :employee_id");
            $emp_sql->execute([':employee_id' => $employee_id]);
            $employee = $emp_sql->fetch(PDO::FETCH_ASSOC);

            if (!$employee) {
                return "Error: Employee profile not found.";
            }

            $applicable_periods = $this->calculate_pmw_periods($employee['JOIN_DATE'], $employee['EMPLOYEMENT_TYPE'], $year);
            $period_data = null;
            foreach ($applicable_periods as $p) {
                if ($p['PERIOD'] === $period) {
                    $period_data = $p;
                    break;
                }
            }

            if (!$period_data) {
                return "Error: The specified period is not valid for this employee.";
            }

            $insert_sql = $this->db_connection->prepare("
                INSERT INTO tblpmwsubmissions (EMPLOYEE_ID, PMW_YEAR, PMW_PERIOD, PERIOD_TYPE, DUE_DATE, STATUS, NOTES, SUBMISSION_DATE, SUBMITTED_BY, RECORD_LOG)
                VALUES (:employee_id, :year, :period, :period_type, :due_date, :status, :notes, :submission_date, :username, :record_log)
            ");
            $insert_sql->execute([
                ':employee_id' => $employee_id,
                ':year' => $year,
                ':period' => $period,
                ':period_type' => ($employee['EMPLOYEMENT_TYPE'] === 'PROVISIONAL' ? 'MONTHLY' : 'QUARTERLY'),
                ':due_date' => $period_data['DUE_DATE'],
                ':status' => $status,
                ':notes' => $notes,
                ':submission_date' => $submission_date,
                ':username' => $username,
                ':record_log' => $record_log
            ]);
            return 'Inserted';
        }
    } catch (PDOException $e) {
        // Catch and return any database errors.
        error_log("PMW Submission Error: " . $e->getMessage());
        return "Database Error: " . $e->getMessage();
    }
}

public function transition_to_regular($employee_id) {
    if ($this->databaseConnection()) {
        // Update employment type to 'Regular' and adjust PMW submission
        $sql = $this->db_connection->prepare('UPDATE tblemployeeprofile SET EMPLOYMENT_TYPE = "REGULAR" WHERE EMPLOYEE_ID = :employee_id');
        $sql->bindParam(':employee_id', $employee_id);
        if ($sql->execute()) {
            // Now update PMW status from monthly to quarterly
            $this->update_pmw_submission($employee_id, 'Q1', 0, null);  // Example for transitioning to Q1
            return '1'; // Success
        } else {
            return $sql->errorInfo()[2];
        }
    }
}


    // In classes/api.php

   /**
 * HELPER FUNCTION: Calculates all expected PMW periods for a given year based on employment type.
 * This makes the main function cleaner and easier to read.
 * @param string $join_date_str
 * @param string $employment_type
 * @param int $year
 * @return array
 */
private function calculate_pmw_periods($join_date_str, $employment_type, $year) {
    $quarterly_employment_types = ['REGULAR', 'PERMANENT'];
    $periods = [];
    $join_date = new DateTime($join_date_str);
    $join_year = (int)$join_date->format('Y');

    if (in_array(strtoupper($employment_type), $quarterly_employment_types)) {
        // --- QUARTERLY: Due date is 7th of the month AFTER the quarter ends ---
        $join_quarter = ceil((int)$join_date->format('n') / 3);
        $start_quarter = ($join_year == $year) ? $join_quarter : 1;
        for ($q = $start_quarter; $q <= 4; $q++) {
            $quarter_end_month = $q * 3;
            $due_date = date('Y-m-d', strtotime("{$year}-{$quarter_end_month}-01 +1 month +6 days"));
            $periods['Q' . $q] = [
                'PERIOD' => 'Q' . $q,
                'YEAR' => $year,
                'DUE_DATE' => $due_date,
                'QUARTER_NUMBER' => $q,
                'DISPLAY_NAME' => 'Quarter ' . $q . ' ' . $year,
                'TYPE' => 'QUARTERLY'
            ];
        }
    } else {
        // --- MONTHLY: Due date is now 7th of the FOLLOWING month ---
        $join_month = (int)$join_date->format('n');
        $start_month = ($join_year == $year) ? $join_month : 1;
        $month_names = [1=>'January', 2=>'February', 3=>'March', 4=>'April', 5=>'May', 6=>'June', 7=>'July', 8=>'August', 9=>'September', 10=>'October', 11=>'November', 12=>'December'];
        for ($m = $start_month; $m <= 12; $m++) {
            // ==================================================================
            //  START OF CORRECTED LOGIC (MONTHLY DUE DATE)
            // ==================================================================
            $due_date = date('Y-m-d', strtotime("{$year}-{$m}-01 +1 month +6 days"));
            // ==================================================================
            //  END OF CORRECTED LOGIC
            // ==================================================================
            $period_id = str_pad($m, 2, '0', STR_PAD_LEFT);
            $periods[$period_id] = [
                'PERIOD' => $period_id,
                'YEAR' => $year,
                'DUE_DATE' => $due_date,
                'QUARTER_NUMBER' => ceil($m / 3),
                'DISPLAY_NAME' => $month_names[$m] . ' ' . $year,
                'TYPE' => 'MONTHLY'
            ];
        }
    }
    return $periods;
}

/**
 * REVISED: Gets monitoring data with the new visibility rules.
 */
public function get_pmw_monitoring_data($employment_type_filter = '', $status_filter = '', $department_filter = '') {
    try {
        if (!$this->databaseConnection()) {
            return "Database connection failed.";
        }
        $current_year = date('Y');
        $current_date = date('Y-m-d');

        // ... (Your lookup tables and employee query are correct and remain the same) ...
        $departments_lookup = $this->db_connection->query("SELECT DEPARTMENT_ID, DEPARTMENT FROM tbldepartment")->fetchAll(PDO::FETCH_KEY_PAIR);
        $designations_lookup = $this->db_connection->query("SELECT DESIGNATION_ID, DESIGNATION FROM tbldesignation")->fetchAll(PDO::FETCH_KEY_PAIR);
        $sql = $this->db_connection->prepare("
            SELECT p.EMPLOYEE_ID, p.FIRST_NAME, p.LAST_NAME, p.MIDDLE_NAME, p.SUFFIX,
                   p.EMPLOYEMENT_TYPE, p.JOIN_DATE, p.DEPARTMENT, p.DESIGNATION
            FROM tblemployeeprofile p
            WHERE p.EMPLOYMENT_STATUS = 1
            AND p.EMPLOYEE_ID NOT IN ('USER-GUARD', '16', '50') -- <<< MODIFIED: ADDED THIS LINE TO EXCLUDE SPECIFIC EMPLOYEES
            ORDER BY p.LAST_NAME, p.FIRST_NAME ");
        $sql->execute();
        $employees = $sql->fetchAll(PDO::FETCH_ASSOC);

        // ... (Your logic for fetching historical submissions is correct and remains the same) ...
        $result_map = [];
        $employee_ids = array_column($employees, 'EMPLOYEE_ID');
        $historical_submissions = [];
        if (!empty($employee_ids)) {
            $in_clause = implode(',', array_fill(0, count($employee_ids), '?'));
            $sub_sql = $this->db_connection->prepare("
                SELECT EMPLOYEE_ID, PMW_YEAR, PMW_PERIOD, STATUS, SUBMISSION_DATE, EMPLOYMENT_TYPE_AT_SUBMISSION, NOTES
                FROM tblpmwsubmissions
                WHERE EMPLOYEE_ID IN ($in_clause) AND PMW_YEAR = ?
            ");
            $sub_sql->execute(array_merge($employee_ids, [$current_year]));
            while ($submission = $sub_sql->fetch(PDO::FETCH_ASSOC)) {
                 $historical_submissions[$submission['EMPLOYEE_ID']][$submission['PMW_PERIOD']] = $submission;
            }
        }

        // ... (Your logic for merging history with future periods is correct and remains the same) ...
        foreach ($employees as $employee) {
            $future_periods = $this->calculate_pmw_periods($employee['JOIN_DATE'], $employee['EMPLOYEMENT_TYPE'], $current_year);
            $history_periods = $historical_submissions[$employee['EMPLOYEE_ID']] ?? [];
            $all_period_keys = array_unique(array_merge(array_keys($history_periods), array_keys($future_periods)));
            foreach ($all_period_keys as $period_key) {
                $submission = $history_periods[$period_key] ?? null;
                $effective_employment_type = $submission['EMPLOYMENT_TYPE_AT_SUBMISSION'] ?? $employee['EMPLOYEMENT_TYPE'];
                $period_details_list = $this->calculate_pmw_periods($employee['JOIN_DATE'], $effective_employment_type, $current_year);
                $period = $period_details_list[$period_key] ?? null;
                if (!$period) continue;
                $map_key = $employee['EMPLOYEE_ID'] . '-' . $period['YEAR'] . '-' . $period['PERIOD'];
                $result_map[$map_key] = [
                    'employee' => $employee, 'period' => $period, 'submission' => $submission, 'effective_employment_type' => $effective_employment_type
                ];
            }
        }

        // Final response generation
        $final_result = [];
        foreach($result_map as $entry){
            $period = $entry['period'];
            $submission = $entry['submission'];
            $employee = $entry['employee'];

            // **** ALL TIME-BASED VISIBILITY LOGIC HAS BEEN REMOVED FROM PHP ****
            // The JavaScript will now handle all filtering.

            $current_status = $submission['STATUS'] ?? 'PENDING';
            if ($current_status === 'PENDING' && $period['DUE_DATE'] < $current_date) {
                $current_status = 'OVERDUE';
            }
            $status_badge = '<span class="badge bg-warning">Pending</span>';
            if ($current_status === 'SUBMITTED') $status_badge = '<span class="badge bg-success">Submitted</span>';
            if ($current_status === 'OVERDUE') $status_badge = '<span class="badge bg-danger">Overdue</span>';

            $notes = $submission['NOTES'] ?? '';
            $full_name = trim($employee['LAST_NAME'] . ', ' . $employee['FIRST_NAME']);
            $action_button = '<button class="btn btn-sm btn-info update-pmw-status" data-employeeid="'. $employee['EMPLOYEE_ID'] .'" data-year="'. $period['YEAR'] .'" data-period="'. $period['PERIOD'] .'" data-currentstatus="'. $current_status .'" data-fullname="'. htmlspecialchars($full_name, ENT_QUOTES) .'" data-notes="'. htmlspecialchars($notes, ENT_QUOTES) .'">Update</button>';

            $final_result[] = [
                "FULL_NAME"       => $full_name,
                "DEPARTMENT"      => $departments_lookup[$employee['DEPARTMENT']] ?? $employee['DEPARTMENT'],
                "DESIGNATION"     => $designations_lookup[$employee['DESIGNATION']] ?? $employee['DESIGNATION'],
                "EMPLOYMENT_TYPE" => $entry['effective_employment_type'],
                "JOIN_DATE"       => date('M d, Y', strtotime($employee['JOIN_DATE'])),
                "PMW_PERIOD"      => $period['DISPLAY_NAME'],
                "DUE_DATE"        => date('M d, Y', strtotime($period['DUE_DATE'])),
                "STATUS"          => $status_badge,
                "SUBMISSION_DATE" => $submission ? ($submission['SUBMISSION_DATE'] ? date('M d, Y H:i', strtotime($submission['SUBMISSION_DATE'])) : 'N/A') : 'N/A',
                "ACTION"          => $action_button,
                "QUARTER_NUMBER"  => $period['QUARTER_NUMBER'],
                "RAW_STATUS"      => $current_status,
                // <<< NEWLY ADDED for precise monthly filtering in JS >>>
                "MONTH_NUMBER"    => ($period['TYPE'] === 'MONTHLY') ? (int)$period['PERIOD'] : 0,
            ];
        }
        return $final_result;
    } catch (PDOException $e) {
        return "SQL Error: " . $e->getMessage();
    }
}

    /**
     * REVISED: Updates PMW status and automatically records the employment type at that time.
     */
    public function update_pmw_status($employee_id, $year, $period, $new_status) {
        try {
            if (!$this->databaseConnection()) {
                return ["success" => false, "message" => "Database connection failed."];
            }

            // Fetch the employee's CURRENT employment type to save with the submission
            $emp_sql = $this->db_connection->prepare("SELECT EMPLOYEMENT_TYPE FROM tblemployeeprofile WHERE EMPLOYEE_ID = ?");
            $emp_sql->execute([$employee_id]);
            $employee = $emp_sql->fetch(PDO::FETCH_ASSOC);
            if (!$employee) {
                return ["success" => false, "message" => "Employee not found."];
            }
            $current_employment_type = $employee['EMPLOYEMENT_TYPE'];

            $submission_date = ($new_status === 'SUBMITTED') ? date('Y-m-d H:i:s') : null;

            $check_sql = $this->db_connection->prepare("SELECT 1 FROM tblpmwsubmissions WHERE EMPLOYEE_ID = ? AND PMW_YEAR = ? AND PMW_PERIOD = ?");
            $check_sql->execute([$employee_id, $year, $period]);

            if ($check_sql->fetch()) {
                // Record exists, UPDATE it. Always update the employment type in case it changed since the last submission.
                $sql = $this->db_connection->prepare(
                    "UPDATE tblpmwsubmissions SET STATUS = ?, SUBMISSION_DATE = ?, EMPLOYMENT_TYPE_AT_SUBMISSION = ?
                     WHERE EMPLOYEE_ID = ? AND PMW_YEAR = ? AND PMW_PERIOD = ?"
                );
                $result = $sql->execute([$new_status, $submission_date, $current_employment_type, $employee_id, $year, $period]);
            } else {
                // No record, INSERT a new one.
                $sql = $this->db_connection->prepare(
                    "INSERT INTO tblpmwsubmissions (EMPLOYEE_ID, PMW_YEAR, PMW_PERIOD, STATUS, SUBMISSION_DATE, EMPLOYMENT_TYPE_AT_SUBMISSION)
                     VALUES (?, ?, ?, ?, ?, ?)"
                );
                $result = $sql->execute([$employee_id, $year, $period, $new_status, $submission_date, $current_employment_type]);
            }

            if ($result) {
                return ["success" => true, "message" => "PMW status updated successfully."];
            }
            return ["success" => false, "message" => "Failed to update PMW status."];
        } catch (PDOException $e) {
            return ["success" => false, "message" => "SQL Error: " . $e->getMessage()];
        }
    }

    public function get_pmw_summary_counts() {
        // This should use the same logic as get_pmw_monitoring_data to get accurate counts.
        $data = $this->get_pmw_monitoring_data();
        $counts = ['submitted' => 0, 'pending' => 0, 'overdue' => 0, 'total' => 0];
        if(is_array($data)){
            foreach($data as $row){
                if(strpos($row['STATUS'], 'Submitted')) $counts['submitted']++;
                else if(strpos($row['STATUS'], 'Pending')) $counts['pending']++;
                else if(strpos($row['STATUS'], 'Overdue')) $counts['overdue']++;
            }
            $counts['total'] = count($data);
        }
        return $counts;
    }

    # -------------------------------------------------------------
    #
    # Name       : update_employee_user_account
    # Purpose    : Updates employee user account
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_employee_user_account($password_encrypt, $password_expiry_date, $employee_id, $employee_username, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tbluseraccount SET PASSWORD = :password_encrypt, PASSWORD_EXPIRY_DATE = :password_expiry_date, RECORD_LOG = :record_log WHERE EMPLOYEE_ID = :employee_id OR USERNAME = :employee_username');
            $sql->bindParam(':password_encrypt', $password_encrypt);
            $sql->bindParam(':password_expiry_date', $password_expiry_date);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':employee_username', $employee_username);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update User Account', 'User ' . $username . ' updated user account (' . $employee_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_department
    # Purpose    : Update department
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_department($department, $department_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tbldepartment SET DEPARTMENT = :department, RECORD_LOG = :record_log WHERE DEPARTMENT_ID = :department_id');
            $sql->bindParam(':department', $department);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':department_id', $department_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Department', 'User ' . $username . ' updated department (' . $department_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_designation
    # Purpose    : Update designation
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_designation($designation, $designation_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tbldesignation SET DESIGNATION = :designation, RECORD_LOG = :record_log WHERE DESIGNATION_ID = :designation_id');
            $sql->bindParam(':designation', $designation);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':designation_id', $designation_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Designation', 'User ' . $username . ' updated designation (' . $designation_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_branch
    # Purpose    : Update branch
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_branch($branch, $email, $phone, $telephone, $address, $branch_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblbranch SET BRANCH = :branch, EMAIL = :email, PHONE = :phone, TELEPHONE = :telephone, ADDRESS = :address, RECORD_LOG = :record_log WHERE BRANCH_ID = :branch_id');
            $sql->bindParam(':branch', $branch);
            $sql->bindParam(':email', $email);
            $sql->bindParam(':phone', $phone);
            $sql->bindParam(':telephone', $telephone);
            $sql->bindParam(':address', $address);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':branch_id', $branch_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Branch', 'User ' . $username . ' updated branch (' . $branch_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_holiday
    # Purpose    : Update holiday
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_holiday($holiday, $holiday_date, $holiday_type, $holiday_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblholiday SET HOLIDAY = :holiday, HOLIDAY_DATE = :holiday_date, HOLIDAY_TYPE = :holiday_type, RECORD_LOG = :record_log WHERE HOLIDAY_ID = :holiday_id');
            $sql->bindParam(':holiday', $holiday);
            $sql->bindParam(':holiday_date', $holiday_date);
            $sql->bindParam(':holiday_type', $holiday_type);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':holiday_id', $holiday_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Holiday', 'User ' . $username . ' updated holiday (' . $holiday_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }

      #rcmercado / overtime
    public function insert_overtime($employee_id, $overtimetitle, $holiday_type, $overtime_date,  $start_time, $end_time, $reason,  $employee_profile_details){
    if ($this->databaseConnection()) {
        $error = '';
        $systemdate = date('Y-m-d');
        $current_time = date('H:i:s');

        # Get system parameter id
        $system_parameter = $this->get_system_parameter('49', 1);
        $paramnum = $system_parameter[0]['PARAMNUM'];
        $username = $system_parameter[0]['ID'];

        # Check if USERNAME exists in employee_profile_details
        if (!isset($employee_profile_details[0]['USERNAME'])) {
            return "Error: USERNAME is not set in employee profile details.";
        }

        # Prepare SQL statement
        $sql = $this->db_connection->prepare("INSERT INTO tblovertime (EMPLOYEE_ID, TITLE, HOLIDAY_TYPE, OVERTIME_DATE, START_TIME, END_TIME, REASON)
            VALUES (:employee_id, :overtimetitle, :holidaytype, :overtimedate, :starttime, :endtime, :reason)");

        # Bind parameters
        $sql->bindParam(':employee_id', $employee_id);
        $sql->bindParam(':overtimetitle', $overtimetitle);
        $sql->bindParam(':holidaytype', $holiday_type);
        $sql->bindParam(':overtimedate', $overtime_date);
        $sql->bindParam(':starttime', $start_time);
        $sql->bindParam(':endtime', $end_time);
        $sql->bindParam(':reason', $reason);

        # Execute query
        if ($sql->execute()) {
            # Update system parameter value
            $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '49', $username);

            if ($update_system_parameter_value) {
                $insert_user_log = $this->insert_logs($username, 'Insert Overtime', 'User ' . $username . ' inserted overtime .');

                return $insert_user_log == '1' ? '1' : $insert_user_log;
            } else {
                return $update_system_parameter_value;
            }
        } else {
            return $sql->errorInfo()[2];
        }
    }
}






    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_leave_type
    # Purpose    : Update leave type
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_leave_type($leave, $no_leaves, $paid_status, $leave_type_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblleavetype SET LEAVE_NAME = :leave, NO_LEAVES = :no_leaves, PAID_STATUS = :paid_status, RECORD_LOG = :record_log WHERE LEAVE_TYPE_ID = :leave_type_id');
            $sql->bindParam(':leave', $leave);
            $sql->bindParam(':no_leaves', $no_leaves);
            $sql->bindParam(':paid_status', $paid_status);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':leave_type_id', $leave_type_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Leave Type', 'User ' . $username . ' updated leave type (' . $leave_type_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_leave_entitlement
    # Purpose    : Update leave entitlement
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_leave_entitlement($no_leaves, $entitlement_id, $employee_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblleaveentitlement SET NO_LEAVES = :no_leaves, RECORD_LOG = :record_log WHERE LEAVE_ENTITLEMENT_ID = :entitlement_id AND EMPLOYEE_ID = :employee_id');
            $sql->bindParam(':no_leaves', $no_leaves);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':entitlement_id', $entitlement_id);
            $sql->bindParam(':employee_id', $employee_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Leave Entitlement', 'User ' . $username . ' updated leave entitlement (' . $entitlement_id . ') of employee ('. $employee_id .').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_leave_entitlement_count
    # Purpose    : Update leave entitlement count
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_leave_entitlement_count($employee_id, $leave_type, $leave_date, $total_hours, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $leave_entitlement_id = $this->get_leave_entitlment_id($employee_id, $leave_type, $leave_date);

            $sql = $this->db_connection->prepare('UPDATE tblleaveentitlement SET ACQUIRED_NO_LEAVES = (ACQUIRED_NO_LEAVES + :total_hours), RECORD_LOG = :record_log WHERE LEAVE_ENTITLEMENT_ID = :leave_entitlement_id');
            $sql->bindParam(':total_hours', $total_hours);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':leave_entitlement_id', $leave_entitlement_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Leave Entitlement Count', 'User ' . $username . ' updated leave entitlement count (' . $leave_type . ') of employee ('. $employee_id .').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_employee_leave
    # Purpose    : Update employee leave
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_employee_leave($leave_type, $leave_date, $start_time, $end_time, $reason, $leave_status, $decision_date, $rejection_reason, $decision_time, $leave_id, $employee_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            if(!empty($decision_date) && $leave_status != 2){
                $sql = $this->db_connection->prepare('UPDATE tblleave SET LEAVE_TYPE = :leave_type, LEAVE_DATE = :leave_date, START_TIME = :start_time, END_TIME = :end_time, REASON = :reason, STATUS = :leave_status, DECISION_DATE = :decision_date, REJECTION_REASON = :rejection_reason, DECISION_BY = :username, RECORD_LOG = :record_log WHERE LEAVE_ID = :leave_id AND EMPLOYEE_ID = :employee_id');
                $sql->bindParam(':leave_type', $leave_type);
                $sql->bindParam(':leave_date', $leave_date);
                $sql->bindParam(':start_time', $start_time);
                $sql->bindParam(':end_time', $end_time);
                $sql->bindParam(':reason', $reason);
                $sql->bindParam(':leave_status', $leave_status);
                $sql->bindParam(':decision_date', $decision_date);
                $sql->bindParam(':rejection_reason', $rejection_reason);
                $sql->bindParam(':username', $username);
                $sql->bindParam(':record_log', $record_log);
                $sql->bindParam(':leave_id', $leave_id);
                $sql->bindParam(':employee_id', $employee_id);
            }
            else{
                $sql = $this->db_connection->prepare('UPDATE tblleave SET LEAVE_TYPE = :leave_type, LEAVE_DATE = :leave_date, START_TIME = :start_time, END_TIME = :end_time, REASON = :reason, STATUS = :leave_status, RECORD_LOG = :record_log WHERE LEAVE_ID = :leave_id AND EMPLOYEE_ID = :employee_id');
                $sql->bindParam(':leave_type', $leave_type);
                $sql->bindParam(':leave_date', $leave_date);
                $sql->bindParam(':start_time', $start_time);
                $sql->bindParam(':end_time', $end_time);
                $sql->bindParam(':reason', $reason);
                $sql->bindParam(':leave_status', $leave_status);
                $sql->bindParam(':record_log', $record_log);
                $sql->bindParam(':leave_id', $leave_id);
                $sql->bindParam(':employee_id', $employee_id);
            }

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Employee Leave', 'User ' . $username . ' updated employee leave (' . $leave_id . ') of employee ('. $employee_id .').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_leave_to_approve
    # Purpose    : Update leave to approve
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_leave_to_approve($leave_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'APV->' . $username . '->' . date('Y-m-d h:i:s');
            $systemdate = date('Y-m-d');

            $sql = $this->db_connection->prepare("UPDATE tblleave SET STATUS = '1', DECISION_DATE = :systemdate, DECISION_BY = :username, RECORD_LOG = :record_log WHERE LEAVE_ID = :leave_id");
            $sql->bindParam(':systemdate', $systemdate);
            $sql->bindParam(':username', $username);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':leave_id', $leave_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Approve Leave', 'User ' . $username . ' approved leave (' . $leave_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_leave_to_reject
    # Purpose    : Update leave to reject
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_leave_to_reject($leave_id, $rejection_reason, $username){
        if ($this->databaseConnection()) {
            $record_log = 'REJ->' . $username . '->' . date('Y-m-d h:i:s');
            $systemdate = date('Y-m-d');

            $sql = $this->db_connection->prepare("UPDATE tblleave SET STATUS = '0', REJECTION_REASON = :rejection_reason, DECISION_DATE = :systemdate, DECISION_BY = :username, RECORD_LOG = :record_log WHERE LEAVE_ID = :leave_id");
            $sql->bindParam(':rejection_reason', $rejection_reason);
            $sql->bindParam(':systemdate', $systemdate);
            $sql->bindParam(':username', $username);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':leave_id', $leave_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Reject Leave', 'User ' . $username . ' rejected leave (' . $leave_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_leave_to_cancel
    # Purpose    : Update leave to cancel
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_leave_to_cancel($leave_id, $cancelation_reason, $username){
        if ($this->databaseConnection()) {
            $record_log = 'CAN->' . $username . '->' . date('Y-m-d h:i:s');
            $systemdate = date('Y-m-d');

            $sql = $this->db_connection->prepare("UPDATE tblleave SET STATUS = '3', CANCELATION_REASON = :cancelation_reason, DECISION_DATE = :systemdate, DECISION_BY = :username, RECORD_LOG = :record_log WHERE LEAVE_ID = :leave_id");
            $sql->bindParam(':cancelation_reason', $cancelation_reason);
            $sql->bindParam(':systemdate', $systemdate);
            $sql->bindParam(':username', $username);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':leave_id', $leave_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Cancel Leave', 'User ' . $username . ' cancelled leave (' . $leave_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_overlap_leave_to_cancel
    # Purpose    : Update overlapping leave to cancel
    #
    # Returns    : Date
    #
    # -------------------------------------------------------------
    public function update_overlap_leave_to_cancel($employee_id, $leave_id, $username){
        if ($this->databaseConnection()) {
            $error = '';

            $employee_leave_details = $this->get_data_details_two_parameter('employee leave', $leave_id, $employee_id);
            $leave_date = $employee_leave_details[0]['LEAVE_DATE'];
            $leave_start_time = $employee_leave_details[0]['START_TIME'];
            $leave_end_time = $employee_leave_details[0]['END_TIME'];

            $sql = $this->db_connection->prepare("SELECT LEAVE_ID, LEAVE_DATE, START_TIME, END_TIME FROM tblleave WHERE STATUS IN ('1', '4') AND EMPLOYEE_ID = :employee_id AND LEAVE_ID != :leave_id");
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':leave_id', $leave_id);

            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    while($row = $sql->fetch()){
                        $leave_id = $row['LEAVE_ID'];
                        $start_date = $this->check_date('empty', $row['LEAVE_DATE'], '', 'Y-m-d', '', '', '') . ' ' . $row['START_TIME'];
                        $end_date = $this->check_date('empty', $row['LEAVE_DATE'], '', 'Y-m-d', '', '', '') . ' ' . $row['END_TIME'];

                        if (strtotime($leave_date . ' ' . $leave_start_time) >= strtotime($start_date) && strtotime($leave_date . ' ' . $leave_end_time) <= strtotime($end_date)){
                            $update_leave_to_cancel = $this->update_leave_to_cancel($leave_id, 'Overlap', $username);

                            if($update_leave_to_cancel != '1'){
                                $error = $update_leave_to_cancel;
                            }
                        }
                    }

                    if(empty($error)){
                        return '1';
                    }
                    else{
                        return $error;
                    }
                }
                else{
                    return '1';
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_attendance
    # Purpose    : Update attendance record
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_attendance($latitude, $longitude, $ip_address, $systemdate, $current_time, $early_leaving, $overtime, $total_hours_worked, $attendance_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare("UPDATE tblattendancerecord SET TIME_OUT_DATE = :systemdate, TIME_OUT = :current_time, TIME_OUT_BY = :username, TIME_OUT_IP = :ip_address, TIME_OUT_LAT = :latitude, TIME_OUT_LONG = :longitude, EARLY_LEAVING = :early_leaving, OVERTIME = :overtime, TOTAL_HOURS = :total_hours_worked, RECORD_LOG = :record_log WHERE ATTENDANCE_ID = :attendance_id");
            $sql->bindParam(':systemdate', $systemdate);
            $sql->bindParam(':username', $username);
            $sql->bindParam(':current_time', $current_time);
            $sql->bindParam(':ip_address', $ip_address);
            $sql->bindParam(':latitude', $latitude);
            $sql->bindParam(':longitude', $longitude);
            $sql->bindParam(':early_leaving', $early_leaving);
            $sql->bindParam(':overtime', $overtime);
            $sql->bindParam(':total_hours_worked', $total_hours_worked);
            $sql->bindParam(':total_hours_worked', $total_hours_worked);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':attendance_id', $attendance_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Clock Out', 'User ' . $username . ' clocked out.');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_employee_attendance_log
    # Purpose    : Update employee attendance log
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_employee_attendance_log($time_in_date, $time_in, $time_out_date, $time_out, $latitude, $longitude, $ip_address, $late, $early_leaving, $overtime, $total_hours_worked, $remarks, $attendance_id, $employee_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblattendancerecord SET TIME_IN_DATE = :time_in_date, TIME_IN = :time_in, TIME_IN_BY = :username, TIME_IN_IP = :ip_address, TIME_IN_LAT = :latitude, TIME_IN_LONG = :longitude, TIME_OUT_DATE = :time_out_date, TIME_OUT = :time_out, TIME_OUT_BY = :username, TIME_OUT_IP = :ip_address, TIME_OUT_LAT = :latitude, TIME_OUT_LONG = :longitude, LATE = :late, EARLY_LEAVING = :early_leaving, OVERTIME = :overtime, TOTAL_HOURS = :total_hours_worked, REMARKS = :remarks, RECORD_LOG = :record_log WHERE ATTENDANCE_ID = :attendance_id');
            $sql->bindParam(':time_in_date', $time_in_date);
            $sql->bindParam(':time_in', $time_in);
            $sql->bindParam(':username', $username);
            $sql->bindParam(':ip_address', $ip_address);
            $sql->bindParam(':latitude', $latitude);
            $sql->bindParam(':longitude', $longitude);
            $sql->bindParam(':time_out_date', $time_out_date);
            $sql->bindParam(':time_out', $time_out);
            $sql->bindParam(':late', $late);
            $sql->bindParam(':early_leaving', $early_leaving);
            $sql->bindParam(':overtime', $overtime);
            $sql->bindParam(':total_hours_worked', $total_hours_worked);
            $sql->bindParam(':remarks', $remarks);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':attendance_id', $attendance_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Employee Attendance Log', 'User ' . $username . ' updated the employee attendance log of an employee ('. $employee_id .').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_attendance_record_attachment
    # Purpose    : Updates attendance record attachment
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_attendance_record_attachment($attachment_file_tmp_name, $attachment_file_actual_ext, $attendance_id, $employee_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            if(!empty($attachment_file_tmp_name)){
                $fileNew = $attendance_id . '.' . $attachment_file_actual_ext;
                $fileDestination = 'assets/images/attendance_record/' . $fileNew;
                $file_path ='./assets/images/attendance_record/' . $fileNew;

                $attendance_record_details = $this->get_data_details_two_parameter('employee attendance log', $attendance_id, $employee_id);
                $attachment = $attendance_record_details[0]['ATTACHMENT'];

                if(file_exists($attachment)){
                    if (unlink($attachment)) {
                        if(move_uploaded_file($attachment_file_tmp_name, $fileDestination)){
                            $sql = $this->db_connection->prepare('UPDATE tblattendancerecord SET ATTACHMENT = :file_path, RECORD_LOG = :record_log WHERE ATTENDANCE_ID  = :attendance_id');
                            $sql->bindParam(':file_path', $file_path);
                            $sql->bindParam(':record_log', $record_log);
                            $sql->bindParam(':attendance_id', $attendance_id);

                            if($sql->execute()){
                                $insert_user_log = $this->insert_logs($username, 'Update Attendance Record Attachment', 'User ' . $username . ' updated attendance record attachment (' . $attendance_id . ').');

                                if($insert_user_log == '1'){
                                    return '1';
                                }
                                else{
                                    return $insert_user_log;
                                }
                            }
                            else{
                                return $sql->errorInfo()[2];
                            }
                        }
                        else{
                            return 'There was an error uploading your image.';
                        }
                    }
                    else {
                        return $attachment . ' cannot be deleted due to an error.';
                    }
                }
                else{
                    if(move_uploaded_file($attachment_file_tmp_name, $fileDestination)){
                        $sql = $this->db_connection->prepare('UPDATE tblattendancerecord SET ATTACHMENT = :file_path, RECORD_LOG = :record_log WHERE ATTENDANCE_ID  = :attendance_id');
                        $sql->bindParam(':file_path', $file_path);
                        $sql->bindParam(':record_log', $record_log);
                        $sql->bindParam(':attendance_id', $attendance_id);

                        if($sql->execute()){
                            $insert_user_log = $this->insert_logs($username, 'Update Attendance Record Attachment', 'User ' . $username . ' updated attendance record attachment (' . $attendance_id . ').');

                            if($insert_user_log == '1'){
                                return '1';
                            }
                            else{
                                return $insert_user_log;
                            }
                        }
                        else{
                            return $sql->errorInfo()[2];
                        }
                    }
                    else{
                        return 'There was an error uploading your image.';
                    }
                }
            }
            else{
                return '1';
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_employee_attendance_log_adjustment
    # Purpose    : Update employee attendance log adjustment
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_employee_attendance_log_adjustment($time_in_date, $time_in, $time_out_date, $time_out, $late, $early_leaving, $overtime, $total_hours_worked, $attendance_id, $employee_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblattendancerecord SET TIME_IN_DATE = :time_in_date, TIME_IN = :time_in, TIME_OUT_DATE = :time_out_date, TIME_OUT = :time_out, LATE = :late, EARLY_LEAVING = :early_leaving, OVERTIME = :overtime, TOTAL_HOURS = :total_hours_worked, RECORD_LOG = :record_log WHERE ATTENDANCE_ID = :attendance_id');
            $sql->bindParam(':time_in_date', $time_in_date);
            $sql->bindParam(':time_in', $time_in);
            $sql->bindParam(':time_out_date', $time_out_date);
            $sql->bindParam(':time_out', $time_out);
            $sql->bindParam(':late', $late);
            $sql->bindParam(':early_leaving', $early_leaving);
            $sql->bindParam(':overtime', $overtime);
            $sql->bindParam(':total_hours_worked', $total_hours_worked);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':attendance_id', $attendance_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Employee Attendance Log', 'User ' . $username . ' updated the employee attendance log of an employee ('. $employee_id .').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_deduction_type
    # Purpose    : Update deduction type
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_deduction_type($deduction_type, $category, $deduction_type_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tbldeductiontype SET DEDUCTION = :deduction_type, CATEGORY = :category, RECORD_LOG = :record_log WHERE DEDUCTION_TYPE_ID = :deduction_type_id');
            $sql->bindParam(':deduction_type', $deduction_type);
            $sql->bindParam(':category', $category);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':deduction_type_id', $deduction_type_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Deduction Type', 'User ' . $username . ' updated deduction type (' . $deduction_type_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_deduction_amount
    # Purpose    : Update deduction amount
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_deduction_amount($deduction_amount, $deduction_type_id, $start_range, $end_range, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tbldeductionamount SET DEDUCTION_AMOUNT = :deduction_amount, RECORD_LOG = :record_log WHERE DEDUCTION_TYPE_ID = :deduction_type_id AND START_RANGE = :start_range AND END_RANGE = :end_range');
            $sql->bindParam(':deduction_amount', $deduction_amount);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':deduction_type_id', $deduction_type_id);
            $sql->bindParam(':start_range', $start_range);
            $sql->bindParam(':end_range', $end_range);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Deduction Amount', 'User ' . $username . ' updated deduction amount (' . $deduction_type_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_allowance_type
    # Purpose    : Update allowance type
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_allowance_type($allowance_type, $tax_type, $allowance_type_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblallowancetype SET ALLOWANCE = :allowance_type, TAX_TYPE = :tax_type, RECORD_LOG = :record_log WHERE ALLOWANCE_TYPE_ID = :allowance_type_id');
            $sql->bindParam(':allowance_type', $allowance_type);
            $sql->bindParam(':tax_type', $tax_type);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':allowance_type_id', $allowance_type_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Allowance Type', 'User ' . $username . ' updated allowance type (' . $allowance_type_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_other_income_type
    # Purpose    : Update other income type
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_other_income_type($other_income_type, $tax_type, $other_income_type_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblotherincometype SET OTHER_INCOME = :other_income_type, TAX_TYPE = :tax_type, RECORD_LOG = :record_log WHERE OTHER_INCOME_TYPE_ID = :other_income_type_id');
            $sql->bindParam(':other_income_type', $other_income_type);
            $sql->bindParam(':tax_type', $tax_type);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':other_income_type_id', $other_income_type_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Other Income Type', 'User ' . $username . ' updated other income type (' . $other_income_type_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_payroll_specification
    # Purpose    : Update payroll specification
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_payroll_specification($employee, $specification_type, $specification_category, $amount, $payroll_date, $spec_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblpayrollspec SET EMPLOYEE_ID = :employee, SPEC_TYPE = :specification_type, CATEGORY = :specification_category, SPEC_AMOUNT = :amount, PAYROLL_DATE = :payroll_date, RECORD_LOG = :record_log WHERE SPEC_ID = :spec_id');
            $sql->bindParam(':employee', $employee);
            $sql->bindParam(':specification_type', $specification_type);
            $sql->bindParam(':specification_category', $specification_category);
            $sql->bindParam(':payroll_date', $payroll_date);
            $sql->bindParam(':amount', $amount);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':spec_id', $spec_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Payroll Specification', 'User ' . $username . ' updated payroll specification (' . $spec_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_employee_superior
    # Purpose    : Update employee superior
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_employee_superior($superior, $employee_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblemployeesuperior SET SUPERIOR_ID = :superior, RECORD_LOG = :record_log WHERE EMPLOYEE_ID = :employee_id');
            $sql->bindParam(':superior', $superior);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':employee_id', $employee_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Employee Superior', 'User ' . $username . ' updated employee superior (' . $superior . ') of employee ('. $employee_id .').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_leave_entitlement_revert
    # Purpose    : Reverts leave entitlement
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_leave_entitlement_revert($leave_id){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblemployeesuperior SET SUPERIOR_ID = :superior, RECORD_LOG = :record_log WHERE EMPLOYEE_ID = :employee_id');
            $sql->bindParam(':superior', $superior);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':employee_id', $employee_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Employee Superior', 'User ' . $username . ' updated employee superior (' . $superior . ') of employee ('. $employee_id .').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_user_account
    # Purpose    : Update user account
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_user_account($password_encrypt, $password_expiry_date, $role, $user_cd, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            if(!empty($password_encrypt)){
                $sql = $this->db_connection->prepare('UPDATE tbluseraccount SET PASSWORD = :password_encrypt, ROLE_ID = :role, PASSWORD_EXPIRY_DATE = :password_expiry_date, RECORD_LOG = :record_log WHERE USERNAME = :user_cd');
                $sql->bindParam(':password_encrypt', $password_encrypt);
                $sql->bindParam(':role', $role);
                $sql->bindParam(':password_expiry_date', $password_expiry_date);
                $sql->bindParam(':record_log', $record_log);
                $sql->bindParam(':user_cd', $user_cd);
            }
            else{
                $sql = $this->db_connection->prepare('UPDATE tbluseraccount SET ROLE_ID = :role, RECORD_LOG = :record_log WHERE USERNAME = :user_cd');
                $sql->bindParam(':role', $role);
                $sql->bindParam(':record_log', $record_log);
                $sql->bindParam(':user_cd', $user_cd);
            }

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update User Account', 'User ' . $username . ' updated user account (' . $user_cd . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_user_profile_name
    # Purpose    : Update user profile name
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_user_profile_name($first_name, $middle_name, $last_name, $suffix, $user_cd, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblemployeeprofile SET FIRST_NAME = :first_name, LAST_NAME = :last_name, MIDDLE_NAME = :middle_name, SUFFIX = :suffix, RECORD_LOG = :record_log WHERE USERNAME = :user_cd');
            $sql->bindParam(':first_name', $first_name);
            $sql->bindParam(':last_name', $last_name);
            $sql->bindParam(':middle_name', $middle_name);
            $sql->bindParam(':suffix', $suffix);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':user_cd', $user_cd);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update User Profile Name', 'User ' . $username . ' updated user profile name (' . $user_cd . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_employee_username
    # Purpose    : Update employee username
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_employee_username($user_cd, $employee_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblemployeeprofile SET USERNAME = :user_cd, RECORD_LOG = :record_log WHERE EMPLOYEE_ID = :employee_id');
            $sql->bindParam(':user_cd', $user_cd);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':employee_id', $employee_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Employee Username', 'User ' . $username . ' updated employee username (' . $employee_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_email_notification
    # Purpose    : Update email notification
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_email_notification($notification, $notification_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblnotificationsetting SET NOTIFICATION = :notification, RECORD_LOG = :record_log WHERE NOTIFICATION_ID = :notification_id');
            $sql->bindParam(':notification', $notification);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':notification_id', $notification_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Email Notification', 'User ' . $username . ' updated email notification (' . $notification_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_email_notification_status
    # Purpose    : Update email notification status
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_email_notification_status($notification_id, $active, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblnotificationsetting SET ACTIVE = :active, RECORD_LOG = :record_log WHERE NOTIFICATION_ID = :notification_id');
            $sql->bindParam(':active', $active);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':notification_id', $notification_id);

            if($sql->execute()){
                if($active == 1){
                    $log_type = 'Activate Email Notification';
                    $log = 'User ' . $username . ' activated email notification (' . $notification_id . ')';
                }
                else{
                    $log_type = 'Deactivate Email Notification';
                    $log = 'User ' . $username . ' deactivated email notification (' . $notification_id . ')';
                }

                $insert_user_log = $this->insert_logs($username, $log_type, $log);

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_email_recipient
    # Purpose    : Update email recipient
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_email_recipient($email, $notification_id, $recipient_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblemailrecipient SET EMAIL = :email, RECORD_LOG = :record_log WHERE NOTIFICATION_ID = :notification_id AND RECIPIENT_ID = :recipient_id');
            $sql->bindParam(':email', $email);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':notification_id', $notification_id);
            $sql->bindParam(':recipient_id', $recipient_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Email Recipient', 'User ' . $username . ' updated email recipient (' . $recipient_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_payroll_specification_status
    # Purpose    : Update payroll specification status
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_payroll_specification_status($payroll_id, $employee_id, $active, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblpayrollspec SET STATUS = :active, RECORD_LOG = :record_log WHERE PAYROLL_ID = :payroll_id AND EMPLOYEE_ID = :employee_id');
            $sql->bindParam(':active', $active);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':payroll_id', $payroll_id);
            $sql->bindParam(':employee_id', $employee_id);

            if($sql->execute()){
                if($active == 1){
                    $log_type = 'Pay Payroll Specification';
                    $log = 'User ' . $username . ' paid payroll specification (' . $payroll_id . ')';
                }
                else{
                    $log_type = 'Reverse Payroll Specification';
                    $log = 'User ' . $username . ' reversed payroll specification (' . $payroll_id . ')';
                }

                $insert_user_log = $this->insert_logs($username, $log_type, $log);

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_attendance_record_status
    # Purpose    : Update attendance record status
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_attendance_record_status($employee_id, $active, $payroll_start_date, $payroll_end_date, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblattendancerecord SET LOCKED = :active, RECORD_LOG = :record_log WHERE EMPLOYEE_ID = :employee_id AND TIME_IN_DATE BETWEEN :payroll_start_date AND :payroll_end_date');
            $sql->bindParam(':active', $active);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':payroll_start_date', $payroll_start_date);
            $sql->bindParam(':payroll_end_date', $payroll_end_date);

            if($sql->execute()){
                if($active == 1){
                    $log_type = 'Lock Attendance Record';
                    $log = 'User ' . $username . ' locked attendance record (' . $employee_id . ')';
                }
                else{
                    $log_type = 'Unlock Attendance Record';
                    $log = 'User ' . $username . ' unlocked attendance record (' . $employee_id . ')';
                }

                $insert_user_log = $this->insert_logs($username, $log_type, $log);

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_payroll_specificiation_payroll_id
    # Purpose    : Update payroll specification payroll id
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_payroll_specificiation_payroll_id($employee_id, $payroll_id, $payroll_start_date, $payroll_end_date, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblpayrollspec SET PAYROLL_ID = :payroll_id, RECORD_LOG = :record_log WHERE EMPLOYEE_ID = :employee_id AND PAYROLL_DATE BETWEEN :payroll_start_date AND :payroll_end_date');
            $sql->bindParam(':payroll_id', $payroll_id);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':payroll_start_date', $payroll_start_date);
            $sql->bindParam(':payroll_end_date', $payroll_end_date);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Payroll ID', 'User ' . $username . ' updated payroll id (' . $employee_id . ')');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_email_configuration
    # Purpose    : Update email configuration
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_email_configuration($mail_host, $port, $smpt_auth, $smpt_auto_tls, $mail_user, $mail_password, $mail_encryption, $mail_from_name, $mail_from_email, $mail_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblmailconfig SET MAIL_HOST = :mail_host, PORT = :port, SMTP_AUTH = :smpt_auth, SMTP_AUTO_TLS = :smpt_auto_tls, USERNAME = :mail_user, PASSWORD = :mail_password, MAIL_ENCRYPTION = :mail_encryption, MAIL_FROM_NAME = :mail_from_name, MAIL_FROM_EMAIL = :mail_from_email, RECORD_LOG = :record_log WHERE MAIL_ID = :mail_id');
            $sql->bindParam(':mail_host', $mail_host);
            $sql->bindParam(':port', $port);
            $sql->bindParam(':smpt_auth', $smpt_auth);
            $sql->bindParam(':smpt_auto_tls', $smpt_auto_tls);
            $sql->bindParam(':mail_user', $mail_user);
            $sql->bindParam(':mail_password', $mail_password);
            $sql->bindParam(':mail_encryption', $mail_encryption);
            $sql->bindParam(':mail_from_name', $mail_from_name);
            $sql->bindParam(':mail_from_email', $mail_from_email);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':mail_id', $mail_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Email Configuration', 'User ' . $username . ' updated email configuration (' . $mail_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_office_shift
    # Purpose    : Update office shift
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_office_shift($day_off, $time_in, $time_out, $late, $employee, $counter, $lunch_start_time, $lunch_end_time, $half_day, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblofficeshift SET DAY_OFF = :day_off, TIME_IN = :time_in, TIME_OUT = :time_out, LATE_MARK = :late, START_LUNCH_BREAK = :lunch_start_time, END_LUNCH_BREAK = :lunch_end_time, HALF_DAY_MARK = :half_day, RECORD_LOG = :record_log WHERE EMPLOYEE_ID = :employee AND DTR_DAY = :counter');
            $sql->bindParam(':day_off', $day_off);
            $sql->bindParam(':time_in', $time_in);
            $sql->bindParam(':time_out', $time_out);
            $sql->bindParam(':late', $late);
            $sql->bindParam(':lunch_start_time', $lunch_start_time);
            $sql->bindParam(':lunch_end_time', $lunch_end_time);
            $sql->bindParam(':half_day', $half_day);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':employee', $employee);
            $sql->bindParam(':counter', $counter);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Office Shift', 'User ' . $username . ' updated office shift ('. $counter .') of employee (' . $employee . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_payroll_group
    # Purpose    : Update payroll group
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_payroll_group($payroll_group, $payroll_group_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblpayrollgroup SET PAYROLL_GROUP_DESC = :payroll_group, RECORD_LOG = :record_log WHERE PAYROLL_GROUP_ID = :payroll_group_id');
            $sql->bindParam(':payroll_group', $payroll_group);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':payroll_group_id', $payroll_group_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Payroll Group', 'User ' . $username . ' updated payroll group (' . $payroll_group_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_attendance_adjustment
    # Purpose    : Update attendance adjustment
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_attendance_adjustment($time_in, $time_out_date, $time_out, $reason, $adjustment_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblattendanceadustment SET TIME_IN_ADJ = :time_in, TIME_OUT_DATE_ADJ = :time_out_date, TIME_OUT_ADJ = :time_out, REASON = :reason, RECORD_LOG = :record_log WHERE ADJUSTMENT_ID = :adjustment_id');
            $sql->bindParam(':time_in', $time_in);
            $sql->bindParam(':time_out_date', $time_out_date);
            $sql->bindParam(':time_out', $time_out);
            $sql->bindParam(':reason', $reason);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':adjustment_id', $adjustment_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Attendance Adjustment', 'User ' . $username . ' updated attendance adjustment (' . $adjustment_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_employee_attendance_adjustment_request_status
    # Purpose    : Update attendance adjustment request status
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_employee_attendance_adjustment_request_status($status, $remarks, $adjustment_id, $approver_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');
            $systemdate = date('Y-m-d');
            $current_time = date('H:i:s');

            if($status == '4'){
                $sql = $this->db_connection->prepare('UPDATE tblattendanceadustment SET STATUS = :status, RECOMMEND_BY = :approver_id, RECOMMEND_DATE = :systemdate, RECOMMEND_TIME = :current_time, RECORD_LOG = :record_log WHERE ADJUSTMENT_ID = :adjustment_id');
            }
            else{
                $sql = $this->db_connection->prepare('UPDATE tblattendanceadustment SET STATUS = :status, DECISION_BY = :approver_id, REMARKS = :remarks, DECISION_DATE = :systemdate, DECISION_TIME = :current_time, RECORD_LOG = :record_log WHERE ADJUSTMENT_ID = :adjustment_id');
                $sql->bindParam(':remarks', $remarks);
            }

            $sql->bindParam(':status', $status);
            $sql->bindParam(':approver_id', $approver_id);
            $sql->bindParam(':systemdate', $systemdate);
            $sql->bindParam(':current_time', $current_time);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':adjustment_id', $adjustment_id);

            if($sql->execute()){
                if($status == 1){
                    $log_type = 'Approve Attendance Adjustment';
                    $log = 'User ' . $username . ' approve attendance adjustment (' . $adjustment_id . ')';
                }
                if($status == 2){
                    $log_type = 'Reject Attendance Adjustment';
                    $log = 'User ' . $username . ' rejected attendance adjustment (' . $adjustment_id . ')';
                }
                else{
                    $log_type = 'Cancel Attendance Adjustment';
                    $log = 'User ' . $username . ' cancelled attendance adjustment (' . $adjustment_id . ')';
                }

                $insert_user_log = $this->insert_logs($username, $log_type, $log);

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_attendance_adjustment_attachment
    # Purpose    : Updates attendance adjustment attachment
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_attendance_adjustment_attachment($attachment_file_tmp_name, $attachment_file_actual_ext, $adjustment_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            if(!empty($attachment_file_tmp_name)){
                $fileNew = $adjustment_id . '.' . $attachment_file_actual_ext;
                $fileDestination = 'assets/images/attendance_adjustment/' . $fileNew;
                $file_path ='./assets/images/attendance_adjustment/' . $fileNew;

                $attendance_adjustment_details = $this->get_data_details_one_parameter('attendance adjustment', $adjustment_id);
                $attachment = $attendance_adjustment_details[0]['ATTACHMENT'];

                if(file_exists($attachment)){
                    if (unlink($attachment)) {
                        if(move_uploaded_file($attachment_file_tmp_name, $fileDestination)){
                            $sql = $this->db_connection->prepare('UPDATE tblattendanceadustment SET ATTACHMENT = :file_path, RECORD_LOG = :record_log WHERE ADJUSTMENT_ID  = :adjustment_id');
                            $sql->bindParam(':file_path', $file_path);
                            $sql->bindParam(':record_log', $record_log);
                            $sql->bindParam(':adjustment_id', $adjustment_id);

                            if($sql->execute()){
                                $insert_user_log = $this->insert_logs($username, 'Update Attendance Adjusment Attachment', 'User ' . $username . ' updated attendance adjustment attachment (' . $adjustment_id . ').');

                                if($insert_user_log == '1'){
                                    return '1';
                                }
                                else{
                                    return $insert_user_log;
                                }
                            }
                            else{
                                return $sql->errorInfo()[2];
                            }
                        }
                        else{
                            return 'There was an error uploading your image.';
                        }
                    }
                    else {
                        return $attachment . ' cannot be deleted due to an error.';
                    }
                }
                else{
                    if(move_uploaded_file($attachment_file_tmp_name, $fileDestination)){
                        $sql = $this->db_connection->prepare('UPDATE tblattendanceadustment SET ATTACHMENT = :file_path, RECORD_LOG = :record_log WHERE ADJUSTMENT_ID  = :adjustment_id');
                        $sql->bindParam(':file_path', $file_path);
                        $sql->bindParam(':record_log', $record_log);
                        $sql->bindParam(':adjustment_id', $adjustment_id);

                        if($sql->execute()){
                            $insert_user_log = $this->insert_logs($username, 'Update Attendance Adjusment Attachment', 'User ' . $username . ' updated attendance adjustment attachment (' . $adjustment_id . ').');

                            if($insert_user_log == '1'){
                                return '1';
                            }
                            else{
                                return $insert_user_log;
                            }
                        }
                        else{
                            return $sql->errorInfo()[2];
                        }
                    }
                    else{
                        return 'There was an error uploading your image.';
                    }
                }
            }
            else{
                return '1';
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_telephone_log
    # Purpose    : Update telephone log
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_telephone_log($recipient, $telephone, $initial_call_date, $initial_call_time, $reason, $log_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tbltelephonelogsheet SET RECIPIENT = :recipient, TELEPHONE = :telephone, INITIAL_CALL_DATE = :initial_call_date, INITIAL_CALL_TIME = :initial_call_time, REASON = :reason, RECORD_LOG = :record_log WHERE LOG_ID = :log_id');
            $sql->bindParam(':recipient', $recipient);
            $sql->bindParam(':telephone', $telephone);
            $sql->bindParam(':initial_call_date', $initial_call_date);
            $sql->bindParam(':initial_call_time', $initial_call_time);
            $sql->bindParam(':reason', $reason);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':log_id', $log_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Telephone Log', 'User ' . $username . ' updated telephone log (' . $log_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_telephone_log_status
    # Purpose    : Update telephone log status
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_telephone_log_status($status, $log_id, $employee_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');
            $systemdate = date('Y-m-d');
            $current_time = date('H:i:s');

            $sql = $this->db_connection->prepare('UPDATE tbltelephonelogsheet SET STATUS = :status, DECISION_DATE = :systemdate, DECISION_TIME = :current_time, DECISION_BY = :employee_id, RECORD_LOG = :record_log WHERE LOG_ID = :log_id');
            $sql->bindParam(':status', $status);
            $sql->bindParam(':systemdate', $systemdate);
            $sql->bindParam(':current_time', $current_time);
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':log_id', $log_id);

            if($sql->execute()){
                if($status == 1){
                    $log_type = 'Approve Telephone Log';
                    $log = 'User ' . $username . ' approve telephone log (' . $log_id . ')';
                }
                else if($status == 2){
                    $log_type = 'Reject Telephone Log';
                    $log = 'User ' . $username . ' rejected telephone log (' . $log_id . ')';
                }
                else{
                    $log_type = 'Cancel Telephone Log';
                    $log = 'User ' . $username . ' cancelled telephone log (' . $log_id . ')';
                }

                $insert_user_log = $this->insert_logs($username, $log_type, $log);

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_telephone_log_consumption_status
    # Purpose    : Update telephone log consumption status
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_telephone_log_consumption_status($status, $actual_call_date, $actual_call_time, $duration, $log_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');
            $systemdate = date('Y-m-d');
            $current_time = date('H:i:s');

            if($status == '4'){
                $sql = $this->db_connection->prepare('UPDATE tbltelephonelogsheet SET STATUS = :status, ACTUAL_CALL_DATE = :actual_call_date, ACTUAL_CALL_TIME = :actual_call_time, ACTUAL_CALL_DURATION = :duration, RECORD_LOG = :record_log WHERE LOG_ID = :log_id');
                $sql->bindParam(':status', $status);
                $sql->bindParam(':actual_call_date', $actual_call_date);
                $sql->bindParam(':actual_call_time', $actual_call_time);
                $sql->bindParam(':duration', $duration);
                $sql->bindParam(':record_log', $record_log);
                $sql->bindParam(':log_id', $log_id);
            }
            else{
                $sql = $this->db_connection->prepare('UPDATE tbltelephonelogsheet SET STATUS = :status, RECORD_LOG = :record_log WHERE LOG_ID = :log_id');
                $sql->bindParam(':status', $status);
                $sql->bindParam(':record_log', $record_log);
                $sql->bindParam(':log_id', $log_id);
            }

            if($sql->execute()){
                if($status == 4){
                    $log_type = 'Consumed Telephone Log';
                    $log = 'User ' . $username . ' tagged telephone log (' . $log_id . ') as consumed';
                }
                else{
                    $log_type = 'Not Consumed Telephone Log';
                    $log = 'User ' . $username . ' tagged telephone log (' . $log_id . ') as not consumed';
                }

                $insert_user_log = $this->insert_logs($username, $log_type, $log);

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_document_setting
    # Purpose    : Update document setting
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_document_setting($max_file_size, $authentication, $setting_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tbldocumentsettings SET MAX_FILE_SIZE = :max_file_size, AUTHORIZATION = :authentication, RECORD_LOG = :record_log WHERE SETTINGS_ID = :setting_id');
            $sql->bindParam(':max_file_size', $max_file_size);
            $sql->bindParam(':authentication', $authentication);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':setting_id', $setting_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Document Management Settings', 'User ' . $username . ' updated document management settings (' . $setting_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_document
    # Purpose    : Update document
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
   public function update_document($publish, $document_name, $category, $description,$document_id, $username){
    error_log("Updating document in API: $document_id, $document_name, $category, $description, $publish, $username");

    if ($this->databaseConnection()) {
        try {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');
            $sql = $this->db_connection->prepare("UPDATE tbldocument SET PUBLISH = :publish, DOCUMENT_NAME = :document_name, DOCUMENT_CATEGORY = :category, DESCRIPTION = :description, RECORD_LOG = :record_log WHERE DOCUMENT_ID = :document_id");
            $sql->bindParam(':publish', $publish);
            $sql->bindParam(':document_name', $document_name);
            $sql->bindParam(':category', $category);
            $sql->bindParam(':description', $description);

            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':document_id', $document_id);

            if($sql->execute()){
                error_log("SQL executed successfully");
                $insert_user_log = $this->insert_logs($username, 'Update Document', 'User ' . $username . ' updated document (' . $document_id . ').');
                error_log("Insert user log result: $insert_user_log");
                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    throw new Exception("Failed to insert user log: $insert_user_log");
                }
            }
            else{
                $error = $sql->errorInfo();
                throw new Exception("SQL execution failed: " . print_r($error, true));
            }
        } catch (Exception $e) {
            error_log("Exception in update_document: " . $e->getMessage());
            return "Error: " . $e->getMessage();
        }
    } else {
        error_log("Database connection failed");
        return "Error: Database connection failed";
    }
}
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_document_file
    # Purpose    : Updates document file
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_document_file($document_file_tmp_name, $document_file_actual_ext, $document_file_size, $document_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            if(!empty($document_file_tmp_name)){
                $file_name = $this->generate_file_name(10);
                $fileNew = $file_name . '.dat';
                $fileDestination ='documents/' . $fileNew;
                $file_path ='./documents/' . $file_name;

                $document_details = $this->get_data_details_one_parameter('document', $document_id);
                $document_path = $document_details[0]['DOCUMENT_PATH'] . '.dat';

                if(file_exists($document_path)){
                    if (unlink($document_path)) {
                        if(move_uploaded_file($document_file_tmp_name, $fileDestination)){
                            $sql = $this->db_connection->prepare("UPDATE tbldocument SET DOCUMENT_PATH = :file_path, DOCUMENT_EXTENSION = :document_file_actual_ext, DOCUMENT_SIZE = :document_file_size, RECORD_LOG = :record_log WHERE DOCUMENT_ID  = :document_id");
                            $sql->bindParam(':file_path', $file_path);
                            $sql->bindParam(':document_file_actual_ext', $document_file_actual_ext);
                            $sql->bindParam(':document_file_size', $document_file_size);
                            $sql->bindParam(':record_log', $record_log);
                            $sql->bindParam(':document_id', $document_id);

                            if($sql->execute()){
                                $insert_user_log = $this->insert_logs($username, 'Update Document File', 'User ' . $username . ' updated document file (' . $document_id . ').');

                                if($insert_user_log == '1'){
                                    return '1';
                                }
                                else{
                                    return $insert_user_log;
                                }
                            }
                            else{
                                return $sql->errorInfo()[2];
                            }
                        }
                        else{
                            return 'There was an error uploading your file.';
                        }
                    }
                    else {
                        return $document_path . ' cannot be deleted due to an error.';
                    }
                }
                else{
                    if(move_uploaded_file($document_file_tmp_name, $fileDestination)){
                        $sql = $this->db_connection->prepare("UPDATE tbldocument SET DOCUMENT_PATH = :file_path, DOCUMENT_EXTENSION = :document_file_actual_ext, DOCUMENT_SIZE = :document_file_size, RECORD_LOG = :record_log WHERE DOCUMENT_ID  = :document_id");
                        $sql->bindParam(':file_path', $file_path);
                        $sql->bindParam(':document_file_actual_ext', $document_file_actual_ext);
                        $sql->bindParam(':document_file_size', $document_file_size);
                        $sql->bindParam(':record_log', $record_log);
                        $sql->bindParam(':document_id', $document_id);

                        if($sql->execute()){
                            $insert_user_log = $this->insert_logs($username, 'Update Document File', 'User ' . $username . ' updated document file (' . $document_id . ').');

                            if($insert_user_log == '1'){
                                return '1';
                            }
                            else{
                                return $insert_user_log;
                            }
                        }
                        else{
                            return $sql->errorInfo()[2];
                        }
                    }
                    else{
                        return 'There was an error uploading your file.';
                    }
                }
            }
            else{
                return '1';
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_document_status
    # Purpose    : Update document status
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_document_status($status, $employee_id, $document_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');
            $systemdate = date('Y-m-d');
            $current_time = date('H:i:s');

            if($status == 1){
                $sql = $this->db_connection->prepare('UPDATE tbldocument SET PUBLISH = :status, PUBLISH_DATE = :systemdate, PUBLISH_TIME = :current_time, PUBLISH_BY = :employee_id, RECORD_LOG = :record_log WHERE DOCUMENT_ID = :document_id');
                $sql->bindParam(':status', $status);
                $sql->bindParam(':systemdate', $systemdate);
                $sql->bindParam(':current_time', $current_time);
                $sql->bindParam(':employee_id', $employee_id);
                $sql->bindParam(':record_log', $record_log);
                $sql->bindParam(':document_id', $document_id);
            }
            else{
                $sql = $this->db_connection->prepare("UPDATE tbldocument SET PUBLISH = :status, PUBLISH_DATE = '', PUBLISH_TIME = '', PUBLISH_BY = '', RECORD_LOG = :record_log WHERE DOCUMENT_ID = :document_id");
                $sql->bindParam(':status', $status);
                $sql->bindParam(':record_log', $record_log);
                $sql->bindParam(':document_id', $document_id);
            }

            if($sql->execute()){
                if($status == 1){
                    $log_type = 'Publish Document';
                    $log = 'User ' . $username . ' publish document (' . $document_id . ')';
                }
                else{
                    $log_type = 'Unpublish Document';
                    $log = 'User ' . $username . ' unpublish document (' . $document_id . ')';
                }

                $insert_user_log = $this->insert_logs($username, $log_type, $log);

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_transmittal
    # Purpose    : Update transmittal
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_transmittal($description, $department, $priority_person, $transmittal_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare("UPDATE tbltransmittal SET DESCRIPTION = :description, TRANSMITTED_EMPLOYEE = :priority_person, TRANSMITTED_DEPARTMENT = :department, RECORD_LOG = :record_log WHERE TRANSMITTAL_ID = :transmittal_id");
            $sql->bindParam(':description', $description);
            $sql->bindParam(':priority_person', $priority_person);
            $sql->bindParam(':department', $department);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':transmittal_id', $transmittal_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Transmittal', 'User ' . $username . ' updated transmittal (' . $transmittal_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_transmittal_status
    # Purpose    : Update transmittal
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_transmittal_status($status, $transmittal_id, $systemdate, $current_time, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tbltransmittal SET STATUS = :status, LAST_TRANSACTION_DATE = :systemdate, LAST_TRANSACTION_TIME = :current_time, RECORD_LOG = :record_log WHERE TRANSMITTAL_ID = :transmittal_id');
            $sql->bindParam(':status', $status);
            $sql->bindParam(':systemdate', $systemdate);
            $sql->bindParam(':current_time', $current_time);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':transmittal_id', $transmittal_id);

            if($sql->execute()){
                return '1';
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_suggest_to_win_status
    # Purpose    : Update suggest to win
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_suggest_to_win_status($status, $stw_id, $approver_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');
            $systemdate = date('Y-m-d');
            $current_time = date('H:i:s');

            if($status == '1'){
                $voting_period = $this->get_stw_voting_date($systemdate, 5);

                $sql = $this->db_connection->prepare('UPDATE tblstw SET STATUS = :status, DECISION_BY = :approver_id, DECISION_DATE = :systemdate, DECISION_TIME = :current_time, VOTING_PERIOD = :voting_period, RECORD_LOG = :record_log WHERE STW_ID = :stw_id');
                $sql->bindParam(':voting_period', $voting_period);
            }
            else{
                $sql = $this->db_connection->prepare('UPDATE tblstw SET STATUS = :status, DECISION_BY = :approver_id, DECISION_DATE = :systemdate, DECISION_TIME = :current_time, RECORD_LOG = :record_log WHERE STW_ID = :stw_id');
            }

            $sql->bindParam(':status', $status);
            $sql->bindParam(':approver_id', $approver_id);
            $sql->bindParam(':systemdate', $systemdate);
            $sql->bindParam(':current_time', $current_time);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':stw_id', $stw_id);

            if($sql->execute()){
                if($status == '1'){
                    $log_type = 'Approve Suggest To win';
                    $log = 'User ' . $username . ' approved suggest to win (' . $stw_id . ')';
                }
                if($status == '2'){
                    $log_type = 'Reject Suggest To win';
                    $log = 'User ' . $username . ' rejected suggest to win (' . $stw_id . ')';
                }
                else{
                    $log_type = 'Cancel Suggest To win';
                    $log = 'User ' . $username . ' cancelled suggest to win (' . $stw_id . ')';
                }

                $insert_user_log = $this->insert_logs($username, $log_type, $log);

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_transmittal_person
    # Purpose    : Update transmittal person
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_transmittal_person($employee_id, $employee_department, $priority_person, $transmittal_department, $transmittal_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare("UPDATE tbltransmittal SET CURRENT_EMPLOYEE = :employee_id, CURRENT_DEPARTMENT = :employee_department, TRANSMITTED_EMPLOYEE = :priority_person, TRANSMITTED_DEPARTMENT = :transmittal_department, RECORD_LOG = :record_log WHERE TRANSMITTAL_ID = :transmittal_id");
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':employee_department', $employee_department);
            $sql->bindParam(':priority_person', $priority_person);
            $sql->bindParam(':transmittal_department', $transmittal_department);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':transmittal_id', $transmittal_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Transmittal Person', 'User ' . $username . ' updated transmittal person (' . $transmittal_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_suggest_to_win
    # Purpose    : Update suggest to win
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_suggest_to_win($title, $description, $reason, $benefits, $stw_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare("UPDATE tblstw SET TITLE = :title, DESCRIPTION = :description, REASON = :reason, BENEFITS = :benefits, RECORD_LOG = :record_log WHERE STW_ID = :stw_id");
            $sql->bindParam(':title', $title);
            $sql->bindParam(':description', $description);
            $sql->bindParam(':reason', $reason);
            $sql->bindParam(':benefits', $benefits);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':stw_id', $stw_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Suggest To Win', 'User ' . $username . ' updated suggest to win (' . $stw_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_stw_attachment_file
    # Purpose    : Updates suggest to win attachment
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_stw_attachment_file($stw_attachment_file_tmp_name, $stw_attachment_file_actual_ext, $stw_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            if(!empty($stw_attachment_file_tmp_name)){
                $file_name = $this->generate_file_name(10);
                $fileNew = $file_name . '.' . $stw_attachment_file_actual_ext;
                $fileDestination =  'stw/' . $fileNew;
                $file_path ='./stw/' . $fileNew;

                $suggest_to_win_details = $this->get_data_details_one_parameter('suggest to win', $stw_id);
                $suggest_to_win_path = $suggest_to_win_details[0]['FILE_PATH'];

                if(file_exists($suggest_to_win_path)){
                    if (unlink($suggest_to_win_path)) {
                        if(move_uploaded_file($stw_attachment_file_tmp_name, $fileDestination)){
                            $sql = $this->db_connection->prepare('UPDATE tblstw SET FILE_PATH = :file_path, RECORD_LOG = :record_log WHERE STW_ID  = :stw_id');
                            $sql->bindParam(':file_path', $file_path);
                            $sql->bindParam(':record_log', $record_log);
                            $sql->bindParam(':stw_id', $stw_id);

                            if($sql->execute()){
                                $insert_user_log = $this->insert_logs($username, 'Update Suggest To Win Attachment', 'User ' . $username . ' updated suggest to win attachment (' . $stw_id . ').');

                                if($insert_user_log == '1'){
                                    return '1';
                                }
                                else{
                                    return $insert_user_log;
                                }
                            }
                            else{
                                return $sql->errorInfo()[2];
                            }
                        }
                        else{
                            return 'There was an error uploading your file.';
                        }
                    }
                    else {
                        return $document_path . ' cannot be deleted due to an error.';
                    }
                }
                else{
                    if(move_uploaded_file($stw_attachment_file_tmp_name, $fileDestination)){
                        $sql = $this->db_connection->prepare('UPDATE tblstw SET FILE_PATH = :file_path, RECORD_LOG = :record_log WHERE STW_ID  = :stw_id');
                        $sql->bindParam(':file_path', $file_path);
                        $sql->bindParam(':record_log', $record_log);
                        $sql->bindParam(':stw_id', $stw_id);

                        if($sql->execute()){
                            $insert_user_log = $this->insert_logs($username, 'Update Suggest To Win Attachment', 'User ' . $username . ' updated suggest to win attachment (' . $stw_id . ').');

                            if($insert_user_log == '1'){
                                return '1';
                            }
                            else{
                                return $insert_user_log;
                            }
                        }
                        else{
                            return $sql->errorInfo()[2];
                        }
                    }
                    else{
                        return 'There was an error uploading your file.';
                    }
                }
            }
            else{
                return '1';
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_suggest_to_win_vote
    # Purpose    : Update suggest to win vote
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_suggest_to_win_vote($satisfaction, $quality, $innovation, $feasibility, $total, $remarks, $stw_id, $employee_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblstwvote SET SATISFACTION = :satisfaction, QUALITY = :quality, INNOVATION = :innovation, FEASIBILITY = :feasibility, TOTAL = :total, REMARKS = :remarks, RECORD_LOG = :record_log WHERE STW_ID = :stw_id AND EMPLOYEE_ID = :employee_id');
            $sql->bindParam(':satisfaction', $satisfaction);
            $sql->bindParam(':quality', $quality);
            $sql->bindParam(':innovation', $innovation);
            $sql->bindParam(':feasibility', $feasibility);
            $sql->bindParam(':total', $total);
            $sql->bindParam(':remarks', $remarks);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':stw_id', $stw_id);
            $sql->bindParam(':employee_id', $employee_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Suggest To Win Vote', 'User ' . $username . ' updated suggest to win vote (' . $stw_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_suggest_to_win_vote_end_date
    # Purpose    : Update suggest to win vote end date
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_suggest_to_win_vote_end_date($vote_end_date, $stw_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare("UPDATE tblstw SET VOTING_PERIOD = :vote_end_date, RECORD_LOG = :record_log WHERE STW_ID = :stw_id");
            $sql->bindParam(':vote_end_date', $vote_end_date);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':stw_id', $stw_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Suggest To Win Vote End Date', 'User ' . $username . ' updated suggest to win vote end date (' . $stw_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_suggest_to_win_vote_summary
    # Purpose    : Update suggest to win vote summary
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_suggest_to_win_vote_summary($stw_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare("SELECT COUNT(STW_ID) AS STW_ID, SUM(SATISFACTION) AS SATISFACTION, SUM(QUALITY) AS QUALITY, SUM(INNOVATION) AS INNOVATION, SUM(FEASIBILITY) AS FEASIBILITY FROM tblstwvote WHERE STW_ID = :stw_id");
            $sql->bindParam(':stw_id', $stw_id);

            if($sql->execute()){
                $row = $sql->fetch();
                $count = $row['STW_ID'];
                $satisfaction = ($row['SATISFACTION'] / $count) * 0.3;
                $quality = ($row['QUALITY'] / $count) * 0.2;
                $innovation = ($row['INNOVATION'] / $count) * 0.2;
                $feasibility = ($row['FEASIBILITY'] / $count) * 0.3;

                $total = $satisfaction + $quality + $innovation + $feasibility;

                $sql = $this->db_connection->prepare("UPDATE tblstwvotesummary SET SATISFACTION = :satisfaction, QUALITY = :quality, INNOVATION = :innovation, FEASIBILITY = :feasibility, TOTAL = :total, RECORD_LOG = :record_log WHERE STW_ID = :stw_id");
                $sql->bindParam(':satisfaction', $satisfaction);
                $sql->bindParam(':quality', $quality);
                $sql->bindParam(':innovation', $innovation);
                $sql->bindParam(':feasibility', $feasibility);
                $sql->bindParam(':total', $total);
                $sql->bindParam(':record_log', $record_log);
                $sql->bindParam(':stw_id', $stw_id);

                if($sql->execute()){
                    $insert_user_log = $this->insert_logs($username, 'Update Suggest To Win Vote Summary', 'User ' . $username . ' updated suggest to win vote summary (' . $stw_id . ').');

                    if($insert_user_log == '1'){
                        return '1';
                    }
                    else{
                        return $insert_user_log;
                    }
                }
                else{
                    return $sql->errorInfo()[2];
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_training_room_log
    # Purpose    : Update training room log
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_training_room_log($start_date, $start_time, $end_time, $other_participants, $lights, $fan, $aircon, $reason, $log_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tbltrainingroomlogsheet SET START_DATE = :start_date, START_TIME = :start_time, END_TIME = :end_time, OTHER_PARTICIPANT = :other_participants, FAN = :fan, AIRCON = :aircon, LIGHTS = :lights, REASON = :reason, RECORD_LOG = :record_log WHERE LOG_ID = :log_id');
            $sql->bindParam(':start_date', $start_date);
            $sql->bindParam(':start_time', $start_time);
            $sql->bindParam(':end_time', $end_time);
            $sql->bindParam(':other_participants', $other_participants);
            $sql->bindParam(':fan', $fan);
            $sql->bindParam(':aircon', $aircon);
            $sql->bindParam(':reason', $reason);
            $sql->bindParam(':lights', $lights);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':log_id', $log_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Training Room Log', 'User ' . $username . ' updated training room log (' . $log_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_training_room_log_status
    # Purpose    : Update training room log status
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_training_room_log_status($status, $log_id, $employee_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');
            $systemdate = date('Y-m-d');
            $current_time = date('H:i:s');

            $sql = $this->db_connection->prepare('UPDATE tbltrainingroomlogsheet SET STATUS = :status, DECISION_DATE = :systemdate, DECISION_TIME = :current_time, DECISION_BY = :employee_id, RECORD_LOG = :record_log WHERE LOG_ID = :log_id');
            $sql->bindParam(':status', $status);
            $sql->bindParam(':systemdate', $systemdate);
            $sql->bindParam(':current_time', $current_time);
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':log_id', $log_id);

            if($sql->execute()){
                if($status == 1){
                    $log_type = 'Approve Training Room Log';
                    $log = 'User ' . $username . ' approve training room log (' . $log_id . ')';
                }
                else if($status == 2){
                    $log_type = 'Reject Training Room Log';
                    $log = 'User ' . $username . ' rejected training room log (' . $log_id . ')';
                }
                else{
                    $log_type = 'Cancel Training Room Log';
                    $log = 'User ' . $username . ' cancelled training room log (' . $log_id . ')';
                }

                $insert_user_log = $this->insert_logs($username, $log_type, $log);

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_weekly_cash_flow
    # Purpose    : Update weekly cash flow
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_weekly_cash_flow($start_date, $end_date, $wcf_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblwcf SET START_DATE = :start_date, END_DATE = :end_date, RECORD_LOG = :record_log WHERE WCF_ID = :wcf_id');
            $sql->bindParam(':start_date', $start_date);
            $sql->bindParam(':end_date', $end_date);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':wcf_id', $wcf_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Weekly Cash Flow', 'User ' . $username . ' updated weekly cash flow (' . $wcf_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_weekly_cash_flow_particulars
    # Purpose    : Update weekly cash flow particulars
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_weekly_cash_flow_particulars($details, $wcf_type, $wcf_loan_type, $monday, $tuesday, $wednesday, $thursday, $friday, $total, $particular_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblwcfparticulars SET DETAILS = :details, WCF_TYPE = :wcf_type, LOAN_WCF_TYPE = :wcf_loan_type, MONDAY = :monday, TUESDAY = :tuesday, WEDNESDAY = :wednesday, THURSDAY = :thursday, FRIDAY = :friday, TOTAL = :total, RECORD_LOG = :record_log WHERE PARTICULAR_ID = :particular_id');
            $sql->bindParam(':details', $details);
            $sql->bindParam(':wcf_type', $wcf_type);
            $sql->bindParam(':wcf_loan_type', $wcf_loan_type);
            $sql->bindParam(':monday', $monday);
            $sql->bindParam(':tuesday', $tuesday);
            $sql->bindParam(':wednesday', $wednesday);
            $sql->bindParam(':thursday', $thursday);
            $sql->bindParam(':friday', $friday);
            $sql->bindParam(':total', $total);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':particular_id', $particular_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Weekly Cash Flow Particulars', 'User ' . $username . ' updated weekly cash flow particulars (' . $particular_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_weekly_cash_flow_status
    # Purpose    : Update weekly cash flow status
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_weekly_cash_flow_status($status, $wcf_id, $employee_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');
            $systemdate = date('Y-m-d');
            $current_time = date('H:i:s');

            if($status == '1'){
                $sql = $this->db_connection->prepare('UPDATE tblwcf SET STATUS = :status, APPROVAL_DATE = :systemdate, APPROVAL_TIME = :current_time, APPROVAL_BY = :employee_id, RECORD_LOG = :record_log WHERE WCF_ID = :wcf_id');
                $sql->bindParam(':systemdate', $systemdate);
                $sql->bindParam(':current_time', $current_time);
                $sql->bindParam(':employee_id', $employee_id);
            }
            else{
                $sql = $this->db_connection->prepare('UPDATE tblwcf SET STATUS = :status, RECORD_LOG = :record_log WHERE WCF_ID = :wcf_id');
            }

            $sql->bindParam(':status', $status);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':wcf_id', $wcf_id);

            if($sql->execute()){
                if($status == 1){
                    $log_type = 'Approve Weekly Cash Flow';
                    $log = 'User ' . $username . ' approve weekly cash flow (' . $wcf_id . ')';
                }
                else if($status == 2){
                    $log_type = 'Lock Weekly Cash Flow';
                    $log = 'User ' . $username . ' locked weekly cash flow (' . $wcf_id . ')';
                }
                else{
                    $log_type = 'Unlock Weekly Cash Flow';
                    $log = 'User ' . $username . ' unlocked weekly cash flow (' . $wcf_id . ')';
                }

                $insert_user_log = $this->insert_logs($username, $log_type, $log);

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_ticket_status
    # Purpose    : Update ticket status
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_ticket_status($status, $ticket_id, $reason, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');
            $systemdate = date('Y-m-d');
            $current_time = date('H:i:s');

            if($status == '1'){
                $sql = $this->db_connection->prepare('UPDATE tblticket SET STATUS = :status, ACCEPTED_DATE = :systemdate, ACCEPTED_TIME = :current_time, RECORD_LOG = :record_log WHERE TICKET_ID = :ticket_id');
                $sql->bindParam(':systemdate', $systemdate);
                $sql->bindParam(':current_time', $current_time);
            }
            else if($status == '2'){
                $sql = $this->db_connection->prepare('UPDATE tblticket SET STATUS = :status, DECISION_DATE = :systemdate, DECISION_TIME = :current_time, REJECTION_REASON = :reason, RECORD_LOG = :record_log WHERE TICKET_ID = :ticket_id');
                $sql->bindParam(':systemdate', $systemdate);
                $sql->bindParam(':current_time', $current_time);
                $sql->bindParam(':reason', $reason);
            }
            else if($status == '3'){
                $sql = $this->db_connection->prepare('UPDATE tblticket SET STATUS = :status, DECISION_DATE = :systemdate, DECISION_TIME = :current_time, CANCELLATION_REASON = :reason, RECORD_LOG = :record_log WHERE TICKET_ID = :ticket_id');
                $sql->bindParam(':systemdate', $systemdate);
                $sql->bindParam(':current_time', $current_time);
                $sql->bindParam(':reason', $reason);
            }
            else if($status == '4'){
                $sql = $this->db_connection->prepare('UPDATE tblticket SET STATUS = :status, SOLVED_DATE = :systemdate, SOLVED_TIME = :current_time, RECORD_LOG = :record_log WHERE TICKET_ID = :ticket_id');
                $sql->bindParam(':systemdate', $systemdate);
                $sql->bindParam(':current_time', $current_time);
            }
            else if($status == '5'){
                $sql = $this->db_connection->prepare('UPDATE tblticket SET STATUS = :status, SOLVED_DATE = NULL, SOLVED_TIME = NULL, RECORD_LOG = :record_log WHERE TICKET_ID = :ticket_id');
            }
            else{
                $sql = $this->db_connection->prepare('UPDATE tblticket SET STATUS = :status, CLOSED_DATE = :systemdate, CLOSED_TIME = :current_time, RECORD_LOG = :record_log WHERE TICKET_ID = :ticket_id');
                $sql->bindParam(':systemdate', $systemdate);
                $sql->bindParam(':current_time', $current_time);
            }

            $sql->bindParam(':status', $status);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':ticket_id', $ticket_id);

            if($sql->execute()){
                if($status == '1'){
                    $log_type = 'Accept Ticket';
                    $log = 'User ' . $username . ' accept ticket (' . $ticket_id . ')';
                }
                else if($status == '2'){
                    $log_type = 'Reject Ticket';
                    $log = 'User ' . $username . ' locked ticket (' . $ticket_id . ')';
                }
                else if($status == '3'){
                    $log_type = 'Cancel Ticket';
                    $log = 'User ' . $username . ' cancel ticket (' . $ticket_id . ')';
                }
                else if($status == '4'){
                    $log_type = 'Tag Ticket As Solved';
                    $log = 'User ' . $username . ' tagged ticket as solved (' . $ticket_id . ')';
                }
                else if($status == '5'){
                    $log_type = 'Tag Ticket As Unsolved';
                    $log = 'User ' . $username . ' tagged ticket as unsolved (' . $ticket_id . ')';
                }
                else{
                    $log_type = 'Tag Ticket As Closed';
                    $log = 'User ' . $username . ' tagged ticket as closed (' . $ticket_id . ')';
                }

                $insert_user_log = $this->insert_logs($username, $log_type, $log);

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

	# -------------------------------------------------------------
    #
    # Name       : update_accept_status_on_open_ticket
    # Purpose    : Update accept status of all open ticket
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_accept_status_on_open_ticket($status, $department){
        if ($this->databaseConnection()) {
            $systemdate = date('Y-m-d');
            $current_time = date('H:i:s');
            $employee_id = '7';
            $date_time = $systemdate . ' ' . $current_time;

            $sql = $this->db_connection->prepare('UPDATE tblticket SET STATUS = :status, ASSIGNED_EMPLOYEE = :employee_id, ACCEPTED_DATE = :systemdate, ACCEPTED_TIME = :current_time WHERE DEPARTMENT = :department AND (CONVERT(CONCAT(AUTO_ACCEPT_DATE, " ", AUTO_ACCEPT_TIME), DATETIME) <= :date_time) AND STATUS = "0"');
            $sql->bindParam(':status', $status);
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':systemdate', $systemdate);
            $sql->bindParam(':current_time', $current_time);
            $sql->bindParam(':date_time', $date_time);
            $sql->bindParam(':department', $department);

            if($sql->execute()){
                return '1';
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

	 # -------------------------------------------------------------
    #
    # Name       : update_ticket_auto_close_reason
    # Purpose    : Update accept status of all open ticket
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_ticket_auto_close_reason($ticket_id, $auto_close_reason, $username){
        if ($this->databaseConnection()) {
            $record_log = 'CLS->' . $username . '->' . date('Y-m-d h:i:s');
            $systemdate = date('Y-m-d');
            $current_time = date('H:i:s');
            $employee_id = '7';
            $date_time = $systemdate . ' ' . $current_time;

            $sql = $this->db_connection->prepare('UPDATE tblticket SET AUTO_CLOSE_REASON = :auto_close_reason, RECORD_LOG = :record_log WHERE TICKET_ID = :ticket_id');
            $sql->bindParam(':auto_close_reason', $auto_close_reason);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':ticket_id', $ticket_id);

            if($sql->execute()){
                return '1';
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_ticket
    # Purpose    : Update ticket
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_ticket($ticket_department, $priority_person, $category, $subject, $description, $due_date, $ticket_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblticket SET CATEGORY = :category, ASSIGNED_DEPARTMENT = :ticket_department, ASSIGNED_EMPLOYEE = :priority_person, SUBJECT = :subject, DESCRIPTION = :description, DUE_DATE = :due_date, RECORD_LOG = :record_log WHERE TICKET_ID = :ticket_id');
            $sql->bindParam(':category', $category);
            $sql->bindParam(':ticket_department', $ticket_department);
            $sql->bindParam(':priority_person', $priority_person);
            $sql->bindParam(':subject', $subject);
            $sql->bindParam(':description', $description);
            $sql->bindParam(':due_date', $due_date);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':ticket_id', $ticket_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Ticket', 'User ' . $username . ' updated ticket (' . $ticket_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

	# -------------------------------------------------------------
    #
    # Name       : update_ticket_auto_accept_details
    # Purpose    : Update ticket auto accept details
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_ticket_auto_accept_details($ticket_id, $auto_accept_date, $auto_accept_time, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblticket SET AUTO_ACCEPT_DATE = :auto_accept_date, AUTO_ACCEPT_TIME = :auto_accept_time, RECORD_LOG = :record_log WHERE TICKET_ID = :ticket_id');
            $sql->bindParam(':auto_accept_date', $auto_accept_date);
            $sql->bindParam(':auto_accept_time', $auto_accept_time);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':ticket_id', $ticket_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Ticket', 'User ' . $username . ' updated ticket (' . $ticket_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

	# -------------------------------------------------------------
    #
    # Name       : update_ticket_auto_close_details
    # Purpose    : Update ticket auto close details
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_ticket_auto_close_details($ticket_id, $auto_close_date, $auto_close_time, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblticket SET AUTO_CLOSE_DATE = :auto_close_date, AUTO_CLOSE_TIME = :auto_close_time, RECORD_LOG = :record_log WHERE TICKET_ID = :ticket_id');
            $sql->bindParam(':auto_close_date', $auto_close_date);
            $sql->bindParam(':auto_close_time', $auto_close_time);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':ticket_id', $ticket_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Ticket', 'User ' . $username . ' updated ticket (' . $ticket_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_ticket_priority_person
    # Purpose    : Update ticket priority person
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_ticket_priority_person($employee_id, $ticket_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblticket SET ASSIGNED_EMPLOYEE = :employee_id, RECORD_LOG = :record_log WHERE TICKET_ID = :ticket_id');
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':ticket_id', $ticket_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Ticket Assignment', 'User ' . $username . ' updated ticket assignment (' . $ticket_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_ticket_adjustment_status
    # Purpose    : Update ticket adjustment status
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_ticket_adjustment_status($status, $adjustment_id, $employee_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');
            $systemdate = date('Y-m-d');
            $current_time = date('H:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblticketadjustment SET STATUS = :status, DECISION_DATE = :systemdate, DECISION_TIME = :current_time, DECISION_BY = :employee_id, RECORD_LOG = :record_log WHERE ADJUSTMENT_ID = :adjustment_id');
            $sql->bindParam(':status', $status);
            $sql->bindParam(':systemdate', $systemdate);
            $sql->bindParam(':current_time', $current_time);
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':adjustment_id', $adjustment_id);

            if($sql->execute()){
                if($status == 1){
                    $log_type = 'Approve Ticket Adjustment';
                    $log = 'User ' . $username . ' approve ticket adjustment (' . $adjustment_id . ')';
                }
                else if($status == 2){
                    $log_type = 'Reject Ticket Adjustment';
                    $log = 'User ' . $username . ' rejected ticket adjustment (' . $adjustment_id . ')';
                }
                else{
                    $log_type = 'Cancel Ticket Adjustment';
                    $log = 'User ' . $username . ' cancelled ticket adjustment (' . $adjustment_id . ')';
                }

                $insert_user_log = $this->insert_logs($username, $log_type, $log);

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_ticket_adjustment
    # Purpose    : Update ticket adjustment
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_ticket_adjustment($priority_person, $category, $subject, $description, $priority, $due_date, $due_time, $reason, $adjustment_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblticketadjustment SET ASSIGNED_EMPLOYEE_ADJ = :priority_person, CATEGORY_ADJ = :category, SUBJECT_ADJ = :subject, DESCRIPTION_ADJ = :description, PRIORITY_ADJ = :priority, DUE_DATE_ADJ = :due_date, DUE_TIME_ADJ = :due_time, REASON = :reason, RECORD_LOG = :record_log WHERE ADJUSTMENT_ID = :adjustment_id');
            $sql->bindParam(':priority_person', $priority_person);
            $sql->bindParam(':category', $category);
            $sql->bindParam(':subject', $subject);
            $sql->bindParam(':description', $description);
            $sql->bindParam(':priority', $priority);
            $sql->bindParam(':due_date', $due_date);
            $sql->bindParam(':due_time', $due_time);
            $sql->bindParam(':reason', $reason);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':adjustment_id', $adjustment_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Ticket Adjustment', 'User ' . $username . ' updated ticket adjustment (' . $adjustment_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

     # -------------------------------------------------------------
    #
    # Name       : update_ticket_details
    # Purpose    : Update ticket details
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_ticket_details($adjustment_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $ticket_adjustment_details = $this->get_data_details_one_parameter('ticket adjustment', $adjustment_id);
            $ticket_id = $ticket_adjustment_details[0]['TICKET_ID'];
            $due_date_adj = $ticket_adjustment_details[0]['DUE_DATE_ADJ'];
            $due_time_adj = $ticket_adjustment_details[0]['DUE_TIME_ADJ'];
            $priority_adj = $ticket_adjustment_details[0]['PRIORITY_ADJ'];
            $category_adj = $ticket_adjustment_details[0]['CATEGORY_ADJ'];
            $subject_adj = $ticket_adjustment_details[0]['SUBJECT_ADJ'];
            $description_adj = $ticket_adjustment_details[0]['DESCRIPTION_ADJ'];
            $assigned_employee_adj = $ticket_adjustment_details[0]['ASSIGNED_EMPLOYEE_ADJ'];

            $sql = $this->db_connection->prepare('UPDATE tblticket SET ASSIGNED_EMPLOYEE = :assigned_employee_adj, CATEGORY = :category_adj, SUBJECT = :subject_adj, DESCRIPTION = :description_adj, PRIORITY = :priority_adj, DUE_DATE = :due_date_adj, DUE_TIME = :due_time_adj, RECORD_LOG = :record_log WHERE TICKET_ID = :ticket_id');
            $sql->bindParam(':assigned_employee_adj', $assigned_employee_adj);
            $sql->bindParam(':category_adj', $category_adj);
            $sql->bindParam(':subject_adj', $subject_adj);
            $sql->bindParam(':description_adj', $description_adj);
            $sql->bindParam(':priority_adj', $priority_adj);
            $sql->bindParam(':due_date_adj', $due_date_adj);
            $sql->bindParam(':due_time_adj', $due_time_adj);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':ticket_id', $ticket_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Ticket Detail Adjustment', 'User ' . $username . ' updated ticket details adjustment (' . $ticket_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_transmittal_parameter_number
    # Purpose    : Update transmittal parameter number
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_transmittal_parameter_number($username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('SELECT MAX(TRANSMITTAL_ID) AS TRANSMITTAL_ID FROM tbltransmittal');

            if($sql->execute()){
                $row = $sql->fetch();

                # Update system parameter value
                $update_system_parameter_value = $this->update_system_parameter_value($row['TRANSMITTAL_ID'], '28', $username);

                if($update_system_parameter_value == '1'){
                    return '1';
                }
                else{
                    return $update_system_parameter_value;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_document_management_parameter_number
    # Purpose    : Update document management parameter number
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_document_management_parameter_number($username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('SELECT MAX(DOCUMENT_ID) AS DOCUMENT_ID FROM tbldocument');

            if($sql->execute()){
                $row = $sql->fetch();

                # Update system parameter value
                $update_system_parameter_value = $this->update_system_parameter_value($row['DOCUMENT_ID'], '27', $username);

                if($update_system_parameter_value){
                    return '1';
                }
                else{
                    return $update_system_parameter_value;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_all_notification_status
    # Purpose    : Update all notification status
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_all_notification_status($status, $employee_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblnotifications SET STATUS = :status, RECORD_LOG = :record_log WHERE NOTIFICATION_TO = :employee_id');
            $sql->bindParam(':status', $status);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':employee_id', $employee_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Notification Status', 'User ' . $username . ' updated all notification status.');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_meeting
    # Purpose    : Update meeting
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_meeting($meeting_title, $meeting_type, $meeting_date, $start_time, $end_time, $previous_meeting, $presider, $noted_by, $meeting_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblmeeting SET TITLE = :meeting_title, MEETING_DATE = :meeting_date, START_TIME = :start_time, END_TIME = :end_time, MEETING_TYPE = :meeting_type, PREVIOUS_MEETING = :previous_meeting, PRESIDER = :presider, NOTED_BY = :noted_by, RECORD_LOG = :record_log WHERE MEETING_ID = :meeting_id');
            $sql->bindParam(':meeting_title', $meeting_title);
            $sql->bindParam(':meeting_date', $meeting_date);
            $sql->bindParam(':start_time', $start_time);
            $sql->bindParam(':end_time', $end_time);
            $sql->bindParam(':meeting_type', $meeting_type);
            $sql->bindParam(':previous_meeting', $previous_meeting);
            $sql->bindParam(':presider', $presider);
            $sql->bindParam(':noted_by', $noted_by);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':meeting_id', $meeting_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Meeting', 'User ' . $username . ' updated meeting (' . $meeting_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_meeting_status
    # Purpose    : Update meeting status
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_meeting_status($status, $meeting_id, $employee_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');
            $systemdate = date('Y-m-d');
            $current_time = date('H:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblmeeting SET STATUS = :status, DECISION_DATE = :systemdate, DECISION_TIME = :current_time, DECISION_BY = :employee_id, RECORD_LOG = :record_log WHERE MEETING_ID = :meeting_id');
            $sql->bindParam(':status', $status);
            $sql->bindParam(':systemdate', $systemdate);
            $sql->bindParam(':current_time', $current_time);
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':meeting_id', $meeting_id);

            if($sql->execute()){
                if($status == 1){
                    $log_type = 'Approve Meeting';
                    $log = 'User ' . $username . ' approved the meeting (' . $meeting_id . ')';
                }
                else{
                    $log_type = 'Pending Meeting';
                    $log = 'User ' . $username . ' updated the meeting to pending (' . $meeting_id . ')';
                }

                $insert_user_log = $this->insert_logs($username, $log_type, $log);

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_meeting_task
    # Purpose    : Update meeting task
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_meeting_task($agenda, $task, $employee, $department, $task_status, $due_date_type, $due_date, $new_due_date, $task_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');
            $str_employee = json_encode($employee);




            $sql = $this->db_connection->prepare('UPDATE tblmeetingtask SET AGENDA = :agenda, TASK = :task, EMPLOYEE_ID = :employee, STATUS = :task_status, DUE_DATE_TYPE = :due_date_type, DUE_DATE = :due_date, NEW_DUE_DATE = :new_due_date, RECORD_LOG = :record_log WHERE TASK_ID = :task_id');
            $sql->bindParam(':agenda', $agenda);
            $sql->bindParam(':task', $task);
            $sql->bindParam(':employee', $str_employee);
           // $sql->bindParam(':department', $department);
            $sql->bindParam(':task_status', $task_status);
            $sql->bindParam(':due_date_type', $due_date_type);
            $sql->bindParam(':due_date', $due_date);
            $sql->bindParam(':new_due_date', $new_due_date);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':task_id', $task_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Meeting Task', 'User ' . $username . ' updated meeting task (' . $task_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_meeting_other_matters
    # Purpose    : Update meeting other matters
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_meeting_other_matters($other_matters, $other_matters_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblmeetingothermatters SET OTHER_MATTERS = :other_matters, RECORD_LOG = :record_log WHERE OTHER_MATTERS_ID = :other_matters_id');
            $sql->bindParam(':other_matters', $other_matters);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':other_matters_id', $other_matters_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Meeting Other Matters', 'User ' . $username . ' updated meeting other matters (' . $other_matters_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }



    # -------------------------------------------------------------
    public function update_overtime($overtimetitle, $holiday_type, $overtime_date, $start_time, $end_time, $reason, $overtime_id, $username){
    if ($this->databaseConnection()) {
        error_log("Update Overtime function called with ID: " . $overtime_id);

        $sql = $this->db_connection->prepare('UPDATE tblovertime SET TITLE = :overtimetitle,  HOLIDAY_TYPE = :holidaytype, OVERTIME_DATE = :overtimedate, START_TIME = :start_time, END_TIME = :end_time, REASON = :reason WHERE OVERTIME_ID = :overtime_id');

        $sql->bindParam(':overtimetitle', $overtimetitle);
        $sql->bindParam(':holidaytype', $holiday_type);
        $sql->bindParam(':overtimedate', $overtime_date);
        $sql->bindParam(':start_time', $start_time);
        $sql->bindParam(':end_time', $end_time);
                $sql->bindParam(':reason', $reason);

        $sql->bindParam(':overtime_id', $overtime_id);

        if($sql->execute()){
            error_log("Update successful for ID: " . $overtime_id);
            return json_encode(["status" => "success", "message" => "Updated"]);
        } else {
            error_log("SQL Error: " . json_encode($sql->errorInfo()));
            return json_encode(["status" => "error", "message" => $sql->errorInfo()]);
        }
    } else {
        return json_encode(["status" => "error", "message" => "Database connection failed."]);
    }
}


 public function update_overtime_status($status, $overtime_id, $reason_cancellation, $username){
    if ($this->databaseConnection()) {
        $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');
        $systemdate = date('Y-m-d');
        $current_time = date('H:i:s');

        if($status == '2'){
            $sql = $this->db_connection->prepare('UPDATE tblovertime SET STATUS = :status, DECISION_DATE = :systemdate, DECISION_TIME = :current_time, DECISION_BY = :username, RECORD_LOG = :record_log WHERE OVERTIME_ID = :overtime_id');
            $sql->bindParam(':username', $username);
            $sql->bindParam(':systemdate', $systemdate);
            $sql->bindParam(':current_time', $current_time);
            $sql->bindParam(':record_log', $record_log);
        }
        else if($status == '5' || $status == '6'){
            $sql = $this->db_connection->prepare('UPDATE tblovertime SET STATUS = :status, RECORD_LOG = :record_log WHERE OVERTIME_ID = :overtime_id');
            $sql->bindParam(':record_log', $record_log);
        }
        else if($status == '3'){
            $sql = $this->db_connection->prepare('UPDATE tblovertime SET STATUS = :status, DECISION_DATE = :systemdate, DECISION_TIME = :current_time, DECISION_BY = :username, REJECTION_REASON = :reason_cancellation, RECORD_LOG = :record_log WHERE OVERTIME_ID = :overtime_id');
            $sql->bindParam(':reason_cancellation', $reason_cancellation);
            $sql->bindParam(':username', $username);
            $sql->bindParam(':systemdate', $systemdate);
            $sql->bindParam(':current_time', $current_time);
            $sql->bindParam(':record_log', $record_log);
        }
        else if($status == '4'){
            $sql = $this->db_connection->prepare('UPDATE tblovertime SET STATUS = :status, DECISION_DATE = :systemdate, DECISION_TIME = :current_time, DECISION_BY = :username, CANCELLATION_REASON = :reason_cancellation, RECORD_LOG = :record_log WHERE OVERTIME_ID = :overtime_id');
            $sql->bindParam(':reason_cancellation', $reason_cancellation);
            $sql->bindParam(':username', $username);
            $sql->bindParam(':systemdate', $systemdate);
            $sql->bindParam(':current_time', $current_time);
            $sql->bindParam(':record_log', $record_log);
        }
        else{
            $sql = $this->db_connection->prepare('UPDATE tblovertime SET STATUS = :status, RECORD_LOG = :record_log WHERE OVERTIME_ID = :overtime_id');
            $sql->bindParam(':record_log', $record_log);
        }

        $sql->bindParam(':status', $status);
        $sql->bindParam(':overtime_id', $overtime_id);

        if($sql->execute()){
            if($status == '1'){
                $log_type = 'Recommend Overtime';
                $log = 'User ' . $username . ' recommend overtime (' . $overtime_id . ')';
            }
            else if($status == '2'){
                $log_type = 'Approved Overtime';
                $log = 'User ' . $username . ' approved overtime (' . $overtime_id . ')';
            }
            else if($status == '3'){
                $log_type = 'Reject Overtime';
                $log = 'User ' . $username . ' rejected overtime (' . $overtime_id . ')';
            }
            else{
                $log_type = 'Cancelled Overtime';
                $log = 'User ' . $username . ' cancelled overtime (' . $overtime_id . ')';
            }

            // Insert log - THIS IS THE KEY FIX
            $insert_user_log = $this->insert_logs($username, $log_type, $log);

            // Return '1' on success - THIS IS THE KEY FIX
            return '1';
        }
        else{
            return $sql->errorInfo()[2];
        }
    }

    // Return error if database connection fails
    return 'Database connection error';
}

        public function delete_overtime($overtime_id, $username){
        if ($this->databaseConnection()) {

            $sql = $this->db_connection->prepare('DELETE FROM tblovertime WHERE OVERTIME_ID = :overtime_id');
            $sql->bindParam(':overtime_id', $overtime_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete Overtime', 'User ' . $username . ' deleted Overtime (' . $overtime_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_training_status
    # Purpose    : Update training status
    #
    # Returns    : String
    #
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_training
    # Purpose    : Update training
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_training($training_title, $description, $training_type, $training_date, $start_time, $end_time, $training_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tbltraining SET TITLE = :training_title, DETAILS = :description, TRAINING_TYPE = :training_type, TRAINING_DATE = :training_date, START_TIME = :start_time, END_TIME = :end_time, RECORD_LOG = :record_log WHERE TRAINING_ID = :training_id');
            $sql->bindParam(':training_title', $training_title);
            $sql->bindParam(':description', $description);
            $sql->bindParam(':training_type', $training_type);
            $sql->bindParam(':training_date', $training_date);
            $sql->bindParam(':start_time', $start_time);
            $sql->bindParam(':end_time', $end_time);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':training_id', $training_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Training', 'User ' . $username . ' updated training (' . $training_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }



    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_training_status
    # Purpose    : Update training status
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_training_status($status, $training_id, $reason, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');
            $systemdate = date('Y-m-d');
            $current_time = date('H:i:s');

            if($status == '2'){
                $sql = $this->db_connection->prepare('UPDATE tbltraining SET STATUS = :status, DECISION_DATE = :systemdate, DECISION_TIME = :current_time, DECISION_BY = :username, RECORD_LOG = :record_log WHERE TRAINING_ID = :training_id');
                $sql->bindParam(':username', $username);
                $sql->bindParam(':systemdate', $systemdate);
                $sql->bindParam(':current_time', $current_time);
            }
            else if($status == '5' || $status == '6'){
                $sql = $this->db_connection->prepare('UPDATE tbltraining SET STATUS = :status, RECORD_LOG = :record_log WHERE TRAINING_ID = :training_id');
            }
            else if($status == '3'){
                $sql = $this->db_connection->prepare('UPDATE tbltraining SET STATUS = :status, DECISION_DATE = :systemdate, DECISION_TIME = :current_time, DECISION_BY = :username, REJECTION_REASON = :reason, RECORD_LOG = :record_log WHERE TRAINING_ID = :training_id');
                $sql->bindParam(':reason', $reason);
                $sql->bindParam(':username', $username);
                $sql->bindParam(':systemdate', $systemdate);
                $sql->bindParam(':current_time', $current_time);
                $sql->bindParam(':reason', $reason);
            }
            else if($status == '4'){
                $sql = $this->db_connection->prepare('UPDATE tbltraining SET STATUS = :status, DECISION_DATE = :systemdate, DECISION_TIME = :current_time, DECISION_BY = :username, CANCELLATION_REASON = :reason, RECORD_LOG = :record_log WHERE TRAINING_ID = :training_id');
                $sql->bindParam(':reason', $reason);
                $sql->bindParam(':username', $username);
                $sql->bindParam(':systemdate', $systemdate);
                $sql->bindParam(':current_time', $current_time);
                $sql->bindParam(':reason', $reason);
            }
            else{
                $sql = $this->db_connection->prepare('UPDATE tbltraining SET STATUS = :status, RECORD_LOG = :record_log WHERE TRAINING_ID = :training_id');
            }

            $sql->bindParam(':status', $status);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':training_id', $training_id);

            if($sql->execute()){
                if($status == '1'){
                    $log_type = 'Recommend Training';
                    $log = 'User ' . $username . ' recommend training (' . $training_id . ')';
                }
                else if($status == '2'){
                    $log_type = 'Approved Training';
                    $log = 'User ' . $username . ' approved training (' . $training_id . ')';
                }
                else if($status == '3'){
                    $log_type = 'Reject Training';
                    $log = 'User ' . $username . ' rejected training (' . $training_id . ')';
                }
                else if($status == '5'){
                    $log_type = 'Lock Training';
                    $log = 'User ' . $username . ' locked training (' . $training_id . ')';
                }
                else if($status == '6'){
                    $log_type = 'Unlock Training';
                    $log = 'User ' . $username . ' unlocked training (' . $training_id . ')';
                }
                else{
                    $log_type = 'Cancelled Training';
                    $log = 'User ' . $username . ' cancelled training (' . $training_id . ')';
                }

                $insert_user_log = $this->insert_logs($username, $log_type, $log);

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_training_report
    # Purpose    : Update training report
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_training_report($learnings, $comments, $training_id, $employee_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tbltrainingreport SET LEARNINGS = :learnings, COMMENTS = :comments, RECORD_LOG = :record_log WHERE TRAINING_ID = :training_id AND EMPLOYEE_ID = :employee_id');
            $sql->bindParam(':learnings', $learnings);
            $sql->bindParam(':comments', $comments);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':training_id', $training_id);
            $sql->bindParam(':employee_id', $employee_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Training Report', 'User ' . $username . ' updated training report (' . $training_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

	# -------------------------------------------------------------
    #
    # Name       : update_car_search_parameter
    # Purpose    : Update car search pameter
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_car_search_parameter($parameter_value, $category_type, $parameter_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblcarparameter SET CATEGORY_TYPE = :category_type, PARAMETER_VALUE = :parameter_value, RECORD_LOG = :record_log WHERE PARAMETER_ID = :parameter_id');
            $sql->bindParam(':category_type', $category_type);
            $sql->bindParam(':parameter_value', $parameter_value);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':parameter_id', $parameter_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Car Search Parameter', 'User ' . $username . ' updated car search parameter (' . $parameter_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_car_search_parameter_with_code
    # Purpose    : Update car search pameter with parameter code
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_car_search_parameter_with_code($parameter_value, $category_type, $parameter_code, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblcarparameter SET CATEGORY_TYPE = :category_type, PARAMETER_VALUE = :parameter_value, RECORD_LOG = :record_log WHERE PARAMETER_CODE = :parameter_code');
            $sql->bindParam(':category_type', $category_type);
            $sql->bindParam(':parameter_value', $parameter_value);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':parameter_code', $parameter_code);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Car Search Parameter', 'User ' . $username . ' updated car search parameter (' . $parameter_code . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_price_index_item
    # Purpose    : Update price index item
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_price_index_item($brand, $model, $variant, $engine_size, $gas_type, $transmission, $drive_train, $body_type, $seating_capacity, $camshaft_profile, $color_type, $aircon_type, $other_information, $item_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblpriceindexitem SET BRAND = :brand, MODEL = :model, VARIANT = :variant, ENGINE_SIZE = :engine_size, GAS_TYPE = :gas_type, TRANSMISSION = :transmission, DRIVE_TRAIN = :drive_train, BODY_TYPE = :body_type, SEATING_CAPACITY = :seating_capacity, CAMSHAFT_PROFILE = :camshaft_profile, COLOR_TYPE = :color_type, AIRCON_TYPE = :aircon_type, OTHER_INFORMATION = :other_information, RECORD_LOG = :record_log WHERE ITEM_ID = :item_id');
            $sql->bindParam(':brand', $brand);
            $sql->bindParam(':model', $model);
            $sql->bindParam(':variant', $variant);
            $sql->bindParam(':engine_size', $engine_size);
            $sql->bindParam(':gas_type', $gas_type);
            $sql->bindParam(':transmission', $transmission);
            $sql->bindParam(':drive_train', $drive_train);
            $sql->bindParam(':body_type', $body_type);
            $sql->bindParam(':seating_capacity', $seating_capacity);
            $sql->bindParam(':camshaft_profile', $camshaft_profile);
            $sql->bindParam(':color_type', $color_type);
            $sql->bindParam(':aircon_type', $aircon_type);
            $sql->bindParam(':other_information', $other_information);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':item_id', $item_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Price Index Item', 'User ' . $username . ' updated price index item (' . $item_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_price_index_amount
    # Purpose    : Update price index amount
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_price_index_amount($price_index_item, $year, $amount, $systemdate, $current_time, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblpriceindexitemvalue SET ITEM_VALUE = :amount, LAST_UPDATE_DATE = :systemdate, LAST_UPDATE_TIME = :current_time, LAST_UPDATE_BY = :username, RECORD_LOG = :record_log WHERE ITEM_ID = :price_index_item AND YEAR_MODEL = :year');
            $sql->bindParam(':amount', $amount);
            $sql->bindParam(':systemdate', $systemdate);
            $sql->bindParam(':current_time', $current_time);
            $sql->bindParam(':username', $username);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':price_index_item', $price_index_item);
            $sql->bindParam(':year', $year);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Price Index Value', 'User ' . $username . ' updated price index value (' . $price_index_item . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : update_price_index_amount_adjustment_status
    # Purpose    : Update price index amount adjustment status
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_price_index_amount_adjustment_status($status, $remarks, $adjustment_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');
            $systemdate = date('Y-m-d');
            $current_time = date('H:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblpriceindexvalueadustment SET STATUS = :status, DECISION_BY = :username, DECISION_REASON = :remarks, DECISION_DATE = :systemdate, DECISION_TIME = :current_time, RECORD_LOG = :record_log WHERE ADJUSTMENT_ID = :adjustment_id');
            $sql->bindParam(':status', $status);
            $sql->bindParam(':username', $username);
            $sql->bindParam(':remarks', $remarks);
            $sql->bindParam(':systemdate', $systemdate);
            $sql->bindParam(':current_time', $current_time);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':adjustment_id', $adjustment_id);

            if($sql->execute()){
                if($status == 1){
                    $log_type = 'Approve Price Index Amount Adjustment';
                    $log = 'User ' . $username . ' approve price index amount adjustment (' . $adjustment_id . ')';
                }
                if($status == 2){
                    $log_type = 'Reject Price Index Amount Adjustment';
                    $log = 'User ' . $username . ' rejected price index amount adjustment (' . $adjustment_id . ')';
                }
                else{
                    $log_type = 'Cancel Price Index Amount Adjustment';
                    $log = 'User ' . $username . ' cancelled price index amount adjustment (' . $adjustment_id . ')';
                }

                $insert_user_log = $this->insert_logs($username, $log_type, $log);

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #   Insert data
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_logs
    # Purpose    : Insert activity logs
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_logs($username, $log_type, $log){
        if ($this->databaseConnection()) {
            $log_date = date('Y-m-d');
            $log_time = date('h:i:s');

            $sql = $this->db_connection->prepare('INSERT INTO tbluserlogs (USERNAME, LOG_TYPE, LOG, LOG_DATE, LOG_TIME) VALUES (:username, :log_type, :log, :log_date, :log_time)');
            $sql->bindParam(':username', $username);
            $sql->bindParam(':log_type', $log_type);
            $sql->bindParam(':log', $log);
            $sql->bindParam(':log_date', $log_date);
            $sql->bindParam(':log_time', $log_time);

            if($sql->execute()){
                return '1';
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_page
    # Purpose    : Insert page
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_page($page_name, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            # Get system parameter id
            $system_parameter = $this->get_system_parameter('2', 1);
            $param_num = $system_parameter[0]['PARAMNUM'];
            $id = $system_parameter[0]['ID'];

            $sql = $this->db_connection->prepare('INSERT INTO tblpage (PAGE_ID, PAGE_NAME, RECORD_LOG) VALUES (:id, :page_name, :record_log)');
            $sql->bindParam(':id', $id);
            $sql->bindParam(':page_name', $page_name);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                # Update system parameter value
                $update_system_parameter_value = $this->update_system_parameter_value($param_num, '2', $username);

                if($update_system_parameter_value){
                    $insert_user_log = $this->insert_logs($username, 'Insert Page', 'User ' . $username . ' inserted page (' . $id . ').');

                    if($insert_user_log == '1'){
                        return '1';
                    }
                    else{
                        return $insert_user_log;
                    }
                }
                else{
                    return $update_system_parameter_value;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_permission
    # Purpose    : Insert permissions
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_permission($page_id, $permission_desc, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            # Get system parameter id
            $system_parameter = $this->get_system_parameter('3', 1);
            $paramnum = $system_parameter[0]['PARAMNUM'];
            $id = $system_parameter[0]['ID'];

            $sql = $this->db_connection->prepare('INSERT INTO tblpermission (PERMISSION_ID, PAGE_ID, PERMISSION_DESC, RECORD_LOG) VALUES (:id, :page_id, :permission_desc, :record_log)');
            $sql->bindParam(':id', $id);
            $sql->bindParam(':page_id', $page_id);
            $sql->bindParam(':permission_desc', $permission_desc);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                # Update system parameter value
                $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '3', $username);

                if($update_system_parameter_value){
                    $insert_user_log = $this->insert_logs($username, 'Insert Permission', 'User ' . $username . ' inserted permission (' . $id . ').');

                    if($insert_user_log == '1'){
                        return '1';
                    }
                    else{
                        return $insert_user_log;
                    }
                }
                else{
                    return $update_system_parameter_value;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_system_parameter
    # Purpose    : Insert system parameter
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_system_parameter($description, $extension, $number, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            # Get system parameter id
            $system_parameter = $this->get_system_parameter('1', 1);
            $paramnum = $system_parameter[0]['PARAMNUM'];
            $id = $system_parameter[0]['ID'];

            $sql = $this->db_connection->prepare('INSERT INTO tblsystemparameters (PARAMETER_ID, PARAMETER_DESC, PARAMETER_EXTENSION, PARAMETER_NUMBER, RECORD_LOG) VALUES (:id, :description, :extension, :number, :record_log)');
            $sql->bindParam(':id', $id);
            $sql->bindParam(':description', $description);
            $sql->bindParam(':extension', $extension);
            $sql->bindParam(':number', $number);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                # Update system parameter value
                $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '1', $username);

                if($update_system_parameter_value){
                    $insert_user_log = $this->insert_logs($username, 'Insert System Parameter', 'User ' . $username . ' inserted system parameter (' . $id . ').');

                    if($insert_user_log == '1'){
                        return '1';
                    }
                    else{
                        return $insert_user_log;
                    }
                }
                else{
                    return $update_system_parameter_value;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_system_code
    # Purpose    : Insert system code
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_system_code($system_type, $system_code, $system_desc, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('INSERT INTO tblsystemcode(SYSTEM_TYPE, SYSTEM_CODE, SYSTEM_DESC, RECORD_LOG) VALUES (:system_type, :system_code, :system_desc, :record_log)');
            $sql->bindParam(':system_type', $system_type);
            $sql->bindParam(':system_code', $system_code);
            $sql->bindParam(':system_desc', $system_desc);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Insert System Code', 'User ' . $username . ' inserted system code (' . $system_code . ') with system type('. $system_type .').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_role
    # Purpose    : Insert role
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_role($role_desc, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');
            $active = 0;

            # Get system parameter id
            $system_parameter = $this->get_system_parameter('4', 1);
            $paramnum = $system_parameter[0]['PARAMNUM'];
            $id = $system_parameter[0]['ID'];

            $sql = $this->db_connection->prepare('INSERT INTO tblrole (ROLE_ID, ROLE_DESC, ACTIVE, RECORD_LOG) VALUES (:id, :role_desc, :active, :record_log)');
            $sql->bindParam(':id', $id);
            $sql->bindParam(':role_desc', $role_desc);
            $sql->bindParam(':active', $active);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                # Update system parameter value
                $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '4', $username);

                if($update_system_parameter_value){
                    $insert_user_log = $this->insert_logs($username, 'Insert Role', 'User ' . $username . ' inserted role (' . $id . ').');

                    if($insert_user_log == '1'){
                        return '1';
                    }
                    else{
                        return $insert_user_log;
                    }
                }
                else{
                    return $update_system_parameter_value;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_permission_role
    # Purpose    : Insert role permission
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_permission_role($role_id, $permission_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('INSERT INTO tblrolepermission (ROLE_ID, PERMISSION_ID, RECORD_LOG) VALUES (:role_id, :permission_id, :record_log)');
            $sql->bindParam(':role_id', $role_id);
            $sql->bindParam(':permission_id', $permission_id);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                return '1';
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_user_role
    # Purpose    : Insert role user
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_user_role($role_id, $user, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('INSERT INTO tblroleuser (ROLE_ID, USERNAME, RECORD_LOG) VALUES (:role_id, :user, :record_log)');
            $sql->bindParam(':role_id', $role_id);
            $sql->bindParam(':user', $user);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                return '1';
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_company_settings
    # Purpose    : Insert company settings
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_company_settings($company_id, $company_name, $email, $phone, $telephone, $website, $address, $start_time, $end_time, $lunch_start_time, $lunch_end_time, $half_day, $working_days_per_month, $late, $working_day_total, $max_clock_in, $health_declaration, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('INSERT INTO tblcompany (COMPANY_ID, COMPANY_NAME, EMAIL, PHONE, TELEPHONE, WEBSITE, ADDRESS, WORKING_DAYS, START_WORKING_HOURS, END_WORKING_HOURS, START_LUNCH_BREAK, END_LUNCH_BREAK, MONTHLY_WORKING_DAYS, HALF_DAY_MARK, LATE_MARK, MAX_CLOCK_IN, HEALTH_DECLARATION, RECORD_LOG) VALUES (:company_id, :company_name, :email, :phone, :telephone, :website, :address, :working_day_total, :start_time, :end_time, :lunch_start_time, :lunch_end_time, :working_days_per_month, :half_day, :late, :max_clock_in, :health_declaration, :record_log)');
            $sql->bindParam(':company_id', $company_id);
            $sql->bindParam(':company_name', $company_name);
            $sql->bindParam(':email', $email);
            $sql->bindParam(':phone', $phone);
            $sql->bindParam(':telephone', $telephone);
            $sql->bindParam(':website', $website);
            $sql->bindParam(':address', $address);
            $sql->bindParam(':working_day_total', $working_day_total);
            $sql->bindParam(':start_time', $start_time);
            $sql->bindParam(':end_time', $end_time);
            $sql->bindParam(':lunch_start_time', $lunch_start_time);
            $sql->bindParam(':lunch_end_time', $lunch_end_time);
            $sql->bindParam(':working_days_per_month', $working_days_per_month);
            $sql->bindParam(':half_day', $half_day);
            $sql->bindParam(':late', $late);
            $sql->bindParam(':max_clock_in', $max_clock_in);
            $sql->bindParam(':health_declaration', $health_declaration);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Insert Company Settings', 'User ' . $username . ' inserted company settings (' . $company_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_application_settings
    # Purpose    : Insert application settings
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_application_settings($settings_id, $currency, $timezone, $dateformat, $timeformat, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('INSERT INTO tblapplicationsettings (SETTINGS_ID, CURRENCY, TIMEZONE, DATE_FORMAT, TIME_FORMAT, RECORD_LOG) VALUES (:settings_id, :currency, :timezone, :dateformat, :timeformat, :record_log)');
            $sql->bindParam(':settings_id', $settings_id);
            $sql->bindParam(':currency', $currency);
            $sql->bindParam(':timezone', $timezone);
            $sql->bindParam(':dateformat', $dateformat);
            $sql->bindParam(':timeformat', $timeformat);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Insert Application Settings', 'User ' . $username . ' inserted application settings (' . $settings_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_employee
    # Purpose    : Insert employee
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_employee($profile_image_file_tmp_name, $profile_image_file_actual_ext, $id_number, $first_name, $middle_name, $last_name, $suffix, $birthday, $employment_type, $employment_status, $join_date, $permanent_date, $end_of_contract, $exit_date, $email, $phone, $telephone, $department, $branch, $designation, $position, $gender, $civil_status, $address, $payroll_period, $basic_pay, $daily_rate, $hourly_rate, $minute_rate, $sss, $tin, $philhealth, $pagibig, $driver_license, $account_name, $account_number, $superior, $subordinates, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');
            $error = '';

            # Get system parameter id
            $system_parameter = $this->get_system_parameter('34', 1);
            $paramnum = $system_parameter[0]['PARAMNUM'];
            $id = $system_parameter[0]['ID'];

            $sql = $this->db_connection->prepare('INSERT INTO tblemployeeprofile (EMPLOYEE_ID, ID_NUMBER, FIRST_NAME, LAST_NAME, MIDDLE_NAME, SUFFIX, BIRTHDAY, EMPLOYEMENT_TYPE, EMPLOYMENT_STATUS, JOIN_DATE, PERMANENT_DATE, END_OF_CONTRACT, EXIT_DATE, EMAIL, PHONE, TELEPHONE, DEPARTMENT, BRANCH, DESIGNATION, POSITION, GENDER, CIVIL_STATUS, ADDRESS, PAYROLL_PERIOD, BASIC_PAY, DAILY_RATE, HOURLY_RATE, MINUTE_RATE, SSS, TIN, PHILHEALTH, PAGIBIG, DRIVERS_LICENSE, ACCOUNT_NAME, ACCOUNT_NUMBER, RECORD_LOG) VALUES (:id, :id_number, :first_name, :last_name, :middle_name, :suffix, :birthday, :employment_type, :employment_status, :join_date, :permanent_date, :end_of_contract, :exit_date, :email, :phone, :telephone, :department, :branch, :designation, :position, :gender, :civil_status, :address, :payroll_period, :basic_pay, :daily_rate, :hourly_rate, :minute_rate, :sss, :tin, :philhealth, :pagibig, :driver_license, :account_name, :account_number, :record_log)');
            $sql->bindParam(':id', $id);
            $sql->bindParam(':id_number', $id_number);
            $sql->bindParam(':first_name', $first_name);
            $sql->bindParam(':last_name', $last_name);
            $sql->bindParam(':middle_name', $middle_name);
            $sql->bindParam(':suffix', $suffix);
            $sql->bindParam(':birthday', $birthday);
            $sql->bindParam(':employment_type', $employment_type);
            $sql->bindParam(':employment_status', $employment_status);
            $sql->bindParam(':join_date', $join_date);
            $sql->bindParam(':permanent_date', $permanent_date);
            $sql->bindParam(':end_of_contract', $end_of_contract);
            $sql->bindParam(':exit_date', $exit_date);
            $sql->bindParam(':email', $email);
            $sql->bindParam(':phone', $phone);
            $sql->bindParam(':telephone', $telephone);
            $sql->bindParam(':department', $department);
            $sql->bindParam(':branch', $branch);
            $sql->bindParam(':designation', $designation);
            $sql->bindParam(':position', $position);
            $sql->bindParam(':gender', $gender);
            $sql->bindParam(':civil_status', $civil_status);
            $sql->bindParam(':address', $address);
            $sql->bindParam(':payroll_period', $payroll_period);
            $sql->bindParam(':basic_pay', $basic_pay);
            $sql->bindParam(':daily_rate', $daily_rate);
            $sql->bindParam(':hourly_rate', $hourly_rate);
            $sql->bindParam(':minute_rate', $minute_rate);
            $sql->bindParam(':sss', $sss);
            $sql->bindParam(':tin', $tin);
            $sql->bindParam(':philhealth', $philhealth);
            $sql->bindParam(':pagibig', $pagibig);
            $sql->bindParam(':driver_license', $driver_license);
            $sql->bindParam(':account_name', $account_name);
            $sql->bindParam(':account_number', $account_number);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                # Update system parameter value
                $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '34', $username);

                if($update_system_parameter_value){
                    $insert_user_log = $this->insert_logs($username, 'Insert Employee', 'User ' . $username . ' inserted employee (' . $id . ').');

                    if($insert_user_log == '1'){
                        $insert_employee_office_shift = $this->insert_employee_office_shift($id, $username);

                        if($insert_employee_office_shift != '1'){
                            $error = $insert_employee_office_shift;
                        }

                        if(!empty($superior)){
                            $insert_employee_superior = $this->insert_employee_superior($id, $superior, $username);

                            if($insert_employee_superior == '1'){
                                $insert_employee_subordinate = $this->insert_employee_subordinate($superior, $id, $username);

                                if($insert_employee_subordinate != '1'){
                                    $error = $insert_employee_subordinate;
                                }
                            }
                            else{
                                $error = $insert_employee_superior;
                            }
                        }

                        if(!empty($subordinates)){
                            $subordinates = explode(',', $subordinates);

                            foreach($subordinates as $subordinate){
                                $insert_employee_subordinate = $this->insert_employee_subordinate($id, $subordinate, $username);

                                if($insert_employee_subordinate == '1'){
                                    $insert_employee_superior = $this->insert_employee_superior($subordinate, $id, $username);

                                    if($insert_employee_superior != '1'){
                                        $error = $insert_employee_superior;
                                    }
                                }
                                else{
                                    $error = $insert_employee_subordinate;
                                }
                            }
                        }

                        if(!empty($profile_image_file_tmp_name) && !empty($profile_image_file_actual_ext)){
                            $update_profile_image = $this->update_profile_image($profile_image_file_tmp_name, $profile_image_file_actual_ext, $id, $username);

                            if($update_profile_image != '1'){
                                $error = $update_profile_image;
                            }
                        }

                        if(empty($error)){
                            return '1';
                        }
                        else{
                            return $error;
                        }
                    }
                    else{
                        return $insert_user_log;
                    }
                }
                else{
                    return $update_system_parameter_value;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_employee_office_shift
    # Purpose    : Insert employee office shift
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_employee_office_shift($employee_id, $username){
        if ($this->databaseConnection()) {
            $error = '';
            $counter = 7;

            $company_details = $this->get_data_details_one_parameter('company', '1');
            $company_working_days = decbin($company_details[0]['WORKING_DAYS']);
            $time_in = $company_details[0]['START_WORKING_HOURS'];
            $time_out = $company_details[0]['END_WORKING_HOURS'];
            $late = $company_details[0]['LATE_MARK'];
            $lunch_start_time = $company_details[0]['START_LUNCH_BREAK'];
            $lunch_end_time = $company_details[0]['END_LUNCH_BREAK'];
            $half_day = $company_details[0]['HALF_DAY_MARK'];

            if(strlen($company_working_days) == 6){
                $bin_value = '0' . $company_working_days;
            }
            if(strlen($company_working_days) == 5){
                $bin_value = '00' . $company_working_days;
            }
            else if(strlen($company_working_days) == 4){
                $bin_value = '000' . $company_working_days;
            }
            else if(strlen($company_working_days) == 3){
                $bin_value = '0000' . $company_working_days;
            }
            else if(strlen($company_working_days) == 2){
                $bin_value = '00000' . $company_working_days;
            }
            else if(strlen($company_working_days) == 1){
                $bin_value = '000000' . $company_working_days;
            }

            for($i = 0; $i < strlen($bin_value); $i++){
                if($bin_value[$i] == '1'){
                    $day_off = '0';
                }
                else{
                    $day_off = '1';
                }

                $insert_office_shift = $this->insert_office_shift($employee_id, $counter, $day_off, $time_in, $time_out, $late, $lunch_start_time, $lunch_end_time, $half_day, $username);

                if($insert_office_shift != '1'){
                    $error = $insert_office_shift;
                }

                $counter--;
            }

            if(empty($error)){
                return '1';
            }
            else{
                return $error;
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_employee_user_account
    # Purpose    : Insert employee user account
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_employee_user_account($employee_id, $employee_username, $password_encrypt, $login_status, $password_expiry_date, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('INSERT INTO tbluseraccount (EMPLOYEE_ID, USERNAME, PASSWORD, ACTIVE, PASSWORD_EXPIRY_DATE, FAILED_LOGIN, RECORD_LOG) VALUES (:employee_id, :employee_username, :password_encrypt, :login_status, :password_expiry_date, "0", :record_log)');
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':employee_username', $employee_username);
            $sql->bindParam(':password_encrypt', $password_encrypt);
            $sql->bindParam(':login_status', $login_status);
            $sql->bindParam(':password_expiry_date', $password_expiry_date);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Insert User Account', 'User ' . $username . ' inserted user account (' . $employee_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_department
    # Purpose    : Insert department
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_department($department, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            # Get system parameter id
            $system_parameter = $this->get_system_parameter('6', 1);
            $paramnum = $system_parameter[0]['PARAMNUM'];
            $id = $system_parameter[0]['ID'];

            $sql = $this->db_connection->prepare('INSERT INTO tbldepartment (DEPARTMENT_ID, DEPARTMENT, RECORD_LOG) VALUES (:id, :department, :record_log)');
            $sql->bindParam(':id', $id);
            $sql->bindParam(':department', $department);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                # Update system parameter value
                $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '6', $username);

                if($update_system_parameter_value){
                    $insert_user_log = $this->insert_logs($username, 'Insert Department', 'User ' . $username . ' inserted department (' . $id . ').');

                    if($insert_user_log == '1'){
                        return '1';
                    }
                    else{
                        return $insert_user_log;
                    }
                }
                else{
                    return $update_system_parameter_value;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_designation
    # Purpose    : Insert designation
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_designation($designation, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            # Get system parameter id
            $system_parameter = $this->get_system_parameter('7', 1);
            $paramnum = $system_parameter[0]['PARAMNUM'];
            $id = $system_parameter[0]['ID'];

            $sql = $this->db_connection->prepare('INSERT INTO tbldesignation (DESIGNATION_ID, DESIGNATION, RECORD_LOG) VALUES (:id, :designation, :record_log)');
            $sql->bindParam(':id', $id);
            $sql->bindParam(':designation', $designation);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                # Update system parameter value
                $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '7', $username);

                if($update_system_parameter_value){
                    $insert_user_log = $this->insert_logs($username, 'Insert Designation', 'User ' . $username . ' inserted designation (' . $id . ').');

                    if($insert_user_log == '1'){
                        return '1';
                    }
                    else{
                        return $insert_user_log;
                    }
                }
                else{
                    return $update_system_parameter_value;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------
    # -------------------------------------------------------------
    #
    # Name       : insert_announcement
    # Purpose    : Insert announcement
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_announcement($title, $content, $type, $start_date, $end_date, $attachment, $is_priority, $department, $branch, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            # Get system parameter id
            $system_parameter = $this->get_system_parameter('12', 1);
            $paramnum = $system_parameter[0]['PARAMNUM'];
            $id = $system_parameter[0]['ID'];

            $sql = $this->db_connection->prepare('INSERT INTO hr_announcements (ANNOUNCEMENT_ID, TITLE, CONTENT, TYPE, START_DATE, END_DATE, ATTACHMENT, IS_PRIORITY, DEPARTMENT, BRANCH, CREATED_BY, CREATED_AT, STATUS, RECORD_LOG) VALUES (:id, :title, :content, :type, :start_date, :end_date, :attachment, :is_priority, :department, :branch, :username, :created_at, :status, :record_log)');
            $sql->bindParam(':id', $id);
            $sql->bindParam(':title', $title);
            $sql->bindParam(':content', $content);
            $sql->bindParam(':type', $type);
            $sql->bindParam(':start_date', $start_date);
            $sql->bindParam(':end_date', $end_date);
            $sql->bindParam(':attachment', $attachment);
            $sql->bindParam(':is_priority', $is_priority);
            $sql->bindParam(':department', $department);
            $sql->bindParam(':branch', $branch);
            $sql->bindParam(':username', $username);

            $created_at = date('Y-m-d H:i:s');
            $sql->bindParam(':created_at', $created_at);

            $status = 'active';
            $sql->bindParam(':status', $status);

            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                # Update system parameter value
                $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '12', $username);

                if($update_system_parameter_value){
                    $insert_user_log = $this->insert_logs($username, 'Insert Announcement', 'User ' . $username . ' inserted announcement (' . $id . ').');

                    if($insert_user_log == '1'){
                        return '1';
                    }
                    else{
                        return $insert_user_log;
                    }
                }
                else{
                    return $update_system_parameter_value;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }

    # -------------------------------------------------------------
    #
    # Name       : update_announcement
    # Purpose    : Update announcement
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_announcement($title, $content, $type, $start_date, $end_date, $attachment, $is_priority, $department, $branch, $announcement_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE hr_announcements SET TITLE = :title, CONTENT = :content, TYPE = :type, START_DATE = :start_date, END_DATE = :end_date, IS_PRIORITY = :is_priority, DEPARTMENT = :department, BRANCH = :branch, RECORD_LOG = :record_log WHERE ANNOUNCEMENT_ID = :announcement_id');
            $sql->bindParam(':title', $title);
            $sql->bindParam(':content', $content);
            $sql->bindParam(':type', $type);
            $sql->bindParam(':start_date', $start_date);
            $sql->bindParam(':end_date', $end_date);
            $sql->bindParam(':is_priority', $is_priority);
            $sql->bindParam(':department', $department);
            $sql->bindParam(':branch', $branch);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':announcement_id', $announcement_id);

            if($sql->execute()){
                if(!empty($attachment)){
                    $update_announcement_attachment = $this->update_announcement_attachment($attachment, $announcement_id, $username);

                    if($update_announcement_attachment !== '1'){
                        return $update_announcement_attachment;
                    }
                }

                $insert_user_log = $this->insert_logs($username, 'Update Announcement', 'User ' . $username . ' updated announcement (' . $announcement_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }

    # -------------------------------------------------------------
    #
    # Name       : update_announcement_attachment
    # Purpose    : Update announcement attachment
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function update_announcement_attachment($attachment, $announcement_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE hr_announcements SET ATTACHMENT = :attachment, RECORD_LOG = :record_log WHERE ANNOUNCEMENT_ID = :announcement_id');
            $sql->bindParam(':attachment', $attachment);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':announcement_id', $announcement_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Announcement Attachment', 'User ' . $username . ' updated announcement attachment (' . $announcement_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }

    # -------------------------------------------------------------
    #
    # Name       : delete_announcement
    # Purpose    : Delete announcement
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_announcement($announcement_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'DEL->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE hr_announcements SET STATUS = :status, RECORD_LOG = :record_log WHERE ANNOUNCEMENT_ID = :announcement_id');

            $status = 'archived';
            $sql->bindParam(':status', $status);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':announcement_id', $announcement_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete Announcement', 'User ' . $username . ' deleted announcement (' . $announcement_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }

    # -------------------------------------------------------------
    #
    # Name       : get_announcement_details
    # Purpose    : Get announcement details
    #
    # Returns    : Array
    #
    # -------------------------------------------------------------
    public function get_announcement_details($announcement_id){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('SELECT a.*, d.DEPARTMENT as DEPARTMENT_NAME, b.BRANCH as BRANCH_NAME,
                                            CONCAT(e.FIRST_NAME, " ", e.LAST_NAME) as CREATED_BY_NAME
                                    FROM hr_announcements a
                                    LEFT JOIN tbldepartment d ON a.DEPARTMENT = d.DEPARTMENT_ID
                                    LEFT JOIN tblbranch b ON a.BRANCH = b.BRANCH_ID
                                    LEFT JOIN tblemployeeprofile e ON a.CREATED_BY = e.EMPLOYEE_ID
                                    WHERE a.ANNOUNCEMENT_ID = :announcement_id');
            $sql->bindParam(':announcement_id', $announcement_id);

            if($sql->execute()){
                $result = $sql->fetchAll();

                return $result;
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }

    # -------------------------------------------------------------
    #
    # Name       : get_dashboard_announcements
    # Purpose    : Get announcements for dashboard display
    #
    # Returns    : Array
    #
    # -------------------------------------------------------------
    public function get_dashboard_announcements($department = null, $branch = null){
        if ($this->databaseConnection()) {
            $query = 'SELECT a.ANNOUNCEMENT_ID, a.TITLE, a.CONTENT, a.TYPE, a.START_DATE, a.END_DATE, a.ATTACHMENT, a.IS_PRIORITY,
                        d.DEPARTMENT as DEPARTMENT_NAME, b.BRANCH as BRANCH_NAME,
                        CONCAT(e.FIRST_NAME, " ", e.LAST_NAME) as CREATED_BY_NAME, a.CREATED_AT
                    FROM hr_announcements a
                    LEFT JOIN tbldepartment d ON a.DEPARTMENT = d.DEPARTMENT_ID
                    LEFT JOIN tblbranch b ON a.BRANCH = b.BRANCH_ID
                    LEFT JOIN tblemployeeprofile e ON a.CREATED_BY = e.EMPLOYEE_ID
                    WHERE a.STATUS = :status
                    AND (a.END_DATE IS NULL OR a.END_DATE >= CURRENT_DATE())';

            $params = [];
            $status = 'active';
            $params[':status'] = $status;

            // Add department filter if specified
            if ($department) {
                $query .= ' AND (a.DEPARTMENT IS NULL OR a.DEPARTMENT = :department)';
                $params[':department'] = $department;
            }

            // Add branch filter if specified
            if ($branch) {
                $query .= ' AND (a.BRANCH IS NULL OR a.BRANCH = :branch)';
                $params[':branch'] = $branch;
            }

            $query .= ' ORDER BY a.IS_PRIORITY DESC, a.CREATED_AT DESC';

            $sql = $this->db_connection->prepare($query);

            foreach($params as $param => $value){
                $sql->bindValue($param, $value);
            }

            if($sql->execute()){
                $result = $sql->fetchAll();

                return $result;
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }

    # -------------------------------------------------------------
    #
    # Name       : insert_branch
    # Purpose    : Insert branch
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_branch($branch, $email, $phone, $telephone, $address, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            # Get system parameter id
            $system_parameter = $this->get_system_parameter('8', 1);
            $paramnum = $system_parameter[0]['PARAMNUM'];
            $id = $system_parameter[0]['ID'];

            $sql = $this->db_connection->prepare('INSERT INTO tblbranch (BRANCH_ID, BRANCH, EMAIL, PHONE, TELEPHONE, ADDRESS, RECORD_LOG) VALUES (:id, :branch, :email, :phone, :telephone, :address, :record_log)');
            $sql->bindParam(':id', $id);
            $sql->bindParam(':branch', $branch);
            $sql->bindParam(':email', $email);
            $sql->bindParam(':phone', $phone);
            $sql->bindParam(':telephone', $telephone);
            $sql->bindParam(':address', $address);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                # Update system parameter value
                $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '8', $username);

                if($update_system_parameter_value){
                    $insert_user_log = $this->insert_logs($username, 'Insert Branch', 'User ' . $username . ' inserted branch (' . $id . ').');

                    if($insert_user_log == '1'){
                        return '1';
                    }
                    else{
                        return $insert_user_log;
                    }
                }
                else{
                    return $update_system_parameter_value;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_holiday
    # Purpose    : Insert holiday
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_holiday($holiday, $holiday_date, $holiday_type, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            # Get system parameter id
            $system_parameter = $this->get_system_parameter('9', 1);
            $paramnum = $system_parameter[0]['PARAMNUM'];
            $id = $system_parameter[0]['ID'];

            $sql = $this->db_connection->prepare('INSERT INTO tblholiday (HOLIDAY_ID, HOLIDAY, HOLIDAY_DATE, HOLIDAY_TYPE, RECORD_LOG) VALUES (:id, :holiday, :holiday_date, :holiday_type, :record_log)');
            $sql->bindParam(':id', $id);
            $sql->bindParam(':holiday', $holiday);
            $sql->bindParam(':holiday_date', $holiday_date);
            $sql->bindParam(':holiday_type', $holiday_type);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                # Update system parameter value
                $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '9', $username);

                if($update_system_parameter_value){
                    $insert_user_log = $this->insert_logs($username, 'Insert Holiday', 'User ' . $username . ' inserted holiday (' . $id . ').');

                    if($insert_user_log == '1'){
                        return '1';
                    }
                    else{
                        return $insert_user_log;
                    }
                }
                else{
                    return $update_system_parameter_value;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_leave_type
    # Purpose    : Insert leave type
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_leave_type($leave, $no_leaves, $paid_status, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            # Get system parameter id
            $system_parameter = $this->get_system_parameter('10', 1);
            $paramnum = $system_parameter[0]['PARAMNUM'];
            $id = $system_parameter[0]['ID'];

            $sql = $this->db_connection->prepare('INSERT INTO tblleavetype (LEAVE_TYPE_ID, LEAVE_NAME, NO_LEAVES, PAID_STATUS, RECORD_LOG) VALUES (:id, :leave, :no_leaves, :paid_status, :record_log)');
            $sql->bindParam(':id', $id);
            $sql->bindParam(':leave', $leave);
            $sql->bindParam(':no_leaves', $no_leaves);
            $sql->bindParam(':paid_status', $paid_status);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                # Update system parameter value
                $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '10', $username);

                if($update_system_parameter_value){
                    $insert_user_log = $this->insert_logs($username, 'Insert Leave Type', 'User ' . $username . ' inserted leave type (' . $id . ').');

                    if($insert_user_log == '1'){
                        return '1';
                    }
                    else{
                        return $insert_user_log;
                    }
                }
                else{
                    return $update_system_parameter_value;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_leave_entitlement
    # Purpose    : Insert leave entitlement
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_leave_entitlement($employee_id, $leave_type, $no_leaves, $start_date, $end_date, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            # Get system parameter id
            $system_parameter = $this->get_system_parameter('11', 1);
            $paramnum = $system_parameter[0]['PARAMNUM'];
            $id = $system_parameter[0]['ID'];

            $sql = $this->db_connection->prepare('INSERT INTO tblleaveentitlement (LEAVE_ENTITLEMENT_ID, EMPLOYEE_ID, LEAVE_TYPE, NO_LEAVES, ACQUIRED_NO_LEAVES, START_DATE, END_DATE, RECORD_LOG) VALUES (:id, :employee_id, :leave_type, :no_leaves, "0", :start_date, :end_date, :record_log)');
            $sql->bindParam(':id', $id);
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':leave_type', $leave_type);
            $sql->bindParam(':no_leaves', $no_leaves);
            $sql->bindParam(':start_date', $start_date);
            $sql->bindParam(':end_date', $end_date);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                # Update system parameter value
                $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '11', $username);

                if($update_system_parameter_value){
                    $insert_user_log = $this->insert_logs($username, 'Insert Leave Entitlement', 'User ' . $username . ' inserted leave entitlement (' . $id . ').');

                    if($insert_user_log == '1'){
                        return '1';
                    }
                    else{
                        return $insert_user_log;
                    }
                }
                else{
                    return $update_system_parameter_value;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_employee_leave
    # Purpose    : Insert employee leave
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
   public function insert_employee_leave($employee_id, $leave_type, $leave_date, $start_time, $end_time, $reason, $leave_status, $decision_date, $decision_time, $username,$leave_attachement_path = null){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');
            $systemdate = date('Y-m-d');
            $current_time = date('H:i:s');

            # Get system parameter id
            $system_parameter = $this->get_system_parameter('12', 1);
            $paramnum = $system_parameter[0]['PARAMNUM'];
            $id = $system_parameter[0]['ID'];

            if(!empty($decision_date) && $leave_status != 2){
                $sql = $this->db_connection->prepare('INSERT INTO tblleave (LEAVE_ID, EMPLOYEE_ID, LEAVE_TYPE, LEAVE_DATE, START_TIME, END_TIME, REASON, STATUS, DECISION_DATE, DECISION_TIME, DECISION_BY, FILED_BY, FILE_DATE, FILE_TIME, RECORD_LOG, ATTACHMENT_PATH) VALUES (:id, :employee_id, :leave_type, :leave_date, :start_time, :end_time, :reason, :leave_status, :decision_date, :decision_time, :username, :username, :systemdate, :current_time, :record_log, :leave_attachement_path)');
                $sql->bindParam(':id', $id);
                $sql->bindParam(':employee_id', $employee_id);
                $sql->bindParam(':leave_type', $leave_type);
                $sql->bindParam(':leave_date', $leave_date);
                $sql->bindParam(':start_time', $start_time);
                $sql->bindParam(':end_time', $end_time);
                $sql->bindParam(':reason', $reason);
                $sql->bindParam(':leave_status', $leave_status);
                $sql->bindParam(':decision_date', $decision_date);
                $sql->bindParam(':decision_time', $decision_time);
                $sql->bindParam(':username', $username);
                $sql->bindParam(':systemdate', $systemdate);
                $sql->bindParam(':current_time', $current_time);
                $sql->bindParam(':record_log', $record_log);
                $sql->bindParam(':leave_attachement_path', $leave_attachement_path);
            }
            else{
                $sql = $this->db_connection->prepare('INSERT INTO tblleave (LEAVE_ID, EMPLOYEE_ID, LEAVE_TYPE, LEAVE_DATE, START_TIME, END_TIME, REASON, STATUS, FILED_BY, FILE_DATE, FILE_TIME, RECORD_LOG, ATTACHMENT_PATH) VALUES (:id, :employee_id, :leave_type, :leave_date, :start_time, :end_time, :reason, :leave_status, :username, :systemdate, :current_time, :record_log, :leave_attachement_path)');
                $sql->bindParam(':id', $id);
                $sql->bindParam(':employee_id', $employee_id);
                $sql->bindParam(':leave_type', $leave_type);
                $sql->bindParam(':leave_date', $leave_date);
                $sql->bindParam(':start_time', $start_time);
                $sql->bindParam(':end_time', $end_time);
                $sql->bindParam(':reason', $reason);
                $sql->bindParam(':leave_status', $leave_status);
                $sql->bindParam(':username', $username);
                $sql->bindParam(':systemdate', $systemdate);
                $sql->bindParam(':current_time', $current_time);
                $sql->bindParam(':record_log', $record_log);
                $sql->bindParam(':leave_attachement_path', $leave_attachement_path);
            }

            if($sql->execute()){
                # Update system parameter value
                $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '12', $username);

                if($update_system_parameter_value){
                    $insert_user_log = $this->insert_logs($username, 'Insert Employee Leave', 'User ' . $username . ' inserted employee leave (' . $id . ').');

                    if($insert_user_log == '1'){
                        return '1';
                    }
                    else{
                        return $insert_user_log;
                    }
                }
                else{
                    return $update_system_parameter_value;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_employee_document
    # Purpose    : Insert employee document
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_employee_document($fileTmpName, $fileActualExt, $document_name, $document_note, $employee_id, $document_date, $category, $systemdate, $current_time, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');
            $directory = './assets/document/employee/' . $employee_id ;

            if (!file_exists($directory)) {
                mkdir($directory);
            }

            # Get system parameter id
            $system_parameter = $this->get_system_parameter('13', 1);
            $paramnum = $system_parameter[0]['PARAMNUM'];
            $id = $system_parameter[0]['ID'];

            # Set image destination
            $fileNew = $document_name . '.' . $fileActualExt;
            $fileDestination = './assets/document/employee/' . $employee_id . '/' . $fileNew;
            $filePath = './assets/document/employee/' . $employee_id . '/' . $fileNew;

            if(move_uploaded_file($fileTmpName, $fileDestination)){
                $sql = $this->db_connection->prepare('INSERT INTO tblemployeedocument (DOCUMENT_ID, EMPLOYEE_ID, DOCUMENT_NAME, DOCUMENT_NOTE, DOCUMENT_PATH, DOCUMENT_DATE, DOCUMENT_CATEGORY, UPLOAD_DATE, UPLOAD_TIME, UPLOAD_BY, RECORD_LOG) VALUES (:id, :employee_id, :document_name, :document_note, :filePath, :document_date, :category, :systemdate, :current_time, :username, :record_log)');
                $sql->bindParam(':id', $id);
                $sql->bindParam(':employee_id', $employee_id);
                $sql->bindParam(':document_name', $document_name);
                $sql->bindParam(':document_note', $document_note);
                $sql->bindParam(':filePath', $filePath);
                $sql->bindParam(':document_date', $document_date);
                $sql->bindParam(':category', $category);
                $sql->bindParam(':systemdate', $systemdate);
                $sql->bindParam(':current_time', $current_time);
                $sql->bindParam(':username', $username);
                $sql->bindParam(':record_log', $record_log);

                if($sql->execute()){
                    # Update system parameter value
                    $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '13', $username);

                    if($update_system_parameter_value){
                        $insert_user_log = $this->insert_logs($username, 'Insert Employee Document', 'User ' . $username . ' inserted employee document (' . $id . ').');

                        if($insert_user_log == '1'){
                            return '1';
                        }
                        else{
                            return $insert_user_log;
                        }
                    }
                    else{
                        return $update_system_parameter_value;
                    }
                }
                else{
                    return $sql->errorInfo()[2];
                }
            }
            else{
                return 'There was an error uploading your document.';
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_attendance
    # Purpose    : Insert attendance record
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_attendance($employee_id, $latitude, $longitude, $ip_address, $systemdate, $current_time, $late, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            # Get system parameter id
            $system_parameter = $this->get_system_parameter('14', 1);
            $paramnum = $system_parameter[0]['PARAMNUM'];
            $id = $system_parameter[0]['ID'];

            $sql = $this->db_connection->prepare('INSERT INTO tblattendancerecord (ATTENDANCE_ID, EMPLOYEE_ID, TIME_IN_DATE, TIME_IN, TIME_IN_BY, TIME_IN_IP, TIME_IN_LAT, TIME_IN_LONG, LATE, RECORD_LOG) VALUES (:id, :employee_id, :systemdate, :current_time, :username, :ip_address, :latitude, :longitude, :late, :record_log)');
            $sql->bindParam(':id', $id);
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':systemdate', $systemdate);
            $sql->bindParam(':current_time', $current_time);
            $sql->bindParam(':username', $username);
            $sql->bindParam(':ip_address', $ip_address);
            $sql->bindParam(':latitude', $latitude);
            $sql->bindParam(':longitude', $longitude);
            $sql->bindParam(':late', $late);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                # Update system parameter value
                $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '14', $username);

                if($update_system_parameter_value){
                    $insert_user_log = $this->insert_logs($username, 'Clock In', 'User ' . $username . ' the clocked in.');

                    if($insert_user_log == '1'){
                        return '1';
                    }
                    else{
                        return $insert_user_log;
                    }
                }
                else{
                    return $update_system_parameter_value;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_location
    # Purpose    : Insert locaion
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_location($employee_id, $latitude, $longitude, $systemdate, $current_time, $remarks, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            # Get system parameter id
            $system_parameter = $this->get_system_parameter('20', 1);
            $paramnum = $system_parameter[0]['PARAMNUM'];
            $id = $system_parameter[0]['ID'];

            $sql = $this->db_connection->prepare('INSERT INTO tbllocation (RECORD_ID, EMPLOYEE_ID, LOCATION_DATE, LOCATION_TIME, LATITUDE, LONGITUDE, REMARKS, RECORD_LOG) VALUES (:id, :employee_id, :systemdate, :current_time, :latitude, :longitude, :remarks, :record_log)');
            $sql->bindParam(':id', $id);
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':systemdate', $systemdate);
            $sql->bindParam(':current_time', $current_time);
            $sql->bindParam(':latitude', $latitude);
            $sql->bindParam(':longitude', $longitude);
            $sql->bindParam(':remarks', $remarks);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                # Update system parameter value
                $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '20', $username);

                if($update_system_parameter_value){
                    $insert_user_log = $this->insert_logs($username, 'Record Location', 'User ' . $username . ' the get location.');

                    if($insert_user_log == '1'){
                        return '1';
                    }
                    else{
                        return $insert_user_log;
                    }
                }
                else{
                    return $update_system_parameter_value;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_employee_attendance_log
    # Purpose    : Insert employee attendance log
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_employee_attendance_log($attachment_file_tmp_name, $attachment_file_actual_ext, $employee_id, $time_in_date, $time_in, $time_out_date, $time_out, $latitude, $longitude, $ip_address, $late, $early_leaving, $overtime, $total_hours_worked, $remarks, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            # Get system parameter id
            $system_parameter = $this->get_system_parameter('14', 1);
            $paramnum = $system_parameter[0]['PARAMNUM'];
            $id = $system_parameter[0]['ID'];

            $sql = $this->db_connection->prepare('INSERT INTO tblattendancerecord (ATTENDANCE_ID, EMPLOYEE_ID, TIME_IN_DATE, TIME_IN, TIME_IN_BY, TIME_IN_IP, TIME_IN_LAT, TIME_IN_LONG, TIME_OUT_DATE, TIME_OUT, TIME_OUT_BY, TIME_OUT_IP, TIME_OUT_LAT, TIME_OUT_LONG, LATE, EARLY_LEAVING, OVERTIME, TOTAL_HOURS, REMARKS, RECORD_LOG) VALUES (:id, :employee_id, :time_in_date, :time_in, :username, :ip_address, :latitude, :longitude, :time_out_date, :time_out, :username, :ip_address, :latitude, :longitude, :late, :early_leaving, :overtime, :total_hours_worked, :remarks, :record_log)');
            $sql->bindParam(':id', $id);
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':time_in_date', $time_in_date);
            $sql->bindParam(':time_in', $time_in);
            $sql->bindParam(':username', $username);
            $sql->bindParam(':ip_address', $ip_address);
            $sql->bindParam(':latitude', $latitude);
            $sql->bindParam(':longitude', $longitude);
            $sql->bindParam(':time_out_date', $time_out_date);
            $sql->bindParam(':time_out', $time_out);
            $sql->bindParam(':late', $late);
            $sql->bindParam(':early_leaving', $early_leaving);
            $sql->bindParam(':overtime', $overtime);
            $sql->bindParam(':total_hours_worked', $total_hours_worked);
            $sql->bindParam(':remarks', $remarks);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                # Update system parameter value
                $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '14', $username);

                if($update_system_parameter_value){
                    $insert_user_log = $this->insert_logs($username, 'Insert Employee Attendance Log', 'User ' . $username . ' the employee attendance log of an employee ('. $employee_id .').');

                    if($insert_user_log == '1'){
                        $update_attendance_record_attachment = $this->update_attendance_record_attachment($attachment_file_tmp_name, $attachment_file_actual_ext, $id, $employee_id, $username);

                        if($update_attendance_record_attachment == '1'){
                            return '1';
                        }
                        else{
                            return $update_attendance_record_attachment;
                        }
                    }
                    else{
                        return $insert_user_log;
                    }
                }
                else{
                    return $update_system_parameter_value;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_imported_employee_attendance_log
    # Purpose    : Insert imported employee attendance log
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_imported_employee_attendance_log($employee_id, $time_in_date, $time_in, $time_in_latitude, $time_in_longitude, $time_in_ip_address, $time_out_date, $time_out, $time_out_latitude, $time_out_longitude, $time_out_ip_address, $late, $early_leaving, $overtime, $total_hours_worked, $remarks, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            # Get system parameter id
            $system_parameter = $this->get_system_parameter('14', 1);
            $paramnum = $system_parameter[0]['PARAMNUM'];
            $id = $system_parameter[0]['ID'];

            $sql = $this->db_connection->prepare('INSERT INTO tblattendancerecord (ATTENDANCE_ID, EMPLOYEE_ID, TIME_IN_DATE, TIME_IN, TIME_IN_BY, TIME_IN_IP, TIME_IN_LAT, TIME_IN_LONG, TIME_OUT_DATE, TIME_OUT, TIME_OUT_BY, TIME_OUT_IP, TIME_OUT_LAT, TIME_OUT_LONG, LATE, EARLY_LEAVING, OVERTIME, TOTAL_HOURS, REMARKS, RECORD_LOG) VALUES (:id, :employee_id, :time_in_date, :time_in, :username, :time_in_ip_address, :time_in_latitude, :time_in_longitude, :time_out_date, :time_out, :username, :time_out_ip_address, :time_out_latitude, :time_out_longitude, :late, :early_leaving, :overtime, :total_hours_worked, :remarks, :record_log)');
            $sql->bindParam(':id', $id);
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':time_in_date', $time_in_date);
            $sql->bindParam(':time_in', $time_in);
            $sql->bindParam(':username', $username);
            $sql->bindParam(':time_in_ip_address', $time_in_ip_address);
            $sql->bindParam(':time_in_latitude', $time_in_latitude);
            $sql->bindParam(':time_in_longitude', $time_in_longitude);
            $sql->bindParam(':time_out_date', $time_out_date);
            $sql->bindParam(':time_out', $time_out);
            $sql->bindParam(':time_out_ip_address', $time_out_ip_address);
            $sql->bindParam(':time_out_latitude', $time_out_latitude);
            $sql->bindParam(':time_out_longitude', $time_out_longitude);
            $sql->bindParam(':late', $late);
            $sql->bindParam(':early_leaving', $early_leaving);
            $sql->bindParam(':overtime', $overtime);
            $sql->bindParam(':total_hours_worked', $total_hours_worked);
            $sql->bindParam(':remarks', $remarks);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                # Update system parameter value
                $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '14', $username);

                if($update_system_parameter_value){
                    $insert_user_log = $this->insert_logs($username, 'Insert Employee Attendance Log', 'User ' . $username . ' the employee attendance log of an employee ('. $employee_id .').');

                    if($insert_user_log == '1'){
                        return '1';
                    }
                    else{
                        return $insert_user_log;
                    }
                }
                else{
                    return $update_system_parameter_value;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_deduction_type
    # Purpose    : Insert deduction type
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_deduction_type($deduction_type, $category, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            # Get system parameter id
            $system_parameter = $this->get_system_parameter('16', 1);
            $paramnum = $system_parameter[0]['PARAMNUM'];
            $id = $system_parameter[0]['ID'];

            $sql = $this->db_connection->prepare('INSERT INTO tbldeductiontype (DEDUCTION_TYPE_ID, DEDUCTION, CATEGORY, RECORD_LOG) VALUES (:id, :deduction_type, :category, :record_log)');
            $sql->bindParam(':id', $id);
            $sql->bindParam(':deduction_type', $deduction_type);
            $sql->bindParam(':category', $category);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                # Update system parameter value
                $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '16', $username);

                if($update_system_parameter_value){
                    $insert_user_log = $this->insert_logs($username, 'Insert Deduction Type', 'User ' . $username . ' inserted deduction type (' . $id . ').');

                    if($insert_user_log == '1'){
                        return '1';
                    }
                    else{
                        return $insert_user_log;
                    }
                }
                else{
                    return $update_system_parameter_value;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_deduction_amount
    # Purpose    : Insert deduction amount
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_deduction_amount($deduction_type_id, $start_range, $end_range, $deduction_amount, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('INSERT INTO tbldeductionamount (DEDUCTION_TYPE_ID, START_RANGE, END_RANGE, DEDUCTION_AMOUNT, RECORD_LOG) VALUES (:deduction_type_id, :start_range, :end_range, :deduction_amount, :record_log)');
            $sql->bindParam(':deduction_type_id', $deduction_type_id);
            $sql->bindParam(':start_range', $start_range);
            $sql->bindParam(':end_range', $end_range);
            $sql->bindParam(':deduction_amount', $deduction_amount);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Insert Deduction Amount', 'User ' . $username . ' inserted deduction amount (' . $deduction_type_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_allowance_type
    # Purpose    : Insert allowance type
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_allowance_type($allowance_type, $tax_type, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            # Get system parameter id
            $system_parameter = $this->get_system_parameter('17', 1);
            $paramnum = $system_parameter[0]['PARAMNUM'];
            $id = $system_parameter[0]['ID'];

            $sql = $this->db_connection->prepare('INSERT INTO tblallowancetype (ALLOWANCE_TYPE_ID, ALLOWANCE, TAX_TYPE, RECORD_LOG) VALUES (:id, :allowance_type, :tax_type, :record_log)');
            $sql->bindParam(':id', $id);
            $sql->bindParam(':allowance_type', $allowance_type);
            $sql->bindParam(':tax_type', $tax_type);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                # Update system parameter value
                $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '17', $username);

                if($update_system_parameter_value){
                    $insert_user_log = $this->insert_logs($username, 'Insert Allowance Type', 'User ' . $username . ' inserted allowance type (' . $id . ').');

                    if($insert_user_log == '1'){
                        return '1';
                    }
                    else{
                        return $insert_user_log;
                    }
                }
                else{
                    return $update_system_parameter_value;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_other_income_type
    # Purpose    : Insert other income type
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_other_income_type($other_income_type, $tax_type, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            # Get system parameter id
            $system_parameter = $this->get_system_parameter('18', 1);
            $paramnum = $system_parameter[0]['PARAMNUM'];
            $id = $system_parameter[0]['ID'];

            $sql = $this->db_connection->prepare('INSERT INTO tblotherincometype (OTHER_INCOME_TYPE_ID, OTHER_INCOME, TAX_TYPE, RECORD_LOG) VALUES (:id, :other_income_type, :tax_type, :record_log)');
            $sql->bindParam(':id', $id);
            $sql->bindParam(':other_income_type', $other_income_type);
            $sql->bindParam(':tax_type', $tax_type);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                # Update system parameter value
                $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '18', $username);

                if($update_system_parameter_value){
                    $insert_user_log = $this->insert_logs($username, 'Insert Other Income Type', 'User ' . $username . ' inserted other income type (' . $id . ').');

                    if($insert_user_log == '1'){
                        return '1';
                    }
                    else{
                        return $insert_user_log;
                    }
                }
                else{
                    return $update_system_parameter_value;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_payroll_specification
    # Purpose    : Insert payroll specification type
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_payroll_specification($employee, $specification_type, $status, $specification_category, $amount, $payroll_date, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            # Get system parameter id
            $system_parameter = $this->get_system_parameter('19', 1);
            $paramnum = $system_parameter[0]['PARAMNUM'];
            $id = $system_parameter[0]['ID'];

            $sql = $this->db_connection->prepare('INSERT INTO tblpayrollspec (SPEC_ID, EMPLOYEE_ID, SPEC_TYPE, STATUS, CATEGORY, SPEC_AMOUNT, PAYROLL_DATE, RECORD_LOG) VALUES (:id, :employee, :specification_type, :status, :specification_category, :amount, :payroll_date, :record_log)');
            $sql->bindParam(':id', $id);
            $sql->bindParam(':employee', $employee);
            $sql->bindParam(':specification_type', $specification_type);
            $sql->bindParam(':status', $status);
            $sql->bindParam(':specification_category', $specification_category);
            $sql->bindParam(':amount', $amount);
            $sql->bindParam(':payroll_date', $payroll_date);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                # Update system parameter value
                $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '19', $username);

                if($update_system_parameter_value){
                    $insert_user_log = $this->insert_logs($username, 'Insert Payroll Specification', 'User ' . $username . ' inserted other payroll specification (' . $id . ').');

                    if($insert_user_log == '1'){
                        return '1';
                    }
                    else{
                        return $insert_user_log;
                    }
                }
                else{
                    return $update_system_parameter_value;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_employee_superior
    # Purpose    : Insert employee superior
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_employee_superior($employee_id, $superior, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('INSERT INTO tblemployeesuperior (EMPLOYEE_ID, SUPERIOR_ID, RECORD_LOG) VALUES (:employee_id, :superior, :record_log)');
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':superior', $superior);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Insert Employee Superior', 'User ' . $username . ' inserted employee superior (' . $superior . ') of employee ('. $employee_id .').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_employee_authorizer
    # Purpose    : Insert employee authorizer
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_employee_authorizer($employee_id, $authorizer, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('INSERT INTO tblemployeeauthorizer (EMPLOYEE_ID, AUTHORIZER_ID, RECORD_LOG) VALUES (:employee_id, :authorizer, :record_log)');
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':authorizer', $authorizer);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Insert Employee Authorizer', 'User ' . $username . ' inserted employee authorizer (' . $authorizer . ') of employee ('. $employee_id .').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_employee_subordinate
    # Purpose    : Insert employee subordinate
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_employee_subordinate($employee_id, $subordinate, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('INSERT INTO tblemployeesubordinate (EMPLOYEE_ID, SUBORDINATE_ID, RECORD_LOG) VALUES (:employee_id, :subordinate, :record_log)');
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':subordinate', $subordinate);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Insert Employee Subordinate', 'User ' . $username . ' inserted employee subordinate (' . $subordinate . ') of employee ('. $employee_id .').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_user_account
    # Purpose    : Insert user account
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_user_account($employee_id, $user_cd, $password_encrypt, $password_expiry_date, $role, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('INSERT INTO tbluseraccount (EMPLOYEE_ID, USERNAME, PASSWORD, ROLE_ID, ACTIVE, PASSWORD_EXPIRY_DATE, FAILED_LOGIN, RECORD_LOG) VALUES (:employee_id, :user_cd, :password_encrypt, :role, "0", :password_expiry_date, "0", :record_log)');
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':user_cd', $user_cd);
            $sql->bindParam(':password_encrypt', $password_encrypt);
            $sql->bindParam(':role', $role);
            $sql->bindParam(':password_expiry_date', $password_expiry_date);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Insert User Account', 'User ' . $username . ' inserted user account (' . $employee_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_user_profile
    # Purpose    : Insert user account profile
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_user_profile($employee_id, $user_cd, $first_name, $middle_name, $last_name, $suffix, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('INSERT INTO tblemployeeprofile (EMPLOYEE_ID, USERNAME, FIRST_NAME, MIDDLE_NAME, LAST_NAME, SUFFIX, RECORD_LOG) VALUES (:employee_id, :user_cd, :first_name, :middle_name, :last_name :suffix, :record_log)');
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':user_cd', $user_cd);
            $sql->bindParam(':first_name', $first_name);
            $sql->bindParam(':middle_name', $middle_name);
            $sql->bindParam(':last_name', $last_name);
            $sql->bindParam(':suffix', $suffix);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Insert User Profile', 'User ' . $username . ' inserted user profile (' . $employee_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_email_notification
    # Purpose    : Insert email notification
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_email_notification($notification, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');
            $active = 0;

            # Get system parameter id
            $system_parameter = $this->get_system_parameter('21', 1);
            $paramnum = $system_parameter[0]['PARAMNUM'];
            $id = $system_parameter[0]['ID'];

            $sql = $this->db_connection->prepare('INSERT INTO tblnotificationsetting (NOTIFICATION_ID, NOTIFICATION, ACTIVE, RECORD_LOG) VALUES (:id, :notification, :active, :record_log)');
            $sql->bindParam(':id', $id);
            $sql->bindParam(':notification', $notification);
            $sql->bindParam(':active', $active);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                # Update system parameter value
                $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '21', $username);

                if($update_system_parameter_value){
                    $insert_user_log = $this->insert_logs($username, 'Insert Email Notification', 'User ' . $username . ' inserted email notification (' . $id . ').');

                    if($insert_user_log == '1'){
                        return '1';
                    }
                    else{
                        return $insert_user_log;
                    }
                }
                else{
                    return $update_system_parameter_value;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------
    # -------------------------------------------------------------
    #
    # Name       : insert_payroll
    # Purpose    : Insert payroll
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_payroll($employee_id, $payroll_start_date, $payroll_end_date, $total_attendance_record, $gross_pay, $net_pay, $total_deduction, $withholding_tax, $total_late, $total_early_leaving, $total_overtime, $total_unpaid_leave, $total_allowance, $total_other_income, $systemdate, $remarks, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');
            $active = 0;

            # Get system parameter id
            $system_parameter = $this->get_system_parameter('22', 1);
            $paramnum = $system_parameter[0]['PARAMNUM'];
            $id = $system_parameter[0]['ID'];

            $sql = $this->db_connection->prepare("INSERT INTO tblpayroll (PAYROLL_ID, EMPLOYEE_ID, PAYROLL_START_DATE, PAYROLL_END_DATE, STATUS, NO_HOURS, GROSS, NET, DEDUCTIONS, WITHHOLDING_TAX, LATE, EARLY_LEAVING, OVERTIME, ABSENT, ALLOWANCE, OTHER_INCOME, GENERATED_DATE, GENERATED_BY, REMARKS, RECORD_LOG) VALUES (:id, :employee_id, :payroll_start_date, :payroll_end_date, '0', :total_hours_worked, :gross_pay, :net_pay, :total_deduction, :withholding_tax, :total_late, :total_early_leaving, :total_overtime, :total_unpaid_leave, :total_allowance, :total_other_income, :system_date, :username, :remarks, :record_log)");
            $sql->bindParam(':id', $id);
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':payroll_start_date', $payroll_start_date);
            $sql->bindParam(':payroll_end_date', $payroll_end_date);
            $sql->bindParam(':total_hours_worked', $total_hours_worked);
            $sql->bindParam(':gross_pay', $gross_pay);
            $sql->bindParam(':net_pay', $net_pay);
            $sql->bindParam(':total_deduction', $total_deduction);
            $sql->bindParam(':withholding_tax', $withholding_tax);
            $sql->bindParam(':total_late', $total_late);
            $sql->bindParam(':total_early_leaving', $total_early_leaving);
            $sql->bindParam(':total_overtime', $total_overtime);
            $sql->bindParam(':total_unpaid_leave', $total_unpaid_leave);
            $sql->bindParam(':total_allowance', $total_allowance);
            $sql->bindParam(':total_other_income', $total_other_income);
            $sql->bindParam(':system_date', $systemdate);
            $sql->bindParam(':username', $username);
            $sql->bindParam(':remarks', $remarks);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                # Update system parameter value
                $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '22', $username);

                if($update_system_parameter_value){
                    $update_attendance_record_status = $this->update_attendance_record_status($employee_id, '1', $payroll_start_date, $payroll_end_date, $username);

                    if($update_attendance_record_status == '1'){
                        $update_payroll_specificiation_payroll_id = $this->update_payroll_specificiation_payroll_id($employee_id, $id, $payroll_start_date, $payroll_end_date, $username);

                        if($update_payroll_specificiation_payroll_id == '1'){
                            $insert_user_log = $this->insert_logs($username, 'Insert Payroll', 'User ' . $username . ' inserted payroll (' . $id . ').');

                            if($insert_user_log == '1'){
                                return '1';
                            }
                            else{
                                return $insert_user_log;
                            }
                        }
                        else{
                            return $update_payroll_specificiation_payroll_id;
                        }
                    }
                    else{
                        return $update_attendance_record_status;
                    }
                }
                else{
                    return $update_system_parameter_value;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_office_shift
    # Purpose    : Insert office shift
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_office_shift($employee, $counter, $day_off, $time_in, $time_out, $late, $lunch_start_time, $lunch_end_time, $half_day, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            # Get system parameter id
            $system_parameter = $this->get_system_parameter('23', 1);
            $paramnum = $system_parameter[0]['PARAMNUM'];
            $id = $system_parameter[0]['ID'];

            $sql = $this->db_connection->prepare('INSERT INTO tblofficeshift (OFFICE_SHIFT_ID, EMPLOYEE_ID, DTR_DAY, DAY_OFF, TIME_IN, TIME_OUT, LATE_MARK, START_LUNCH_BREAK, END_LUNCH_BREAK, HALF_DAY_MARK, RECORD_LOG) VALUES (:id, :employee, :counter, :day_off, :time_in, :time_out, :late, :lunch_start_time, :lunch_end_time, :half_day, :record_log)');
            $sql->bindParam(':id', $id);
            $sql->bindParam(':employee', $employee);
            $sql->bindParam(':counter', $counter);
            $sql->bindParam(':day_off', $day_off);
            $sql->bindParam(':time_in', $time_in);
            $sql->bindParam(':time_out', $time_out);
            $sql->bindParam(':late', $late);
            $sql->bindParam(':lunch_start_time', $lunch_start_time);
            $sql->bindParam(':lunch_end_time', $lunch_end_time);
            $sql->bindParam(':half_day', $half_day);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                # Update system parameter value
                $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '23', $username);

                if($update_system_parameter_value){
                    $insert_user_log = $this->insert_logs($username, 'Insert Office Shift', 'User ' . $username . ' inserted office shift (' . $id . ').');

                    if($insert_user_log == '1'){
                        return '1';
                    }
                    else{
                        return $insert_user_log;
                    }
                }
                else{
                    return $update_system_parameter_value;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_email_configuration
    # Purpose    : Insert email configuration
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_email_configuration($mail_id, $mail_host, $port, $smpt_auth, $smpt_auto_tls, $mail_user, $mail_password, $mail_encryption, $mail_from_name, $mail_from_email, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('INSERT INTO tblmailconfig (MAIL_ID, MAIL_HOST, PORT, SMTP_AUTH, SMTP_AUTO_TLS, USERNAME, PASSWORD, MAIL_ENCRYPTION, MAIL_FROM_NAME, MAIL_FROM_EMAIL, RECORD_LOG) VALUES (:mail_id, :mail_host, :port, :smpt_auth, :smpt_auto_tls, :mail_user, :mail_password, :mail_encryption, :mail_from_name, :mail_from_email, :record_log)');
            $sql->bindParam(':mail_id', $mail_id);
            $sql->bindParam(':mail_host', $mail_host);
            $sql->bindParam(':port', $port);
            $sql->bindParam(':smpt_auth', $smpt_auth);
            $sql->bindParam(':smpt_auto_tls', $smpt_auto_tls);
            $sql->bindParam(':mail_user', $mail_user);
            $sql->bindParam(':mail_password', $mail_password);
            $sql->bindParam(':mail_encryption', $mail_encryption);
            $sql->bindParam(':mail_from_name', $mail_from_name);
            $sql->bindParam(':mail_from_email', $mail_from_email);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Insert Email Configuration', 'User ' . $username . ' inserted email configuration (' . $mail_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_email_recipient
    # Purpose    : Insert email recipient
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_email_recipient($email, $notification_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            # Get system parameter id
            $system_parameter = $this->get_system_parameter('33', 1);
            $paramnum = $system_parameter[0]['PARAMNUM'];
            $id = $system_parameter[0]['ID'];

            $sql = $this->db_connection->prepare("INSERT INTO tblemailrecipient (RECIPIENT_ID, NOTIFICATION_ID, EMAIL, RECORD_LOG) VALUES (:id, :notification_id, :email, :record_log)");
            $sql->bindParam(':id', $id);
            $sql->bindParam(':notification_id', $notification_id);
            $sql->bindParam(':email', $email);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                # Update system parameter value
                $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '33', $username);

                if($update_system_parameter_value){
                    $insert_user_log = $this->insert_logs($username, 'Insert Email Recipient', 'User ' . $username . ' inserted email recipient (' . $id . ').');

                    if($insert_user_log == '1'){
                        return '1';
                    }
                    else{
                        return $insert_user_log;
                    }
                }
                else{
                    return $update_system_parameter_value;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_leave_without_pay
    # Purpose    : Insert leave without pay leave
    #
    # Returns    : Date
    #
    # -------------------------------------------------------------
    public function insert_leave_without_pay($employee_id, $current_date, $current_time, $last_attendance_record, $username){
        if ($this->databaseConnection()) {
            $start_date = strtotime($current_date);
            $end_date = strtotime($last_attendance_record);
            $date_difference = $start_date - $end_date;
            $days_between = floor($date_difference / (60 * 60 * 24));
            $error = '';

            if($days_between > 0){
                for($i = 1; $i < $days_between; $i++){
                    $absent_date = $this->check_date('empty', $last_attendance_record, '', 'Y-m-d', '+'. $i .' day', '', '');
                    $absent_day = $this->check_week_day($this->check_date('empty', $absent_date, '', 'w', '', '', ''));

                    $check_if_day_off = $this->check_if_day_off($employee_id, $absent_day);
                    $check_if_holiday = $this->check_if_holiday($absent_date);
                    $check_if_filed_leave = $this->check_if_filed_leave($employee_id, $absent_date);

                    if($check_if_day_off == 0 && $check_if_filed_leave == 0 && ($check_if_holiday == 2 || $check_if_holiday == 0)){
                        $office_shift_details = $this->get_data_details_two_parameter('office shift', $employee_id, $absent_day);
                        $office_shift_time_in = $office_shift_details[0]['TIME_IN'];
                        $office_shift_time_out = $office_shift_details[0]['TIME_OUT'];

                        if($check_if_holiday == 2){
                            $leave_type = 'LEAVETP4';
                            $reason = 'Special Non-Working Holiday (System Generated)';
                        }
                        else{
                            $leave_type = 'LEAVETP3';
                            $reason = 'Absent (System Generated)';
                        }

                        $insert_employee_leave = $this->insert_employee_leave($employee_id, $leave_type, $absent_date, $office_shift_time_in, $office_shift_time_out, $reason, '4', $current_date, $current_time, $username);

                        if($insert_employee_leave == '1'){
                            $update_leave_entitlement_count = $this->update_leave_entitlement_count($employee_id, $leave_type, $absent_date, 1, $username);

                            if($update_leave_entitlement_count != '1'){
                                $error .= $update_leave_entitlement_count;
                            }
                        }
                        else{
                            $error .= $insert_employee_leave;
                        }
                    }
                }

                if(empty($error)){
                    return '1';
                }
                else{
                    return $error;
                }
            }
            else{
                return '1';
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_payroll_group
    # Purpose    : Insert payroll group
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_payroll_group($payroll_group, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            # Get system parameter id
            $system_parameter = $this->get_system_parameter('24', 1);
            $paramnum = $system_parameter[0]['PARAMNUM'];
            $id = $system_parameter[0]['ID'];

            $sql = $this->db_connection->prepare('INSERT INTO tblpayrollgroup (PAYROLL_GROUP_ID, PAYROLL_GROUP_DESC, RECORD_LOG) VALUES (:id, :payroll_group, :record_log)');
            $sql->bindParam(':id', $id);
            $sql->bindParam(':payroll_group', $payroll_group);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                # Update system parameter value
                $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '24', $username);

                if($update_system_parameter_value){
                    $insert_user_log = $this->insert_logs($username, 'Insert Payroll Group', 'User ' . $username . ' inserted payroll group (' . $id . ').');

                    if($insert_user_log == '1'){
                        return '1';
                    }
                    else{
                        return $insert_user_log;
                    }
                }
                else{
                    return $update_system_parameter_value;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_payroll_group_employee
    # Purpose    : Insert payroll group employee
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_payroll_group_employee($payroll_group_id, $employee, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('INSERT INTO tblpayrollgroupemployee (PAYROLL_GROUP_ID, EMPLOYEE_ID, RECORD_LOG) VALUES (:payroll_group_id, :employee, :record_log)');
            $sql->bindParam(':payroll_group_id', $payroll_group_id);
            $sql->bindParam(':employee', $employee);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                return '1';
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_attendance_adjustment
    # Purpose    : Insert attendance adjustment
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_attendance_adjustment($attachment_file_tmp_name, $attachment_file_actual_ext, $attendance_id, $employee_id, $time_in_date, $time_in_org, $time_in, $time_out_date_org, $time_out_date, $time_out_org, $time_out, $reason, $systemdate, $current_time, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            # Get system parameter id
            $system_parameter = $this->get_system_parameter('25', 1);
            $paramnum = $system_parameter[0]['PARAMNUM'];
            $id = $system_parameter[0]['ID'];

            $fileNew = $id . '.' . $attachment_file_actual_ext;
            $fileDestination = 'assets/images/attendance_adjustment/' . $fileNew;
            $file_path ='./assets/images/attendance_adjustment/' . $fileNew;

            $sql = $this->db_connection->prepare("INSERT INTO tblattendanceadustment (ADJUSTMENT_ID, EMPLOYEE_ID, ATTENDANCE_ID, TIME_IN_DATE, TIME_IN_ORG, TIME_IN_ADJ, TIME_OUT_DATE_ORG, TIME_OUT_DATE_ADJ, TIME_OUT_ORG, TIME_OUT_ADJ, STATUS, ATTACHMENT, REASON, FILE_DATE, FILE_TIME, RECORD_LOG) VALUES (:id, :employee_id, :attendance_id, :time_in_date, :time_in_org, :time_in, :time_out_date_org, :time_out_date, :time_out_org, :time_out, '0', :file_path, :reason, :systemdate, :current_time, :record_log)");
            $sql->bindParam(':id', $id);
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':attendance_id', $attendance_id);
            $sql->bindParam(':time_in_date', $time_in_date);
            $sql->bindParam(':time_in_org', $time_in_org);
            $sql->bindParam(':time_in', $time_in);
            $sql->bindParam(':time_out_date_org', $time_out_date_org);
            $sql->bindParam(':time_out_date', $time_out_date);
            $sql->bindParam(':time_out_org', $time_out_org);
            $sql->bindParam(':time_out', $time_out);
            $sql->bindParam(':file_path', $file_path);
            $sql->bindParam(':reason', $reason);
            $sql->bindParam(':systemdate', $systemdate);
            $sql->bindParam(':current_time', $current_time);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                if(move_uploaded_file($attachment_file_tmp_name, $fileDestination)){
                    # Update system parameter value
                    $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '25', $username);

                    if($update_system_parameter_value){
                        $insert_user_log = $this->insert_logs($username, 'Insert Attendance Adjustment Request', 'User ' . $username . ' inserted attendance adjustment request (' . $id . ').');

                        if($insert_user_log == '1'){
                            return '1';
                        }
                        else{
                            return $insert_user_log;
                        }
                    }
                    else{
                        return $update_system_parameter_value;
                    }
                }
                else{
                    return 'There was an error uploading your image.';
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_telephone_log
    # Purpose    : Insert telephone log
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_telephone_log($employee_id, $recipient, $telephone, $initial_call_date, $initial_call_time, $reason, $systemdate, $current_time, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            # Get system parameter id
            $system_parameter = $this->get_system_parameter('26', 1);
            $paramnum = $system_parameter[0]['PARAMNUM'];
            $id = $system_parameter[0]['ID'];

            $sql = $this->db_connection->prepare("INSERT INTO tbltelephonelogsheet (LOG_ID, EMPLOYEE_ID, INITIAL_CALL_DATE, INITIAL_CALL_TIME, RECIPIENT, TELEPHONE, REQUEST_DATE, REQUEST_TIME, STATUS, REASON, RECORD_LOG) VALUES (:id, :employee_id, :initial_call_date, :initial_call_time, :recipient, :telephone, :systemdate, :current_time, '0', :reason, :record_log)");
            $sql->bindParam(':id', $id);
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':initial_call_date', $initial_call_date);
            $sql->bindParam(':initial_call_time', $initial_call_time);
            $sql->bindParam(':recipient', $recipient);
            $sql->bindParam(':telephone', $telephone);
            $sql->bindParam(':systemdate', $systemdate);
            $sql->bindParam(':current_time', $current_time);
            $sql->bindParam(':reason', $reason);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                # Update system parameter value
                $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '26', $username);

                if($update_system_parameter_value){
                    $insert_user_log = $this->insert_logs($username, 'Insert Telephone Log', 'User ' . $username . ' inserted telephone log (' . $id . ').');

                    if($insert_user_log == '1'){
                        return '1';
                    }
                    else{
                        return $insert_user_log;
                    }
                }
                else{
                    return $update_system_parameter_value;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_document
    # Purpose    : Insert document
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
   public function insert_document($document_file_tmp_name, $document_file_ext, $document_file_size, $document_name, $category, $description, $department, $status, $systemdate, $current_time, $username, $tags) {
    if ($this->databaseConnection()) {
        $this->db_connection->beginTransaction();

        try {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            // Get system parameter id
            $system_parameter = $this->get_system_parameter('27', 1);
            $paramnum = $system_parameter[0]['PARAMNUM'];
            $id = $system_parameter[0]['ID'];

            $file_name = $this->generate_file_name(10);
            $fileNew = $file_name . '.dat';
            $fileDestination = 'documents/' . $fileNew;
            $file_path = './documents/' . $file_name;

            // Insert document into `tbldocument`
            $sql = $this->db_connection->prepare("
                INSERT INTO tbldocument
                (DOCUMENT_ID, DOCUMENT_NAME, AUTHOR, DEPARTMENT, DOCUMENT_PATH, DOCUMENT_CATEGORY, DOCUMENT_EXTENSION, DOCUMENT_SIZE, DESCRIPTION, UPLOAD_DATE, UPLOAD_TIME, PUBLISH, RECORD_LOG)
                VALUES
                (:id, :document_name, :username, :department, :file_path, :category, :document_file_ext, :document_file_size, :description, :systemdate, :current_time, :status, :record_log)
            ");
            $sql->bindParam(':id', $id);
            $sql->bindParam(':document_name', $document_name);
            $sql->bindParam(':username', $username);
            $sql->bindParam(':department', $department);
            $sql->bindParam(':file_path', $file_path);
            $sql->bindParam(':category', $category);
            $sql->bindParam(':document_file_ext', $document_file_ext);
            $sql->bindParam(':document_file_size', $document_file_size);
            $sql->bindParam(':description', $description);
            $sql->bindParam(':systemdate', $systemdate);
            $sql->bindParam(':current_time', $current_time);
            $sql->bindParam(':status', $status);
            $sql->bindParam(':record_log', $record_log);

            if ($sql->execute()) {
                // Move the uploaded file to the destination folder
                if (!move_uploaded_file($document_file_tmp_name, $fileDestination)) {
                    throw new Exception('There was an error uploading your file.');
                }

                // Insert tags if provided
                if (!empty($tags)) {
                    $this->insert_document_tags($id, $tags);
                }

                // Update system parameter value
                $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '27', $username);
                if (!$update_system_parameter_value) {
                    throw new Exception('Failed to update system parameter.');
                }

                // Insert user log
                $insert_user_log = $this->insert_logs($username, 'Insert Document', 'User ' . $username . ' inserted document (' . $id . ').');
                if ($insert_user_log != '1') {
                    throw new Exception($insert_user_log);
                }

                // Commit transaction
                $this->db_connection->commit();
                return '1';
            } else {
                throw new Exception($sql->errorInfo()[2]);
            }
        } catch (Exception $e) {
            // Rollback transaction on error
            $this->db_connection->rollBack();
            return "Error: " . $e->getMessage();
        }
    }
    return "Error: Database connection failed.";
}

public function insert_document_tags($document_id, $tags) {
    if ($this->databaseConnection()) {
        try {
            // Split tags by comma or space
            $tag_array = preg_split('/[,\s]+/', $tags);
            foreach ($tag_array as $tag) {
                $tag = trim($tag);
                if (!empty($tag)) {
                    // Check if tag exists
                    $check_tag = $this->db_connection->prepare("SELECT TAG_ID FROM tags WHERE LOWER(TRIM(TAG_NAME)) = LOWER(TRIM(:tag_name))");
                    $check_tag->bindParam(':tag_name', $tag);
                    $check_tag->execute();

                    if ($check_tag->rowCount() > 0) {
                        $tag_id = $check_tag->fetchColumn();
                    } else {
                        // Insert new tag
                        $insert_tag = $this->db_connection->prepare("INSERT INTO tags (TAG_NAME) VALUES (:tag_name)");
                        $insert_tag->bindParam(':tag_name', $tag);
                        $insert_tag->execute();
                        $tag_id = $this->db_connection->lastInsertId();
                    }

                    // Link tag to document if not already linked
                    $link_tag = $this->db_connection->prepare("INSERT INTO document_tags (DOCUMENT_ID, TAG_ID) VALUES (:document_id, :tag_id)");
                    $link_tag->bindParam(':document_id', $document_id);
                    $link_tag->bindParam(':tag_id', $tag_id);
                    $link_tag->execute();
                }
            }
            return '1';
        } catch (Exception $e) {
            return "Error: " . $e->getMessage();
        }
    }
    return "Error: Database connection failed.";
}

public function update_document_tags($document_id, $tags) {
    if ($this->databaseConnection()) {
        try {
            // Begin transaction
            $this->db_connection->beginTransaction();

            // Delete existing tags for this document
            $delete_tags = $this->db_connection->prepare("DELETE FROM document_tags WHERE DOCUMENT_ID = :document_id");
            $delete_tags->bindParam(':document_id', $document_id);
            $delete_tags->execute();

            // Insert new tags
            $this->insert_document_tags($document_id, $tags);

            // Commit transaction
            $this->db_connection->commit();
            return '1';
        } catch (Exception $e) {
            // Rollback transaction on error
            $this->db_connection->rollBack();
            return "Error: " . $e->getMessage();
        }
    }
    return "Error: Database connection failed.";
}

    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_document_import
    # Purpose    : Insert document
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_document_import($document_id, $document_name, $author, $department, $document_path, $category, $extenstion, $size, $description, $upload_date, $upload_time, $employee_id, $systemdate, $current_time, $username){
        if ($this->databaseConnection()) {
            $record_log = 'IMP->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare("INSERT INTO tbldocument (DOCUMENT_ID, DOCUMENT_NAME, AUTHOR, DEPARTMENT, DOCUMENT_PATH, DOCUMENT_CATEGORY, DOCUMENT_EXTENSION, DOCUMENT_SIZE, DESCRIPTION, UPLOAD_DATE, UPLOAD_TIME, PUBLISH, PUBLISH_BY, PUBLISH_DATE, PUBLISH_TIME, RECORD_LOG) VALUES (:document_id, :document_name, :author, :department, :document_path, :category, :extenstion, :size, :description, :upload_date, :upload_time, '1', :employee_id, :systemdate, :current_time, :record_log)");
            $sql->bindParam(':document_id', $document_id);
            $sql->bindParam(':document_name', $document_name);
            $sql->bindParam(':author', $author);
            $sql->bindParam(':department', $department);
            $sql->bindParam(':document_path', $document_path);
            $sql->bindParam(':category', $category);
            $sql->bindParam(':extenstion', $extenstion);
            $sql->bindParam(':size', $size);
            $sql->bindParam(':description', $description);
            $sql->bindParam(':upload_date', $upload_date);
            $sql->bindParam(':upload_time', $upload_time);
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':systemdate', $systemdate);
            $sql->bindParam(':current_time', $current_time);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                return '1';
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_document_setting
    # Purpose    : Insert document setting
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_document_setting($setting_id, $max_file_size, $authentication, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare("INSERT INTO tbldocumentsettings (SETTINGS_ID, MAX_FILE_SIZE, AUTHORIZATION, RECORD_LOG) VALUES (:setting_id, :max_file_size, :authentication, :record_log)");
            $sql->bindParam(':setting_id', $setting_id);
            $sql->bindParam(':max_file_size', $max_file_size);
            $sql->bindParam(':authentication', $authentication);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Insert Document Management Settings', 'User ' . $username . ' inserted document management settings (' . $setting_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_document_file_type
    # Purpose    : Insert document file type
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_document_file_type($file_type, $setting_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare("INSERT INTO tbldocumentfiletype (SETTINGS_ID, FILE_TYPE, RECORD_LOG) VALUES (:setting_id, :file_type, :record_log)");
            $sql->bindParam(':setting_id', $setting_id);
            $sql->bindParam(':file_type', $file_type);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Insert Document File Type', 'User ' . $username . ' inserted document file type (' . $setting_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_document_authorizer
    # Purpose    : Insert document authorizer
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_document_authorizer($department, $authorizer, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare("INSERT INTO tbldocumentauthorizer (DEPARTMENT, AUTHORIZER, RECORD_LOG) VALUES (:department, :authorizer, :record_log)");
            $sql->bindParam(':department', $department);
            $sql->bindParam(':authorizer', $authorizer);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Insert Document Authorizer', 'User ' . $username . ' inserted document authorizer ('. $authorizer .') on department (' . $department . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_department_document_permission
    # Purpose    : Insert department document permission
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_department_document_permission($document_id, $permission, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            $permission_str = explode('-', $permission);
            $department = $permission_str[0];
            $doc_permission = $permission_str[1];

            $sql = $this->db_connection->prepare("INSERT INTO tbldocumentdepartmentpermission (DOCUMENT_ID, DEPARTMENT_ID, PERMISSION, RECORD_LOG) VALUES (:document_id, :department, :doc_permission, :record_log)");
            $sql->bindParam(':document_id', $document_id);
            $sql->bindParam(':department', $department);
            $sql->bindParam(':doc_permission', $doc_permission);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Insert Department Document Permission', 'User ' . $username . ' inserted document permission ('. $document_id .') on department (' . $department . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_department_document_permission_import
    # Purpose    : Insert department document permission import
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_department_document_permission_import($document_id, $department, $permission, $username){
        if ($this->databaseConnection()) {
            $record_log = 'IMP->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare("INSERT INTO tbldocumentdepartmentpermission (DOCUMENT_ID, DEPARTMENT_ID, PERMISSION, RECORD_LOG) VALUES (:document_id, :department, :permission, :record_log)");
            $sql->bindParam(':document_id', $document_id);
            $sql->bindParam(':department', $department);
            $sql->bindParam(':permission', $permission);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Import Department Document Permission', 'User ' . $username . ' inserted document permission ('. $document_id .') on department (' . $department . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_employee_document_permission
    # Purpose    : Insert employee document permission
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_employee_document_permission($document_id, $permission, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            $permission_str = explode('-', $permission);
            $employee_id = $permission_str[0];
            $doc_permission = $permission_str[1];

            $sql = $this->db_connection->prepare("INSERT INTO tbldocumentemployeepermission (DOCUMENT_ID, EMPLOYEE_ID, PERMISSION, RECORD_LOG) VALUES (:document_id, :employee_id, :doc_permission, :record_log)");
            $sql->bindParam(':document_id', $document_id);
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':doc_permission', $doc_permission);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Insert Employee Document Permission', 'User ' . $username . ' imported document permission ('. $document_id .') on employee (' . $employee_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_employee_document_permission_import
    # Purpose    : Insert employee document permission
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_employee_document_permission_import($document_id, $employee_id, $permission, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare("INSERT INTO tbldocumentemployeepermission (DOCUMENT_ID, EMPLOYEE_ID, PERMISSION, RECORD_LOG) VALUES (:document_id, :employee_id, :permission, :record_log)");
            $sql->bindParam(':document_id', $document_id);
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':permission', $permission);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Import Employee Document Permission', 'User ' . $username . ' imported document permission ('. $document_id .') on employee (' . $employee_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_transmittal
    # Purpose    : Insert transmittal
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_transmittal($description, $department, $priority_person, $systemdate, $current_time, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            $employee_profile_details = $this->get_data_details_one_parameter('employee profile', $username);
            $employee_id = $employee_profile_details[0]['EMPLOYEE_ID'];
            $employee_department = $employee_profile_details[0]['DEPARTMENT'];

            # Get system parameter id
            $system_parameter = $this->get_system_parameter('28', 1);
            $paramnum = $system_parameter[0]['PARAMNUM'];
            $id = $system_parameter[0]['ID'];

            $sql = $this->db_connection->prepare("INSERT INTO tbltransmittal (TRANSMITTAL_ID, DESCRIPTION, STATUS, CURRENT_EMPLOYEE, CURRENT_DEPARTMENT, TRANSMITTED_EMPLOYEE, TRANSMITTED_DEPARTMENT, LAST_TRANSACTION_DATE, LAST_TRANSACTION_TIME, RECORD_LOG) VALUES (:id, :description, '0', :employee_id, :employee_department, :priority_person, :department, :systemdate, :current_time, :record_log)");
            $sql->bindParam(':id', $id);
            $sql->bindParam(':description', $description);
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':priority_person', $priority_person);
            $sql->bindParam(':employee_department', $employee_department);
            $sql->bindParam(':department', $department);
            $sql->bindParam(':systemdate', $systemdate);
            $sql->bindParam(':current_time', $current_time);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                # Update system parameter value
                $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '28', $username);

                if($update_system_parameter_value){
                    $insert_transmittal_history = $this->insert_transmittal_history($id, '0', $employee_id, $employee_department, $priority_person, $department, $systemdate, $current_time, '', $username);

                    if($insert_transmittal_history == '1'){
                        return '1';
                    }
                    else{
                        return $insert_transmittal_history;
                    }
                }
                else{
                    return $update_system_parameter_value;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_transmittal_import
    # Purpose    : Insert transmittal
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_transmittal_import($transmittal_id, $description, $status, $current_employee, $current_department, $transmitted_employee, $transmitted_department, $last_transaction_date, $last_transaction_time, $username){
        if ($this->databaseConnection()) {
            $record_log = 'IMP->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare("INSERT INTO tbltransmittal (TRANSMITTAL_ID, DESCRIPTION, STATUS, CURRENT_EMPLOYEE, CURRENT_DEPARTMENT, TRANSMITTED_EMPLOYEE, TRANSMITTED_DEPARTMENT, LAST_TRANSACTION_DATE, LAST_TRANSACTION_TIME, RECORD_LOG) VALUES (:transmittal_id, :description, :status, :current_employee, :current_department, :transmitted_employee, :transmitted_department, :last_transaction_date, :last_transaction_time, :record_log)");
            $sql->bindParam(':transmittal_id', $transmittal_id);
            $sql->bindParam(':description', $description);
            $sql->bindParam(':status', $status);
            $sql->bindParam(':current_employee', $current_employee);
            $sql->bindParam(':current_department', $current_department);
            $sql->bindParam(':transmitted_employee', $transmitted_employee);
            $sql->bindParam(':transmitted_department', $transmitted_department);
            $sql->bindParam(':last_transaction_date', $last_transaction_date);
            $sql->bindParam(':last_transaction_time', $last_transaction_time);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                return '1';
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_transmittal_history
    # Purpose    : Insert transmittal history
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_transmittal_history($transmittal_id, $type, $employee_id, $employee_department, $priority_person, $department, $systemdate, $current_time, $received_by, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');
            # Get system parameter id
            $system_parameter = $this->get_system_parameter('29', 1);
            $paramnum = $system_parameter[0]['PARAMNUM'];
            $id = $system_parameter[0]['ID'];

            $sql = $this->db_connection->prepare("INSERT INTO tbltransmittalhistory (HISTORY_ID, TRANSMITTAL_ID, TRASMITTAL_TYPE, EMPLOYEE_FROM, DEPARTMENT_FROM, EMPLOYEE_TO, DEPARTMENT_TO, TRANSACTION_DATE, TRANSACTION_TIME, RECEIVED_BY, RECORD_LOG) VALUES (:id, :transmittal_id, :type, :employee_id, :employee_department, :priority_person, :department, :systemdate, :current_time, :received_by, :record_log)");
            $sql->bindParam(':id', $id);
            $sql->bindParam(':transmittal_id', $transmittal_id);
            $sql->bindParam(':type', $type);
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':employee_department', $employee_department);
            $sql->bindParam(':priority_person', $priority_person);
            $sql->bindParam(':department', $department);
            $sql->bindParam(':systemdate', $systemdate);
            $sql->bindParam(':current_time', $current_time);
            $sql->bindParam(':received_by', $received_by);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                # Update system parameter value
                $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '29', $username);

                if($update_system_parameter_value){
                    return '1';
                }
                else{
                    return $update_system_parameter_value;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_transmittal_history_import
    # Purpose    : Insert transmittal history
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_transmittal_history_import($transmittal_id, $transmittal_type, $employee_from, $department_from, $employee_to, $department_to, $transaction_date, $transaction_time, $received_by, $username){
        if ($this->databaseConnection()) {
            $record_log = 'IMP->' . $username . '->' . date('Y-m-d h:i:s');
            # Get system parameter id
            $system_parameter = $this->get_system_parameter('29', 1);
            $paramnum = $system_parameter[0]['PARAMNUM'];
            $id = $system_parameter[0]['ID'];

            $sql = $this->db_connection->prepare("INSERT INTO tbltransmittalhistory (HISTORY_ID, TRANSMITTAL_ID, TRASMITTAL_TYPE, EMPLOYEE_FROM, DEPARTMENT_FROM, EMPLOYEE_TO, DEPARTMENT_TO, TRANSACTION_DATE, TRANSACTION_TIME, RECEIVED_BY, RECORD_LOG) VALUES (:id, :transmittal_id, :transmittal_type, :employee_from, :department_from, :employee_to, :department_to, :transaction_date, :transaction_time, :received_by, :record_log)");
            $sql->bindParam(':id', $id);
            $sql->bindParam(':transmittal_id', $transmittal_id);
            $sql->bindParam(':transmittal_type', $transmittal_type);
            $sql->bindParam(':employee_from', $employee_from);
            $sql->bindParam(':department_from', $department_from);
            $sql->bindParam(':employee_to', $employee_to);
            $sql->bindParam(':department_to', $department_to);
            $sql->bindParam(':transaction_date', $transaction_date);
            $sql->bindParam(':transaction_time', $transaction_time);
            $sql->bindParam(':received_by', $received_by);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                # Update system parameter value
                $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '29', $username);

                if($update_system_parameter_value){
                    return '1';
                }
                else{
                    return $update_system_parameter_value;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_suggest_to_win
    # Purpose    : Insert suggest to win
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_suggest_to_win($stw_attachment_file_tmp_name, $stw_attachment_file_actual_ext, $title, $description, $reason, $benefits, $systemdate, $current_time, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');
            $employee_details = $this->get_data_details_one_parameter('employee profile', $username);
            $employee_id = $employee_details[0]['EMPLOYEE_ID'];

            # Get system parameter id
            $system_parameter = $this->get_system_parameter('30', 1);
            $paramnum = $system_parameter[0]['PARAMNUM'];
            $id = $system_parameter[0]['ID'];

            if(!empty($stw_attachment_file_tmp_name)){
                $file_name = $this->generate_file_name(10);
                $fileNew = $file_name . '.' . $stw_attachment_file_actual_ext;
                $fileDestination = 'stw/' . $fileNew;
                $file_path ='./stw/' . $fileNew;

                $sql = $this->db_connection->prepare("INSERT INTO tblstw (STW_ID, EMPLOYEE_ID, STATUS, FILE_PATH, TITLE, DESCRIPTION, REASON, BENEFITS, POST_DATE, POST_TIME, RECORD_LOG) VALUES (:id, :employee_id, '0', :file_path, :title, :description, :reason, :benefits, :systemdate, :current_time, :record_log)");
                $sql->bindParam(':id', $id);
                $sql->bindParam(':employee_id', $employee_id);
                $sql->bindParam(':file_path', $file_path);
                $sql->bindParam(':title', $title);
                $sql->bindParam(':description', $description);
                $sql->bindParam(':reason', $reason);
                $sql->bindParam(':benefits', $benefits);
                $sql->bindParam(':systemdate', $systemdate);
                $sql->bindParam(':current_time', $current_time);
                $sql->bindParam(':record_log', $record_log);

                if($sql->execute()){
                    if(move_uploaded_file($stw_attachment_file_tmp_name, $fileDestination)){
                        # Update system parameter value
                        $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '30', $username);

                        if($update_system_parameter_value){
                            $insert_user_log = $this->insert_logs($username, 'Insert Suggest To Win', 'User ' . $username . ' inserted suggest to win (' . $id . ').');

                            if($insert_user_log == '1'){
                                return '1';
                            }
                            else{
                                return $insert_user_log;
                            }
                        }
                        else{
                            return $update_system_parameter_value;
                        }
                    }
                    else{
                        return 'There was an error uploading your image.';
                    }
                }
                else{
                    return $sql->errorInfo()[2];
                }
            }
            else{
                $sql = $this->db_connection->prepare("INSERT INTO tblstw (STW_ID, EMPLOYEE_ID, STATUS, TITLE, DESCRIPTION, REASON, BENEFITS, POST_DATE, POST_TIME, RECORD_LOG) VALUES (:id, :employee_id, '0', :title, :description, :reason, :benefits, :systemdate, :current_time, :record_log)");
                $sql->bindParam(':id', $id);
                $sql->bindParam(':employee_id', $employee_id);
                $sql->bindParam(':title', $title);
                $sql->bindParam(':description', $description);
                $sql->bindParam(':reason', $reason);
                $sql->bindParam(':benefits', $benefits);
                $sql->bindParam(':systemdate', $systemdate);
                $sql->bindParam(':current_time', $current_time);
                $sql->bindParam(':record_log', $record_log);

                if($sql->execute()){
                    # Update system parameter value
                    $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '30', $username);

                    if($update_system_parameter_value){
                        $insert_user_log = $this->insert_logs($username, 'Insert Suggest To Win', 'User ' . $username . ' inserted suggest to win (' . $id . ').');

                        if($insert_user_log == '1'){
                            return '1';
                        }
                        else{
                            return $insert_user_log;
                        }
                    }
                    else{
                        return $update_system_parameter_value;
                    }
                }
                else{
                    return $sql->errorInfo()[2];
                }
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_suggest_to_win_vote
    # Purpose    : Insert suggest to win vote
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_suggest_to_win_vote($stw_id, $employee_id, $satisfaction, $quality, $innovation, $feasibility, $total, $remarks, $systemdate, $current_time, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            # Get system parameter id
            $system_parameter = $this->get_system_parameter('31', 1);
            $paramnum = $system_parameter[0]['PARAMNUM'];
            $id = $system_parameter[0]['ID'];

            $sql = $this->db_connection->prepare('INSERT INTO tblstwvote (VOTE_ID, STW_ID, EMPLOYEE_ID, SATISFACTION, QUALITY, INNOVATION, FEASIBILITY, TOTAL, VOTE_DATE, VOTE_TIME, REMARKS, RECORD_LOG) VALUES (:id, :stw_id, :employee_id, :satisfaction, :quality, :innovation, :feasibility, :total, :systemdate, :current_time, :remarks, :record_log)');
            $sql->bindParam(':id', $id);
            $sql->bindParam(':stw_id', $stw_id);
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':satisfaction', $satisfaction);
            $sql->bindParam(':quality', $quality);
            $sql->bindParam(':innovation', $innovation);
            $sql->bindParam(':feasibility', $feasibility);
            $sql->bindParam(':total', $total);
            $sql->bindParam(':systemdate', $systemdate);
            $sql->bindParam(':current_time', $current_time);
            $sql->bindParam(':remarks', $remarks);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                # Update system parameter value
                $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '31', $username);

                if($update_system_parameter_value){
                    $insert_user_log = $this->insert_logs($username, 'Insert Suggest To Win Vote', 'User ' . $username . ' suggest to win vote (' . $stw_id . ').');

                    if($insert_user_log == '1'){
                        return '1';
                    }
                    else{
                        return $insert_user_log;
                    }
                }
                else{
                    return $update_system_parameter_value;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_suggest_to_win_vote_summary
    # Purpose    : Insert suggest to win vote summary
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_suggest_to_win_vote_summary($stw_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare("SELECT COUNT(STW_ID) AS STW_ID, SUM(SATISFACTION) AS SATISFACTION, SUM(QUALITY) AS QUALITY, SUM(INNOVATION) AS INNOVATION, SUM(FEASIBILITY) AS FEASIBILITY FROM tblstwvote WHERE STW_ID = :stw_id");
            $sql->bindParam(':stw_id', $stw_id);

            if($sql->execute()){
                $row = $sql->fetch();
                $count = $row['STW_ID'];
                $satisfaction = ($row['SATISFACTION'] / $count) * 0.3;
                $quality = ($row['QUALITY'] / $count) * 0.2;
                $innovation = ($row['INNOVATION'] / $count) * 0.2;
                $feasibility = ($row['FEASIBILITY'] / $count) * 0.3;

                $total = $satisfaction + $quality + $innovation + $feasibility;

                $sql = $this->db_connection->prepare("INSERT INTO tblstwvotesummary (STW_ID, SATISFACTION, QUALITY, INNOVATION, FEASIBILITY, TOTAL, RECORD_LOG) VALUES (:stw_id, :satisfaction, :quality, :innovation, :feasibility, :total, :record_log)");
                $sql->bindParam(':stw_id', $stw_id);
                $sql->bindParam(':satisfaction', $satisfaction);
                $sql->bindParam(':quality', $quality);
                $sql->bindParam(':innovation', $innovation);
                $sql->bindParam(':feasibility', $feasibility);
                $sql->bindParam(':total', $total);
                $sql->bindParam(':record_log', $record_log);

                if($sql->execute()){
                    $insert_user_log = $this->insert_logs($username, 'Insert Suggest To Win Vote Summary', 'User ' . $username . ' inserted suggest to win vote summary (' . $stw_id . ').');

                    if($insert_user_log == '1'){
                        return '1';
                    }
                    else{
                        return $insert_user_log;
                    }
                }
                else{
                    return $sql->errorInfo()[2];
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_training_room_log
    # Purpose    : Insert training room log
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_training_room_log($employee_id, $start_date, $start_time, $end_time, $other_participants, $lights, $fan, $aircon, $reason, $systemdate, $current_time, $participants, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');
            $error = '';

            # Get system parameter id
            $system_parameter = $this->get_system_parameter('32', 1);
            $paramnum = $system_parameter[0]['PARAMNUM'];
            $id = $system_parameter[0]['ID'];

            $sql = $this->db_connection->prepare("INSERT INTO tbltrainingroomlogsheet (LOG_ID, EMPLOYEE_ID, START_DATE, START_TIME, END_TIME, REQUEST_DATE, REQUEST_TIME, STATUS, OTHER_PARTICIPANT, FAN, AIRCON, LIGHTS, REASON, RECORD_LOG) VALUES (:id, :employee_id, :start_date, :start_time, :end_time, :systemdate, :current_time, '0', :other_participants, :fan, :aircon, :lights, :reason, :record_log)");
            $sql->bindParam(':id', $id);
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':start_date', $start_date);
            $sql->bindParam(':start_time', $start_time);
            $sql->bindParam(':end_time', $end_time);
            $sql->bindParam(':systemdate', $systemdate);
            $sql->bindParam(':current_time', $current_time);
            $sql->bindParam(':other_participants', $other_participants);
            $sql->bindParam(':fan', $fan);
            $sql->bindParam(':aircon', $aircon);
            $sql->bindParam(':lights', $lights);
            $sql->bindParam(':reason', $reason);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                # Update system parameter value
                $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '32', $username);

                if($update_system_parameter_value){
                    $insert_user_log = $this->insert_logs($username, 'Insert Training Room Log', 'User ' . $username . ' inserted training room log (' . $id . ').');

                    if($insert_user_log == '1'){
                        $participants = explode(',', $participants);

                        foreach($participants as $participant){
                            $insert_training_room_log_participant = $this->insert_training_room_log_participant($id, $participant, $username);

                            if($insert_training_room_log_participant != '1'){
                                $error = $insert_training_room_log_participant;
                            }
                        }

                        if(empty($error)){
                            return '1';
                        }
                        else{
                            return $error;
                        }
                    }
                    else{
                        return $insert_user_log;
                    }
                }
                else{
                    return $update_system_parameter_value;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_training_room_log_participant
    # Purpose    : Insert training room log participant
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_training_room_log_participant($log_id, $participant, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare("INSERT INTO tbltrainingroomparticipant (LOG_ID, EMPLOYEE_ID, RECORD_LOG) VALUES (:log_id, :participant, :record_log)");
            $sql->bindParam(':log_id', $log_id);
            $sql->bindParam(':participant', $participant);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Insert Training Room Log Patricipant', 'User ' . $username . ' inserted training room log participant (' . $log_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_weekly_cash_flow
    # Purpose    : Insert weekly cash flow
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_weekly_cash_flow($employee_id, $employee_department, $employee_branch, $start_date, $end_date, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');
            $error = '';

            # Get system parameter id
            $system_parameter = $this->get_system_parameter('35', 1);
            $paramnum = $system_parameter[0]['PARAMNUM'];
            $id = $system_parameter[0]['ID'];

            $sql = $this->db_connection->prepare("INSERT INTO tblwcf (WCF_ID, EMPLOYEE_ID, DEPARTMENT, BRANCH, STATUS, START_DATE, END_DATE, RECORD_LOG) VALUES (:id, :employee_id, :employee_department, :employee_branch, '0', :start_date, :end_date, :record_log)");
            $sql->bindParam(':id', $id);
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':employee_department', $employee_department);
            $sql->bindParam(':employee_branch', $employee_branch);
            $sql->bindParam(':start_date', $start_date);
            $sql->bindParam(':end_date', $end_date);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                # Update system parameter value
                $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '35', $username);

                if($update_system_parameter_value){
                    $insert_user_log = $this->insert_logs($username, 'Insert Weekly Cash Flow', 'User ' . $username . ' inserted weekly cash flow (' . $id . ').');

                    if($insert_user_log == '1'){
                        return '1';
                    }
                    else{
                        return $insert_user_log;
                    }
                }
                else{
                    return $update_system_parameter_value;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_weekly_cash_flow_particulars
    # Purpose    : Insert weekly cash flow particulars
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_weekly_cash_flow_particulars($wcf_id, $details, $wcf_type, $wcf_loan_type, $monday, $tuesday, $wednesday, $thursday, $friday, $total, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');
            $error = '';

            # Get system parameter id
            $system_parameter = $this->get_system_parameter('36', 1);
            $paramnum = $system_parameter[0]['PARAMNUM'];
            $id = $system_parameter[0]['ID'];

            $sql = $this->db_connection->prepare("INSERT INTO tblwcfparticulars (PARTICULAR_ID, WCF_ID, DETAILS, WCF_TYPE, LOAN_WCF_TYPE, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, TOTAL, RECORD_LOG) VALUES (:id, :wcf_id, :details, :wcf_type, :wcf_loan_type, :monday, :tuesday, :wednesday, :thursday, :friday, :total, :record_log)");
            $sql->bindParam(':id', $id);
            $sql->bindParam(':wcf_id', $wcf_id);
            $sql->bindParam(':details', $details);
            $sql->bindParam(':wcf_type', $wcf_type);
            $sql->bindParam(':wcf_loan_type', $wcf_loan_type);
            $sql->bindParam(':monday', $monday);
            $sql->bindParam(':tuesday', $tuesday);
            $sql->bindParam(':wednesday', $wednesday);
            $sql->bindParam(':thursday', $thursday);
            $sql->bindParam(':friday', $friday);
            $sql->bindParam(':total', $total);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                # Update system parameter value
                $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '36', $username);

                if($update_system_parameter_value){
                    $insert_user_log = $this->insert_logs($username, 'Insert Weekly Cash Flow Particulars', 'User ' . $username . ' inserted weekly cash flow particular (' . $id . ').');

                    if($insert_user_log == '1'){
                        return '1';
                    }
                    else{
                        return $insert_user_log;
                    }
                }
                else{
                    return $update_system_parameter_value;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_ticket
    # Purpose    : Insert ticket
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_ticket($ticket_id, $employee_id, $employee_department, $ticket_department, $priority_person, $category, $subject, $description, $due_date, $due_time, $systemdate, $current_time, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');
            $error = '';

            $sql = $this->db_connection->prepare("INSERT INTO tblticket (TICKET_ID, REQUESTER, DEPARTMENT, CATEGORY, ASSIGNED_DEPARTMENT, ASSIGNED_EMPLOYEE, SUBJECT, DESCRIPTION, PRIORITY, STATUS, DUE_DATE, DUE_TIME, CREATED_DATE, CREATED_TIME, RECORD_LOG) VALUES (:ticket_id, :employee_id, :employee_department, :category, :ticket_department, :priority_person, :subject, :description, '2', '0', :due_date, :due_time, :systemdate, :current_time, :record_log)");
            $sql->bindParam(':ticket_id', $ticket_id);
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':employee_department', $employee_department);
            $sql->bindParam(':category', $category);
            $sql->bindParam(':ticket_department', $ticket_department);
            $sql->bindParam(':priority_person', $priority_person);
            $sql->bindParam(':subject', $subject);
            $sql->bindParam(':description', $description);
            $sql->bindParam(':due_date', $due_date);
            $sql->bindParam(':due_time', $due_time);
            $sql->bindParam(':systemdate', $systemdate);
            $sql->bindParam(':current_time', $current_time);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Insert Ticket', 'User ' . $username . ' inserted ticket (' . $ticket_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_ticket_attachment
    # Purpose    : Insert ticket attachment
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_ticket_attachment($ticket_id, $fileName, $fileTmpName, $fileActualExt, $employee_id, $systemdate, $current_time, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            # Get system parameter id
            $system_parameter = $this->get_system_parameter('38', 1);
            $paramnum = $system_parameter[0]['PARAMNUM'];
            $id = $system_parameter[0]['ID'];

            # Set image destination
            $fileNew = $this->generate_file_name(10) . '.' . $fileActualExt;
            $fileDestination = './ticket/' . $fileNew;
            $filePath = './ticket/' . $fileNew;

            if(move_uploaded_file($fileTmpName, $fileDestination)){
                $sql = $this->db_connection->prepare('INSERT INTO tblticketattachment (ATTACHMENT_ID, TICKET_ID, FILE_NAME, FILE_PATH, UPLOAD_BY, UPLOAD_DATE, UPLOAD_TIME, RECORD_LOG) VALUES (:id, :ticket_id, :fileName, :filePath, :employee_id, :systemdate, :current_time, :record_log)');
                $sql->bindParam(':id', $id);
                $sql->bindParam(':ticket_id', $ticket_id);
                $sql->bindParam(':fileName', $fileName);
                $sql->bindParam(':filePath', $filePath);
                $sql->bindParam(':employee_id', $employee_id);
                $sql->bindParam(':systemdate', $systemdate);
                $sql->bindParam(':current_time', $current_time);
                $sql->bindParam(':record_log', $record_log);

                if($sql->execute()){
                    # Update system parameter value
                    $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '38', $username);

                    if($update_system_parameter_value){
                        $insert_user_log = $this->insert_logs($username, 'Insert Ticket Attachment', 'User ' . $username . ' inserted ticket attachment (' . $id . ').');

                        if($insert_user_log == '1'){
                            return '1';
                        }
                        else{
                            return $insert_user_log;
                        }
                    }
                    else{
                        return $update_system_parameter_value;
                    }
                }
                else{
                    return $sql->errorInfo()[2];
                }
            }
            else{
                return 'There was an error uploading your document.';
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_ticket_note
    # Purpose    : Insert ticket note
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_ticket_note($ticket_id, $note, $employee_id, $systemdate, $current_time, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            # Get system parameter id
            $system_parameter = $this->get_system_parameter('39', 1);
            $paramnum = $system_parameter[0]['PARAMNUM'];
            $id = $system_parameter[0]['ID'];

            $sql = $this->db_connection->prepare('INSERT INTO tblticketnotes (NOTE_ID, TICKET_ID, NOTE_BY, NOTE, NOTE_DATE, NOTE_TIME, RECORD_LOG) VALUES (:id, :ticket_id, :employee_id, :note, :systemdate, :current_time, :record_log)');
            $sql->bindParam(':id', $id);
            $sql->bindParam(':ticket_id', $ticket_id);
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':note', $note);
            $sql->bindParam(':systemdate', $systemdate);
            $sql->bindParam(':current_time', $current_time);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                    # Update system parameter value
                    $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '39', $username);

                    if($update_system_parameter_value){
                        $insert_user_log = $this->insert_logs($username, 'Insert Ticket Note', 'User ' . $username . ' inserted ticket note (' . $ticket_id . ').');

                        if($insert_user_log == '1'){
                            return '1';
                        }
                        else{
                            return $insert_user_log;
                        }
                    }
                    else{
                        return $update_system_parameter_value;
                    }
                }
                else{
                    return $sql->errorInfo()[2];
                }
        }
    }
    # -------------------------------------------------------------

     # -------------------------------------------------------------
    #
    # Name       : insert_ticket_adjustment
    # Purpose    : Insert ticket adjustment
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_ticket_adjustment($ticket_id, $employee_id, $priority_person, $category, $subject, $description, $priority, $due_date, $due_time, $reason, $systemdate, $current_time, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            # Get system parameter id
            $system_parameter = $this->get_system_parameter('40', 1);
            $paramnum = $system_parameter[0]['PARAMNUM'];
            $id = $system_parameter[0]['ID'];

            $ticket_details = $this->get_data_details_one_parameter('ticket', $ticket_id);
            $assigned_employee = $ticket_details[0]['ASSIGNED_EMPLOYEE'];
            $category_org = $ticket_details[0]['CATEGORY'];
            $subject_org = $ticket_details[0]['SUBJECT'];
            $description_org = $ticket_details[0]['DESCRIPTION'];
            $priority_org = $ticket_details[0]['PRIORITY'];
            $due_time_org = $ticket_details[0]['DUE_TIME'];
            $due_date_org = $this->check_date('empty', $ticket_details[0]['DUE_DATE'], '', 'Y-m-d', '', '', '');

            $sql = $this->db_connection->prepare("INSERT INTO tblticketadjustment (ADJUSTMENT_ID, EMPLOYEE_ID, TICKET_ID, STATUS, ASSIGNED_EMPLOYEE_ORG, ASSIGNED_EMPLOYEE_ADJ, CATEGORY_ORG, CATEGORY_ADJ, SUBJECT_ORG, SUBJECT_ADJ, DESCRIPTION_ORG, DESCRIPTION_ADJ, PRIORITY_ORG, PRIORITY_ADJ, DUE_DATE_ORG, DUE_DATE_ADJ, DUE_TIME_ORG, DUE_TIME_ADJ, REASON, REQUEST_DATE, REQUEST_TIME, RECORD_LOG) VALUES (:id, :employee_id, :ticket_id, '0', :assigned_employee, :priority_person, :category_org, :category, :subject_org, :subject, :description_org, :description, :priority_org, :priority, :due_date_org, :due_date, :due_time_org, :due_time, :reason, :systemdate, :current_time, :record_log)");
            $sql->bindParam(':id', $id);
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':ticket_id', $ticket_id);
            $sql->bindParam(':assigned_employee', $assigned_employee);
            $sql->bindParam(':priority_person', $priority_person);
            $sql->bindParam(':category_org', $category_org);
            $sql->bindParam(':category', $category);
            $sql->bindParam(':subject_org', $subject_org);
            $sql->bindParam(':subject', $subject);
            $sql->bindParam(':description_org', $description_org);
            $sql->bindParam(':description', $description);
            $sql->bindParam(':priority_org', $priority_org);
            $sql->bindParam(':priority', $priority);
            $sql->bindParam(':due_date_org', $due_date_org);
            $sql->bindParam(':due_date', $due_date);
            $sql->bindParam(':due_time_org', $due_time_org);
            $sql->bindParam(':due_time', $due_time);
            $sql->bindParam(':reason', $reason);
            $sql->bindParam(':systemdate', $systemdate);
            $sql->bindParam(':current_time', $current_time);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                    # Update system parameter value
                    $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '40', $username);

                    if($update_system_parameter_value){
                        $insert_user_log = $this->insert_logs($username, 'Insert Ticket Adjustment', 'User ' . $username . ' inserted ticket adjustment (' . $id . ').');

                        if($insert_user_log == '1'){
                            return '1';
                        }
                        else{
                            return $insert_user_log;
                        }
                    }
                    else{
                        return $update_system_parameter_value;
                    }
                }
                else{
                    return $sql->errorInfo()[2];
                }
        }
    }
    # -------------------------------------------------------------
     # -------------------------------------------------------------
    #
    # Name       : insert_system_notification
    # Purpose    : Insert system notification
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_system_notification($type, $notification_from, $notification_to, $notification_title, $notification, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');
            $systemdate = date('Y-m-d');
            $current_time = date('H:i:s');

            # Get system parameter id
            $system_parameter = $this->get_system_parameter('41', 1);
            $paramnum = $system_parameter[0]['PARAMNUM'];
            $id = $system_parameter[0]['ID'];

            switch ($type) {
                case 'Employee Attendance':
                    $link = 'employee-attendance-record.php';
                    break;
                case 'Reject Attendance Adjustment':
                    $link = 'employee-attendance-record.php';
                    break;
                case 'Cancel Attendance Adjustment':
                    $link = 'employee-attendance-record.php';
                    break;
                case 'Recommend Attendance Adjustment':
                    $link = 'employee-attendance-record.php';
                    break;
                case 'Approve Attendance Adjustment':
                    $link = 'employee-attendance-record.php';
                    break;
                case 'Attendance Adjustment':
                    $link = 'attendance-adjustment-recommendation.php';
                    break;
                case 'Attendance Adjustment Recommendation':
                    $link = 'attendance-adjustment.php';
                    break;
                case 'Leave Application':
                    $link = 'leave-approval.php';
                    break;
                case 'Approve Leave':
                    $link = 'leave-application.php';
                    break;
                case 'Reject Leave':
                    $link = 'leave-application.php';
                    break;
                case 'Cancel Leave':
                    $link = 'leave-application.php';
                    break;
                case 'Telephone Log':
                    $link = 'telephone-log-approval.php';
                    break;
                case 'Cancel Telephone Log':
                    $link = 'telephone-log.php';
                    break;
                case 'Approve Telephone Log':
                    $link = 'telephone-log.php';
                    break;
                case 'Reject Telephone Log':
                    $link = 'telephone-log.php';
                    break;
                case 'Suggest To Win':
                    $link = 'suggest-to-win-approval.php';
                    break;
                case 'Approve Suggest To Win':
                    $link = 'manage-suggest-to-win.php';
                    break;
                case 'Reject Suggest To Win':
                    $link = 'manage-suggest-to-win.php';
                    break;
                case 'Cancel Suggest To Win':
                    $link = 'manage-suggest-to-win.php';
                    break;
                case 'Suggest To Win Vote':
                    $link = 'suggest-to-win-voting.php';
                    break;
                case 'Transmittal':
                    $link = 'transmittal.php';
                    break;
                case 'Training Room Log':
                    $link = 'training-room-approval.php';
                    break;
                case 'Approve Training Room Log':
                    $link = 'training-room-log.php';
                    break;
                case 'Cancel Training Room Log':
                    $link = 'training-room-log.php';
                    break;
                case 'Reject Training Room Log':
                    $link = 'training-room-log.php';
                    break;
                case 'Document':
                    $link = 'pending-documents.php';
                    break;
                case 'Approve Document':
                    $link = 'published-documents.php';
                    break;
                case 'Health Declaration':
                    $link = 'health-declaration-summary.php';
                    break;
                case 'Approve Meeting':
                    $link = 'meeting.php';
                    break;
                case 'Trainings & Seminars':
                    $link = 'training-and-seminars-recommendation.php';
                    break;
                case 'Approve Training':
                    $link = 'training-and-seminars.php';
                    break;
                case 'Reject Training':
                    $link = 'training-and-seminars.php';
                    break;
                case 'Reject Overtime':
                    $link = 'overtime-management.php';
                    break;
                case 'Ticket':
                    $link = 'ticket.php';
                    break;
                default:
                    $link = '';
            }

            $sql = $this->db_connection->prepare("INSERT INTO tblnotifications (NOTIFICATION_ID, NOTIFICATION_FROM, NOTIFICATION_TO, STATUS, NOTIFICATION_TITLE, NOTIFICATION, LINK, NOTIFICATION_DATE, NOTIFICATION_TIME, RECORD_LOG) VALUES (:id, :notification_from, :notification_to, '0', :notification_title, :notification, :link, :systemdate, :current_time, :record_log)");
            $sql->bindParam(':id', $id);
            $sql->bindParam(':notification_from', $notification_from);
            $sql->bindParam(':notification_to', $notification_to);
            $sql->bindParam(':notification_title', $notification_title);
            $sql->bindParam(':notification', $notification);
            $sql->bindParam(':link', $link);
            $sql->bindParam(':systemdate', $systemdate);
            $sql->bindParam(':current_time', $current_time);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                # Update system parameter value
                $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '41', $username);

                if($update_system_parameter_value){
                    return '1';
                }
                else{
                    return $update_system_parameter_value;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_system_notification_by_type
    # Purpose    : Insert system notification by type
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_system_notification_by_type($type, $notification_type, $department, $employee, $username){
        if ($this->databaseConnection()) {
            $employee_details = $this->get_data_details_one_parameter('employee profile', $username);
            $employee_id = $employee_details[0]['EMPLOYEE_ID'];
            $employee_first_name = $employee_details[0]['FIRST_NAME'];
            $employee_last_name = $employee_details[0]['LAST_NAME'];
            $employee_middle_name = $employee_details[0]['MIDDLE_NAME'];
            $employee_suffix = $employee_details[0]['SUFFIX'];
            $employee_suffix = $employee_details[0]['SUFFIX'];
            $employee_fullname = $this->get_full_name($employee_first_name, $employee_middle_name, $employee_last_name, $employee_suffix)[0]['REVERSE_FULL_NAME'];

            $error = '';

            if($notification_type == 'Attendance Adjustment'){
                if($type == 'Superior'){
                    $sql = $this->db_connection->prepare('SELECT SUPERIOR_ID FROM tblemployeesuperior WHERE EMPLOYEE_ID = :employee_id');
                    $sql->bindParam(':employee_id', $employee_id);

                    if($sql->execute()){
                        while($row = $sql->fetch()){
                            $voter = $row['SUPERIOR_ID'];
                            $voter_details = $this->get_data_details_one_parameter('employee profile', $voter);
                            $voter_id = $voter_details[0]['EMPLOYEE_ID'];

                            $insert_system_notification = $this->insert_system_notification($notification_type, $employee_id, $voter_id, 'Attendance Record Adjustment', $employee_fullname . ' requested attendance record adjustment.', $username);

                            if($insert_system_notification != '1'){
                                $error .= $insert_system_notification;
                            }
                        }
                    }
                }
            }
            else if($notification_type == 'Leave Application'){
                if($type == 'Superior'){
                    $sql = $this->db_connection->prepare('SELECT EMPLOYEE_ID FROM tblemployeesubordinate WHERE SUBORDINATE_ID = :employee_id');
                    $sql->bindParam(':employee_id', $employee_id);

                    if($sql->execute()){
                        while($row = $sql->fetch()){
                            $superior = $row['EMPLOYEE_ID'];

                            $insert_system_notification = $this->insert_system_notification($notification_type, $employee_id, $superior, 'Leave Application', $employee_fullname . ' applied a leave.', $username);

                            if($insert_system_notification != '1'){
                                $error .= $insert_system_notification;
                            }
                        }
                    }
                }
            }
            else if($notification_type == 'Telephone Log'){
                if($type == 'Superior'){
                    $sql = $this->db_connection->prepare('SELECT EMPLOYEE_ID FROM tblemployeesubordinate WHERE SUBORDINATE_ID = :employee_id');
                    $sql->bindParam(':employee_id', $employee_id);

                    if($sql->execute()){
                        while($row = $sql->fetch()){
                            $superior = $row['EMPLOYEE_ID'];

                            $insert_system_notification = $this->insert_system_notification($notification_type, $employee_id, $superior, 'Telephone Log', $employee_fullname . ' added telephone log.', $username);

                            if($insert_system_notification != '1'){
                                $error .= $insert_system_notification;
                            }
                        }
                    }
                }
            }
            else if($notification_type == 'Suggest To Win'){
                if($type == 'Superior'){
                    $sql = $this->db_connection->prepare('SELECT EMPLOYEE_ID FROM tblemployeesubordinate WHERE SUBORDINATE_ID = :employee_id');
                    $sql->bindParam(':employee_id', $employee_id);

                    if($sql->execute()){
                        while($row = $sql->fetch()){
                            $superior = $row['EMPLOYEE_ID'];

                            $insert_system_notification = $this->insert_system_notification($notification_type, $employee_id, $superior, 'Suggest To Win', $employee_fullname . ' submitted a suggest to win entry.', $username);

                            if($insert_system_notification != '1'){
                                $error .= $insert_system_notification;
                            }
                        }
                    }
                }
            }
            else if($notification_type == 'Suggest To Win Vote'){
                if($type == 'Superior'){
                    $role_id = 'ROLE5';

                    $sql = $this->db_connection->prepare('SELECT USERNAME FROM tblroleuser WHERE USERNAME != :username AND ROLE_ID = :role_id');
                    $sql->bindParam(':username', $username);
                    $sql->bindParam(':role_id', $role_id);

                    if($sql->execute()){
                        while($row = $sql->fetch()){
                            $voter = $row['USERNAME'];
                            $voter_details = $this->get_data_details_one_parameter('employee profile', $voter);
                            $voter_id = $voter_details[0]['EMPLOYEE_ID'];

                            $insert_system_notification = $this->insert_system_notification($notification_type, $employee_id, $voter_id, 'Suggest To Win Vote', 'There is one suggest to win for voting.', $username);

                            if($insert_system_notification != '1'){
                                $error .= $insert_system_notification;
                            }
                        }
                    }
                }
            }
            else if($notification_type == 'Attendance Adjustment Recommendation'){
                if($type == 'HR Head'){
                    $designation = 'DES3';

                    $sql = $this->db_connection->prepare('SELECT EMPLOYEE_ID FROM tblemployeeprofile WHERE DESIGNATION = :designation');
                    $sql->bindParam(':designation', $designation);

                    if($sql->execute()){
                        while($row = $sql->fetch()){
                            $hr_head = $row['EMPLOYEE_ID'];

                            $insert_system_notification = $this->insert_system_notification($notification_type, $employee_id, $hr_head, 'Attendance Record Adjustment', $employee_fullname . ' requested attendance record adjustment.', $username);

                            if($insert_system_notification != '1'){
                                $error .= $insert_system_notification;
                            }
                        }
                    }
                }
            }
            else if($notification_type == 'Transmittal'){
                if($type == 'Transmittal'){
                    $sql = $this->db_connection->prepare('SELECT EMPLOYEE_ID FROM tblemployeeprofile WHERE DEPARTMENT = :department');
                    $sql->bindParam(':department', $department);

                    if($sql->execute()){
                        while($row = $sql->fetch()){
                            $transmitted_to = $row['EMPLOYEE_ID'];

                            $insert_system_notification = $this->insert_system_notification($notification_type, $employee_id, $transmitted_to, 'Transmittal', 'You have an incoming transmittal.', $username);

                            if($insert_system_notification != '1'){
                                $error .= $insert_system_notification;
                            }
                        }
                    }
                }
            }
            else if($notification_type == 'Training Room Log'){
                if($type == 'HR Head'){
                    $designation = 'DES3';

                    $sql = $this->db_connection->prepare('SELECT EMPLOYEE_ID FROM tblemployeeprofile WHERE DESIGNATION = :designation');
                    $sql->bindParam(':designation', $designation);

                    if($sql->execute()){
                        while($row = $sql->fetch()){
                            $hr_head = $row['EMPLOYEE_ID'];

                            $insert_system_notification = $this->insert_system_notification($notification_type, $employee_id, $hr_head, 'Training Room Log', $employee_fullname . ' requested access to training room.', $username);

                            if($insert_system_notification != '1'){
                                $error .= $insert_system_notification;
                            }
                        }
                    }
                }
            }
            else if($notification_type == 'Health Declaration'){
                if($type == 'HR Head'){
                    $designation = 'DES3';

                    $sql = $this->db_connection->prepare('SELECT EMPLOYEE_ID FROM tblemployeeprofile WHERE DESIGNATION = :designation');
                    $sql->bindParam(':designation', $designation);

                    if($sql->execute()){
                        while($row = $sql->fetch()){
                            $hr_head = $row['EMPLOYEE_ID'];

                            $insert_system_notification = $this->insert_system_notification($notification_type, $employee_id, $hr_head, 'Health Declaration', $employee_fullname . ' submitted a health declaration.', $username);

                            if($insert_system_notification != '1'){
                                $error .= $insert_system_notification;
                            }
                        }
                    }
                }
            }
            else if($notification_type == 'Document'){
                if($type == 'Authorizer'){
                    $sql = $this->db_connection->prepare('SELECT AUTHORIZER FROM tbldocumentauthorizer WHERE DEPARTMENT = :department');
                    $sql->bindParam(':department', $department);

                    if($sql->execute()){
                        while($row = $sql->fetch()){
                            $authorizer = $row['AUTHORIZER'];

                            $insert_system_notification = $this->insert_system_notification($notification_type, $employee_id, $authorizer, 'Document', 'You have a document for publishing.', $username);

                            if($insert_system_notification != '1'){
                                $error .= $insert_system_notification;
                            }
                        }
                    }
                }
            }
            else if($notification_type == 'Approve Meeting'){
                if($type == 'Meeting Attendees'){
                    $meeting_details = $this->get_data_details_one_parameter('meeting', $employee);
                    $author = $meeting_details[0]['AUTHOR'];
                    $title = $meeting_details[0]['TITLE'];

                    $sql = $this->db_connection->prepare('SELECT EMPLOYEE_ID FROM tblmeetingattendees WHERE MEETING_ID = :employee');
                    $sql->bindParam(':employee', $employee);

                    if($sql->execute()){
                        while($row = $sql->fetch()){
                            $attendee = $row['EMPLOYEE_ID'];

                            $insert_system_notification = $this->insert_system_notification($notification_type, $employee_id, $attendee, 'Meeting', 'You can now view the minutes of the meeting ('. $title .').', $username);

                            if($insert_system_notification != '1'){
                                $error = $insert_system_notification;
                            }
                        }

                        $insert_system_notification = $this->insert_system_notification($notification_type, $employee_id, $author, 'Meeting', 'The minutes of the meeting ('. $title .') has been approved.', $username);

                        if($insert_system_notification != '1'){
                            $error = $insert_system_notification;
                        }
                    }
                }
            }
			else if($notification_type == 'Tag Meeting As Submitted'){
                if($type == 'Meeting Attendees'){
                    $meeting_details = $this->get_data_details_one_parameter('meeting', $employee);
                    $author = $meeting_details[0]['AUTHOR'];
                    $title = $meeting_details[0]['TITLE'];

                    $sql = $this->db_connection->prepare('SELECT EMPLOYEE_ID FROM tblmeetingattendees WHERE MEETING_ID = :employee');
                    $sql->bindParam(':employee', $employee);

                    if($sql->execute()){
                        while($row = $sql->fetch()){
                            $attendee = $row['EMPLOYEE_ID'];

                            $insert_system_notification = $this->insert_system_notification($notification_type, $employee_id, $attendee, 'Meeting', 'The minutes of the meeting ('. $title .') has been tagged as submitted.', $username);

                            if($insert_system_notification != '1'){
                                $error = $insert_system_notification;
                            }
                        }

                        $insert_system_notification = $this->insert_system_notification($notification_type, $employee_id, $author, 'Meeting', 'The minutes of the meeting ('. $title .') has been tagged as submitted.', $username);

                        if($insert_system_notification != '1'){
                            $error = $insert_system_notification;
                        }
                    }
                }
            }
            else if($notification_type == 'Trainings & Seminars'){
                if($type == 'Superior'){
                    $sql = $this->db_connection->prepare('SELECT EMPLOYEE_ID FROM tblemployeesubordinate WHERE SUBORDINATE_ID = :employee_id');
                    $sql->bindParam(':employee_id', $employee_id);

                    if($sql->execute()){
                        while($row = $sql->fetch()){
                            $superior = $row['EMPLOYEE_ID'];

                            $insert_system_notification = $this->insert_system_notification($notification_type, $employee_id, $superior, 'Trainings & Seminars', $employee_fullname . ' submitted a training.', $username);

                            if($insert_system_notification != '1'){
                                $error .= $insert_system_notification;
                            }
                        }
                    }
                }
            }
            else if($notification_type == 'Training Recommendation'){
                if($type == 'HR Head'){
                    $designation = 'DES3';
                    $training_details = $this->get_data_details_one_parameter('training', $department);
                    $title = $training_details[0]['TITLE'];

                    $sql = $this->db_connection->prepare('SELECT EMPLOYEE_ID FROM tblemployeeprofile WHERE DESIGNATION = :designation');
                    $sql->bindParam(':designation', $designation);

                    if($sql->execute()){
                        while($row = $sql->fetch()){
                            $hr_head = $row['EMPLOYEE_ID'];

                            $insert_system_notification = $this->insert_system_notification($notification_type, $employee_id, $hr_head, 'Training Recommendation', $employee_fullname . ' submitted a training ('. $title .').', $username);

                            if($insert_system_notification != '1'){
                                $error .= $insert_system_notification;
                            }
                        }
                    }
                }
            }
            else if($notification_type == 'Ticket'){
                if($type == 'Ticket'){
                    $sql = $this->db_connection->prepare('SELECT EMPLOYEE_ID FROM tblemployeeprofile WHERE DEPARTMENT = :department');
                    $sql->bindParam(':department', $department);

                    if($sql->execute()){
                        while($row = $sql->fetch()){
                            $transmitted_to = $row['EMPLOYEE_ID'];

                            $insert_system_notification = $this->insert_system_notification($notification_type, $employee_id, $transmitted_to, 'Ticket', 'You have an open ticket.', $username);

                            if($insert_system_notification != '1'){
                                $error .= $insert_system_notification;
                            }
                        }
                    }
                }
            }

            if(empty($error)){
                return '1';
            }
            else{
                return $error;
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_health_declaration
    # Purpose    : Insert health declaration
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_health_declaration($employee_id, $temperature, $question_1, $question_2, $question_3, $question_4, $question_5, $specific, $systemdate, $current_time, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');
            # Get system parameter id
            $system_parameter = $this->get_system_parameter('42', 1);
            $paramnum = $system_parameter[0]['PARAMNUM'];
            $id = $system_parameter[0]['ID'];

            $sql = $this->db_connection->prepare("INSERT INTO tblhealthdeclaration (DECLARATION_ID, EMPLOYEE_ID, TEMPERATURE, QUESTION_1, QUESTION_2, QUESTION_3, QUESTION_4, QUESTION_5, QUESTION_5_SPECIFIC, SUBMIT_DATE, SUBMIT_TIME, RECORD_LOG) VALUES (:id, :employee_id, :temperature, :question_1, :question_2, :question_3, :question_4, :question_5, :specific, :systemdate, :current_time, :record_log)");
            $sql->bindParam(':id', $id);
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':temperature', $temperature);
            $sql->bindParam(':question_1', $question_1);
            $sql->bindParam(':question_2', $question_2);
            $sql->bindParam(':question_3', $question_3);
            $sql->bindParam(':question_4', $question_4);
            $sql->bindParam(':question_5', $question_5);
            $sql->bindParam(':specific', $specific);
            $sql->bindParam(':systemdate', $systemdate);
            $sql->bindParam(':current_time', $current_time);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                # Update system parameter value
                $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '42', $username);

                if($update_system_parameter_value){
                    return '1';
                }
                else{
                    return $update_system_parameter_value;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_meeting
    # Purpose    : Insert meeting
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_meeting($employee_id, $employee_department, $meeting_title, $meeting_type, $meeting_date, $start_time, $end_time, $attendees, $absentees, $previous_meeting, $presider, $noted_by, $username){
        if ($this->databaseConnection()) {
            $error = '';
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');
            # Get system parameter id
            $system_parameter = $this->get_system_parameter('43', 1);
            $paramnum = $system_parameter[0]['PARAMNUM'];
            $id = $system_parameter[0]['ID'];

            $sql = $this->db_connection->prepare("INSERT INTO tblmeeting (MEETING_ID, AUTHOR, DEPARTMENT, TITLE, MEETING_DATE, START_TIME, END_TIME, MEETING_TYPE, STATUS, PREVIOUS_MEETING, PRESIDER, NOTED_BY, RECORD_LOG) VALUES (:id, :employee_id, :employee_department, :meeting_title, :meeting_date, :start_time, :end_time, :meeting_type, '0', :previous_meeting, :presider, :noted_by, :record_log)");
            $sql->bindParam(':id', $id);
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':employee_department', $employee_department);
            $sql->bindParam(':meeting_title', $meeting_title);
            $sql->bindParam(':meeting_date', $meeting_date);
            $sql->bindParam(':start_time', $start_time);
            $sql->bindParam(':end_time', $end_time);
            $sql->bindParam(':meeting_type', $meeting_type);
            $sql->bindParam(':previous_meeting', $previous_meeting);
            $sql->bindParam(':presider', $presider);
            $sql->bindParam(':noted_by', $noted_by);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                # Update system parameter value
                $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '43', $username);

                if($update_system_parameter_value){
                    $attendees = explode(',', $_POST['attendees']);

                    foreach($attendees as $attendee){
                        $insert_meeting_attendees = $this->insert_meeting_attendees($id, $attendee, $username);

                        if($insert_meeting_attendees != '1'){
                            $error = $insert_meeting_attendees;
                        }
                    }

                    if(!empty($absentees)){
                        $absentees = explode(',', $_POST['absentees']);

                        foreach($absentees as $absentee){
                            $insert_meeting_absentees = $this->insert_meeting_absentees($id, $absentee, $username);

                            if($insert_meeting_absentees != '1'){
                                $error = $insert_meeting_absentees;
                            }
                        }
                    }

                    if(empty($error)){
                        return '1';
                    }
                    else{
                        return $error;
                    }
                }
                else{
                    return $update_system_parameter_value;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_meeting_attendees
    # Purpose    : Insert meeting attendees
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_meeting_attendees($meeting_id, $attendee, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare("INSERT INTO tblmeetingattendees (MEETING_ID, EMPLOYEE_ID, RECORD_LOG) VALUES (:meeting_id, :attendee, :record_log)");
            $sql->bindParam(':meeting_id', $meeting_id);
            $sql->bindParam(':attendee', $attendee);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                return '1';
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_meeting_absenteesinsert_meeting_absentees
    # Purpose    : Insert meeting absentees
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_meeting_absentees($meeting_id, $absentee, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare("INSERT INTO tblmeetingabsentattendees (MEETING_ID, EMPLOYEE_ID, RECORD_LOG) VALUES (:meeting_id, :absentee, :record_log)");
            $sql->bindParam(':meeting_id', $meeting_id);
            $sql->bindParam(':absentee', $absentee);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                return '1';
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_meeting_permission
    # Purpose    : Insert meeting permission
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_meeting_permission($meeting_id, $permission, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            $permission_str = explode('-', $permission);
            $employee_id = $permission_str[0];
            $meeting_permission = $permission_str[1];

            $sql = $this->db_connection->prepare("INSERT INTO tblmeetingpermission (MEETING_ID, EMPLOYEE_ID, PERMISSION, RECORD_LOG) VALUES (:meeting_id, :employee_id, :meeting_permission, :record_log)");
            $sql->bindParam(':meeting_id', $meeting_id);
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':meeting_permission', $meeting_permission);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                return '1';
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_meeting_note
    # Purpose    : Insert meeting note
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_meeting_note($meeting_id, $note, $employee_id, $systemdate, $current_time, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            # Get system parameter id
            $system_parameter = $this->get_system_parameter('44', 1);
            $paramnum = $system_parameter[0]['PARAMNUM'];
            $id = $system_parameter[0]['ID'];

            $sql = $this->db_connection->prepare('INSERT INTO tblmeetingnotes (NOTE_ID, MEETING_ID, NOTE_BY, NOTE, NOTE_DATE, NOTE_TIME, RECORD_LOG) VALUES (:id, :meeting_id, :employee_id, :note, :systemdate, :current_time, :record_log)');
            $sql->bindParam(':id', $id);
            $sql->bindParam(':meeting_id', $meeting_id);
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':note', $note);
            $sql->bindParam(':systemdate', $systemdate);
            $sql->bindParam(':current_time', $current_time);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                    # Update system parameter value
                    $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '44', $username);

                    if($update_system_parameter_value){
                        $insert_user_log = $this->insert_logs($username, 'Insert Meeting Note', 'User ' . $username . ' inserted meeting note (' . $meeting_id . ').');

                        if($insert_user_log == '1'){
                            return '1';
                        }
                        else{
                            return $insert_user_log;
                        }
                    }
                    else{
                        return $update_system_parameter_value;
                    }
                }
                else{
                    return $sql->errorInfo()[2];
                }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_meeting_task
    # Purpose    : Insert meeting task
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_meeting_task($agenda, $meeting_id, $previous_meeting, $task, $employee, $department, $task_status, $due_date_type, $due_date, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            # Get system parameter id
            $system_parameter = $this->get_system_parameter('46', 1);
            $paramnum = $system_parameter[0]['PARAMNUM'];
            $id = $system_parameter[0]['ID'];

            $sql = $this->db_connection->prepare('INSERT INTO tblmeetingtask (TASK_ID, AGENDA, MEETING_ID, PREVIOUS_MEETING, TASK, EMPLOYEE_ID, DEPARTMENT, STATUS, DUE_DATE_TYPE, DUE_DATE, RECORD_LOG) VALUES (:id, :agenda, :meeting_id, :previous_meeting, :task, :employee, :department, :task_status, :due_date_type, :due_date, :record_log)');
            $sql->bindParam(':id', $id);
            $sql->bindParam(':agenda', $agenda);
            $sql->bindParam(':meeting_id', $meeting_id);
            $sql->bindParam(':previous_meeting', $previous_meeting);
            $sql->bindParam(':task', $task);
            $sql->bindParam(':employee', $employee);
            $sql->bindParam(':department', $department);
            $sql->bindParam(':task_status', $task_status);
            $sql->bindParam(':due_date_type', $due_date_type);
            $sql->bindParam(':due_date', $due_date);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                    # Update system parameter value
                    $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '46', $username);

                    if($update_system_parameter_value){
                        $insert_user_log = $this->insert_logs($username, 'Insert Meeting Task', 'User ' . $username . ' inserted meeting task (' . $id . ').');

                        if($insert_user_log == '1'){
                            return '1';
                        }
                        else{
                            return $insert_user_log;
                        }
                    }
                    else{
                        return $update_system_parameter_value;
                    }
                }
                else{
                    return $sql->errorInfo()[2];
                }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_meeting_memo
    # Purpose    : Insert meeting memo
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_meeting_memo($memo, $meeting_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            # Get system parameter id
            $system_parameter = $this->get_system_parameter('47', 1);
            $paramnum = $system_parameter[0]['PARAMNUM'];
            $id = $system_parameter[0]['ID'];

            $sql = $this->db_connection->prepare('INSERT INTO tblmeetingmemo (MEMO_ID, MEETING_ID, DOCUMENT_ID, RECORD_LOG) VALUES (:id, :meeting_id, :memo, :record_log)');
            $sql->bindParam(':id', $id);
            $sql->bindParam(':meeting_id', $meeting_id);
            $sql->bindParam(':memo', $memo);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                    # Update system parameter value
                    $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '47', $username);

                    if($update_system_parameter_value){
                        $insert_user_log = $this->insert_logs($username, 'Insert Meeting Memo', 'User ' . $username . ' inserted meeting memo (' . $id . ').');

                        if($insert_user_log == '1'){
                            return '1';
                        }
                        else{
                            return $insert_user_log;
                        }
                    }
                    else{
                        return $update_system_parameter_value;
                    }
                }
                else{
                    return $sql->errorInfo()[2];
                }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_meeting_other_matters
    # Purpose    : Insert meeting memo
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_meeting_other_matters($other_matters, $meeting_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            # Get system parameter id
            $system_parameter = $this->get_system_parameter('48', 1);
            $paramnum = $system_parameter[0]['PARAMNUM'];
            $id = $system_parameter[0]['ID'];

            $sql = $this->db_connection->prepare('INSERT INTO tblmeetingothermatters (OTHER_MATTERS_ID, MEETING_ID, OTHER_MATTERS, RECORD_LOG) VALUES (:id, :meeting_id, :other_matters, :record_log)');
            $sql->bindParam(':id', $id);
            $sql->bindParam(':meeting_id', $meeting_id);
            $sql->bindParam(':other_matters', $other_matters);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                    # Update system parameter value
                    $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '48', $username);

                    if($update_system_parameter_value){
                        $insert_user_log = $this->insert_logs($username, 'Insert Meeting Other Matters', 'User ' . $username . ' inserted meeting other matters (' . $id . ').');

                        if($insert_user_log == '1'){
                            return '1';
                        }
                        else{
                            return $insert_user_log;
                        }
                    }
                    else{
                        return $update_system_parameter_value;
                    }
                }
                else{
                    return $sql->errorInfo()[2];
                }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_training
    # Purpose    : Insert training
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
     public function insert_training($employee_id, $training_title, $description, $training_type, $training_date, $start_time, $end_time, $username){
        if ($this->databaseConnection()) {
            $error = '';
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');
            # Get system parameter id
            $system_parameter = $this->get_system_parameter('49', 1);
            $paramnum = $system_parameter[0]['PARAMNUM'];
            $id = $system_parameter[0]['ID'];

            $sql = $this->db_connection->prepare("INSERT INTO tbltraining (TRAINING_ID, EMPLOYEE_ID, TITLE, DETAILS, TRAINING_TYPE, STATUS, TRAINING_DATE, START_TIME, END_TIME, RECORD_LOG) VALUES (:id, :employee_id, :training_title, :description, :training_type, '0', :training_date, :start_time, :end_time, :record_log)");
            $sql->bindParam(':id', $id);
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':training_title', $training_title);
            $sql->bindParam(':description', $description);
            $sql->bindParam(':training_type', $training_type);
            $sql->bindParam(':training_date', $training_date);
            $sql->bindParam(':start_time', $start_time);
            $sql->bindParam(':end_time', $end_time);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                # Update system parameter value
                $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '49', $username);

                if($update_system_parameter_value){
                    $insert_user_log = $this->insert_logs($username, 'Insert Training', 'User ' . $username . ' inserted training (' . $id . ').');

                    if($insert_user_log == '1'){
                        return '1';
                    }
                    else{
                        return $insert_user_log;
                    }
                }
                else{
                    return $update_system_parameter_value;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_training_attendees
    # Purpose    : Insert training attendees
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_training_attendees($training_id, $user, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('INSERT INTO tbltrainingattendees (TRAINING_ID, EMPLOYEE_ID, RECORD_LOG) VALUES (:training_id, :user, :record_log)');
            $sql->bindParam(':training_id', $training_id);
            $sql->bindParam(':user', $user);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                return '1';
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_training_report
    # Purpose    : Insert training report
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_training_report($training_id, $employee_id, $learnings, $comments, $username){
        if ($this->databaseConnection()) {
            $error = '';
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare("INSERT INTO tbltrainingreport (TRAINING_ID, EMPLOYEE_ID, LEARNINGS, COMMENTS, RECORD_LOG) VALUES (:training_id, :employee_id, :learnings, :comments, :record_log)");
            $sql->bindParam(':training_id', $training_id);
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':learnings', $learnings);
            $sql->bindParam(':comments', $comments);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Insert Training Report', 'User ' . $username . ' inserted training report (' . $training_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

	# -------------------------------------------------------------
    #
    # Name       : insert_car_search_parameter
    # Purpose    : Insert car search parameter
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_car_search_parameter($parameter_code, $parameter_value, $category_type, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            # Get system parameter id
            $system_parameter = $this->get_system_parameter('50', 1);
            $paramnum = $system_parameter[0]['PARAMNUM'];
            $id = $system_parameter[0]['ID'];

            $sql = $this->db_connection->prepare('INSERT INTO tblcarparameter (PARAMETER_ID, PARAMETER_CODE, CATEGORY_TYPE, PARAMETER_VALUE, RECORD_LOG) VALUES (:id, :parameter_code, :category_type, :parameter_value, :record_log)');
            $sql->bindParam(':id', $id);
            $sql->bindParam(':parameter_code', $parameter_code);
            $sql->bindParam(':category_type', $category_type);
            $sql->bindParam(':parameter_value', $parameter_value);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                # Update system parameter value
                $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '50', $username);

                if($update_system_parameter_value){
                    $insert_user_log = $this->insert_logs($username, 'Insert Car Search Parameter', 'User ' . $username . ' inserted car search parameter (' . $id . ').');

                    if($insert_user_log == '1'){
                        return '1';
                    }
                    else{
                        return $insert_user_log;
                    }
                }
                else{
                    return $update_system_parameter_value;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_price_index_item
    # Purpose    : Insert price index item
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_price_index_item($brand, $model, $variant, $engine_size, $gas_type, $transmission, $drive_train, $body_type, $seating_capacity, $camshaft_profile, $color_type, $aircon_type, $other_information, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            # Get system parameter id
            $system_parameter = $this->get_system_parameter('51', 1);
            $paramnum = $system_parameter[0]['PARAMNUM'];
            $id = $system_parameter[0]['ID'];

            $sql = $this->db_connection->prepare('INSERT INTO tblpriceindexitem (ITEM_ID, BRAND, MODEL, VARIANT, ENGINE_SIZE, GAS_TYPE, TRANSMISSION, DRIVE_TRAIN, BODY_TYPE, SEATING_CAPACITY, CAMSHAFT_PROFILE, COLOR_TYPE, AIRCON_TYPE, OTHER_INFORMATION, RECORD_LOG) VALUES (:id, :brand, :model, :variant, :engine_size, :gas_type, :transmission, :drive_train, :body_type, :seating_capacity, :camshaft_profile, :color_type, :aircon_type, :other_information, :record_log)');
            $sql->bindParam(':id', $id);
            $sql->bindParam(':brand', $brand);
            $sql->bindParam(':model', $model);
            $sql->bindParam(':variant', $variant);
            $sql->bindParam(':engine_size', $engine_size);
            $sql->bindParam(':gas_type', $gas_type);
            $sql->bindParam(':transmission', $transmission);
            $sql->bindParam(':drive_train', $drive_train);
            $sql->bindParam(':body_type', $body_type);
            $sql->bindParam(':seating_capacity', $seating_capacity);
            $sql->bindParam(':camshaft_profile', $camshaft_profile);
            $sql->bindParam(':color_type', $color_type);
            $sql->bindParam(':aircon_type', $aircon_type);
            $sql->bindParam(':other_information', $other_information);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                # Update system parameter value
                $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '51', $username);

                if($update_system_parameter_value){
                    $insert_user_log = $this->insert_logs($username, 'Insert Price Index Item', 'User ' . $username . ' inserted price index item (' . $id . ').');

                    if($insert_user_log == '1'){
                        return '1';
                    }
                    else{
                        return $insert_user_log;
                    }
                }
                else{
                    return $update_system_parameter_value;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_imported_price_index_item
    # Purpose    : Insert price index item
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_imported_price_index_item($item_id, $brand, $model, $variant, $engine_size, $gas_type, $transmission, $drive_train, $body_type, $seating_capacity, $camshaft_profile, $color_type, $aircon_type, $other_information, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            if(!empty($item_id)){
                $id = $item_id;
                $paramnum = $item_id;
            }
            else{
                # Get system parameter id
                $system_parameter = $this->get_system_parameter('51', 1);
                $paramnum = $system_parameter[0]['PARAMNUM'];
                $id = $system_parameter[0]['ID'];
            }

            $sql = $this->db_connection->prepare('INSERT INTO tblpriceindexitem (ITEM_ID, BRAND, MODEL, VARIANT, ENGINE_SIZE, GAS_TYPE, TRANSMISSION, DRIVE_TRAIN, BODY_TYPE, SEATING_CAPACITY, CAMSHAFT_PROFILE, COLOR_TYPE, AIRCON_TYPE, OTHER_INFORMATION, RECORD_LOG) VALUES (:id, :brand, :model, :variant, :engine_size, :gas_type, :transmission, :drive_train, :body_type, :seating_capacity, :camshaft_profile, :color_type, :aircon_type, :other_information, :record_log)');
            $sql->bindParam(':id', $id);
            $sql->bindParam(':brand', $brand);
            $sql->bindParam(':model', $model);
            $sql->bindParam(':variant', $variant);
            $sql->bindParam(':engine_size', $engine_size);
            $sql->bindParam(':gas_type', $gas_type);
            $sql->bindParam(':transmission', $transmission);
            $sql->bindParam(':drive_train', $drive_train);
            $sql->bindParam(':body_type', $body_type);
            $sql->bindParam(':seating_capacity', $seating_capacity);
            $sql->bindParam(':camshaft_profile', $camshaft_profile);
            $sql->bindParam(':color_type', $color_type);
            $sql->bindParam(':aircon_type', $aircon_type);
            $sql->bindParam(':other_information', $other_information);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                # Update system parameter value
                $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '51', $username);

                if($update_system_parameter_value){
                    $insert_user_log = $this->insert_logs($username, 'Insert Price Index Item', 'User ' . $username . ' inserted price index item (' . $id . ').');

                    if($insert_user_log == '1'){
                        return '1';
                    }
                    else{
                        return $insert_user_log;
                    }
                }
                else{
                    return $update_system_parameter_value;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_price_index_amount
    # Purpose    : Insert price index amount
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_price_index_amount($price_index_item, $year, $amount, $systemdate, $current_time, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('INSERT INTO tblpriceindexitemvalue (ITEM_ID, YEAR_MODEL, ITEM_VALUE, CREATED_DATE, CREATED_TIME, CREATED_BY, RECORD_LOG) VALUES (:price_index_item, :year, :amount, :systemdate, :current_time, :username, :record_log)');
            $sql->bindParam(':price_index_item', $price_index_item);
            $sql->bindParam(':year', $year);
            $sql->bindParam(':amount', $amount);
            $sql->bindParam(':systemdate', $systemdate);
            $sql->bindParam(':current_time', $current_time);
            $sql->bindParam(':username', $username);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Insert Price Index Value', 'User ' . $username . ' inserted price index value (' . $price_index_item . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : insert_price_index_amount_adjustment
    # Purpose    : Insert price index item adjustment
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function insert_price_index_amount_adjustment($item_id, $year, $initial_value, $amount, $systemdate, $current_time, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');

           # Get system parameter id
           $system_parameter = $this->get_system_parameter('52', 1);
           $paramnum = $system_parameter[0]['PARAMNUM'];
           $id = $system_parameter[0]['ID'];

            $sql = $this->db_connection->prepare('INSERT INTO tblpriceindexvalueadustment (ADJUSTMENT_ID, ITEM_ID, YEAR_MODEL, INITIAL_ITEM_VALUE, PROPOSED_ITEM_VALUE, STATUS, REQUEST_DATE, REQUEST_TIME, REQUEST_BY, RECORD_LOG) VALUES (:id, :item_id, :year, :initial_value, :amount, "0", :systemdate, :current_time, :username, :record_log)');
            $sql->bindParam(':id', $id);
            $sql->bindParam(':item_id', $item_id);
            $sql->bindParam(':year', $year);
            $sql->bindParam(':initial_value', $initial_value);
            $sql->bindParam(':amount', $amount);
            $sql->bindParam(':systemdate', $systemdate);
            $sql->bindParam(':current_time', $current_time);
            $sql->bindParam(':username', $username);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                # Update system parameter value
                $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '52', $username);

                if($update_system_parameter_value){
                    $insert_user_log = $this->insert_logs($username, 'Insert Price Index Value Adjustment', 'User ' . $username . ' inserted price index value adjustment (' . $id . ').');

                    if($insert_user_log == '1'){
                        return '1';
                    }
                    else{
                        return $insert_user_log;
                    }
                }
                else{
                    return $update_system_parameter_value;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #   Delete data
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_page
    # Purpose    : Delete page
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_page($page_id, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tblpage WHERE PAGE_ID = :page_id');
            $sql->bindParam(':page_id', $page_id);

            if($sql->execute()){
                $delete_page_permission = $this->delete_page_permission($page_id, $username);

                if($delete_page_permission == '1'){
                    $insert_user_log = $this->insert_logs($username, 'Delete Page', 'User ' . $username . ' deleted page (' . $page_id . ').');

                    if($insert_user_log == '1'){
                        return '1';
                    }
                    else{
                        return $insert_user_log;
                    }
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_page_permission
    # Purpose    : Delete permission linked to page
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_page_permission($page_id, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tblpermission WHERE PAGE_ID = :page_id');
            $sql->bindParam(':page_id', $page_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete Page Permission', 'User ' . $username . ' deleted page permission (' . $page_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_permission
    # Purpose    : Delete permission
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_permission($permission_id, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tblpermission WHERE PERMISSION_ID = :permission_id');
            $sql->bindParam(':permission_id', $permission_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete Permission', 'User ' . $username . ' deleted permission (' . $permission_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_system_parameter
    # Purpose    : Delete system parameter
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_system_parameter($parameter_id, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tblsystemparameters WHERE PARAMETER_ID = :parameter_id');
            $sql->bindParam(':parameter_id', $parameter_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete System Parameter', 'User ' . $username . ' deleted system parameter (' . $parameter_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_system_code
    # Purpose    : Delete system code
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_system_code($system_type, $system_code, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tblsystemcode WHERE SYSTEM_TYPE = :system_type AND SYSTEM_CODE = :system_code');
            $sql->bindParam(':system_type', $system_type);
            $sql->bindParam(':system_code', $system_code);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete System Code', 'User ' . $username . ' deleted system code (' . $system_code . ') on system type ('. $system_type .').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_role
    # Purpose    : Delete role
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_role($role_id, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tblrole WHERE ROLE_ID = :role_id');
            $sql->bindParam(':role_id', $role_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete Role', 'User ' . $username . ' deleted role (' . $role_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_permission_role
    # Purpose    : Delete assigned permissions to role
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_permission_role($role_id, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tblrolepermission WHERE ROLE_ID = :role_id');
            $sql->bindParam(':role_id', $role_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete Role Permission', 'User ' . $username . ' deleted role permission (' . $role_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_user_role
    # Purpose    : Delete assigned user to role
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_user_role($role_id, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tblroleuser WHERE ROLE_ID = :role_id');
            $sql->bindParam(':role_id', $role_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete Role User', 'User ' . $username . ' deleted role user (' . $role_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_employee_profile
    # Purpose    : Delete employee profile
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_employee_profile($parameter, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tblemployeeprofile WHERE EMPLOYEE_ID = :parameter OR USERNAME = :parameter');
            $sql->bindParam(':parameter', $parameter);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete Employee Profile', 'User ' . $username . ' deleted employee profile (' . $parameter . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_user_account
    # Purpose    : Delete user account
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_user_account($parameter, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tbluseraccount WHERE EMPLOYEE_ID = :parameter OR USERNAME = :parameter');
            $sql->bindParam(':parameter', $parameter);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete User Account', 'User ' . $username . ' deleted user account (' . $parameter . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_department
    # Purpose    : Delete department
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_department($department_id, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tbldepartment WHERE DEPARTMENT_ID = :department_id');
            $sql->bindParam(':department_id', $department_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete Department', 'User ' . $username . ' deleted department (' . $department_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_designation
    # Purpose    : Delete designation
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_designation($designation_id, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tbldesignation WHERE DESIGNATION_ID = :designation_id');
            $sql->bindParam(':designation_id', $designation_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete Designation', 'User ' . $username . ' deleted designation (' . $designation_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_branch
    # Purpose    : Delete branch
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_branch($branch_id, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tblbranch WHERE BRANCH_ID = :branch_id');
            $sql->bindParam(':branch_id', $branch_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete Branch', 'User ' . $username . ' deleted branch (' . $branch_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_holiday
    # Purpose    : Delete holiday
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_holiday($holiday_id, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tblholiday WHERE HOLIDAY_ID = :holiday_id');
            $sql->bindParam(':holiday_id', $holiday_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete Holiday', 'User ' . $username . ' deleted holiday (' . $holiday_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_leave_type
    # Purpose    : Delete leave type
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_leave_type($leave_type_id, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tblleavetype WHERE LEAVE_TYPE_ID = :leave_type_id');
            $sql->bindParam(':leave_type_id', $leave_type_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete Leave Type', 'User ' . $username . ' deleted leave type (' . $leave_type_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_leave_entitlement
    # Purpose    : Delete leave entitlement
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_leave_entitlement($entitlement_id, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tblleaveentitlement WHERE LEAVE_ENTITLEMENT_ID = :entitlement_id');
            $sql->bindParam(':entitlement_id', $entitlement_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete Leave Entitlement', 'User ' . $username . ' deleted leave entitlement (' . $entitlement_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_employee_leave
    # Purpose    : Delete employee leave
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_employee_leave($leave_id, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tblleave WHERE LEAVE_ID = :leave_id');
            $sql->bindParam(':leave_id', $leave_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete Employee Leave', 'User ' . $username . ' deleted employee leave (' . $leave_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_employee_document
    # Purpose    : Delete employee document
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_employee_document($document_id, $username){
        if ($this->databaseConnection()) {
            $employee_document_details = $this->get_data_details_one_parameter('employee document', $document_id);
            $document_path = $employee_document_details[0]['DOCUMENT_PATH'];

            if(file_exists($document_path)){
                if (unlink($document_path)) {
                    $sql = $this->db_connection->prepare('DELETE FROM tblemployeedocument WHERE DOCUMENT_ID = :document_id');
                    $sql->bindParam(':document_id', $document_id);

                    if($sql->execute()){
                        $insert_user_log = $this->insert_logs($username, 'Delete Employee Document', 'User ' . $username . ' deleted employee document (' . $document_id . ').');

                        if($insert_user_log == '1'){
                            return '1';
                        }
                        else{
                            return $insert_user_log;
                        }
                    }
                    else{
                        return $sql->errorInfo()[2];
                    }
                }
                else {
                    return $document_path . ' cannot be deleted due to an error.';
                }
            }
            else{
                $sql = $this->db_connection->prepare('DELETE FROM tblemployeedocument WHERE DOCUMENT_ID = :document_id');
                $sql->bindParam(':document_id', $document_id);

                if($sql->execute()){
                    $insert_user_log = $this->insert_logs($username, 'Delete Employee Document', 'User ' . $username . ' deleted employee document (' . $document_id . ').');

                    if($insert_user_log == '1'){
                        return '1';
                    }
                    else{
                        return $insert_user_log;
                    }
                }
                else{
                    return $sql->errorInfo()[2];
                }
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_employee_attendance_log
    # Purpose    : Delete employee attendance log
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_employee_attendance_log($attendance_id, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tblattendancerecord WHERE ATTENDANCE_ID = :attendance_id');
            $sql->bindParam(':attendance_id', $attendance_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete Employee Attendance Log', 'User ' . $username . ' deleted employee attendance log (' . $attendance_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_deduction_type
    # Purpose    : Delete deduction type
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_deduction_type($deduction_type_id, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tbldeductiontype WHERE DEDUCTION_TYPE_ID = :deduction_type_id');
            $sql->bindParam(':deduction_type_id', $deduction_type_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete Deduction Type', 'User ' . $username . ' deleted deduction type (' . $deduction_type_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_all_deduction_amount
    # Purpose    : Delete all deduction amount linked
    #              to deduction type
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_all_deduction_amount($deduction_type_id, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tbldeductionamount WHERE DEDUCTION_TYPE_ID = :deduction_type_id');
            $sql->bindParam(':deduction_type_id', $deduction_type_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete All Deducton Amount', 'User ' . $username . ' deleted all deduction amount (' . $deduction_type_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_deduction_amount
    # Purpose    : Delete deduction amount
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_deduction_amount($deduction_type_id, $start_range, $end_range, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tbldeductionamount WHERE DEDUCTION_TYPE_ID = :deduction_type_id AND START_RANGE = :start_range AND END_RANGE = :end_range');
            $sql->bindParam(':deduction_type_id', $deduction_type_id);
            $sql->bindParam(':start_range', $start_range);
            $sql->bindParam(':end_range', $end_range);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete Deduction Amount', 'User ' . $username . ' deleted deduction amount (' . $deduction_type_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_allowance_type
    # Purpose    : Delete allowance type
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_allowance_type($allowance_type_id, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tblallowancetype WHERE ALLOWANCE_TYPE_ID = :allowance_type_id');
            $sql->bindParam(':allowance_type_id', $allowance_type_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete Allowance Type', 'User ' . $username . ' deleted allowance type (' . $allowance_type_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_other_income_type
    # Purpose    : Delete other income type
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_other_income_type($other_income_type_id, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tblotherincometype WHERE OTHER_INCOME_TYPE_ID = :other_income_type_id');
            $sql->bindParam(':other_income_type_id', $other_income_type_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete Other Income Type', 'User ' . $username . ' deleted other income type (' . $other_income_type_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_payroll_specification
    # Purpose    : Delete payroll specification
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_payroll_specification($spec_id, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tblpayrollspec WHERE SPEC_ID = :spec_id');
            $sql->bindParam(':spec_id', $spec_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete Payroll Specification', 'User ' . $username . ' deleted payroll specification (' . $spec_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_employee_superior
    # Purpose    : Delete employee superior
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_employee_superior($employee_id, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tblemployeesuperior WHERE EMPLOYEE_ID = :employee_id');
            $sql->bindParam(':employee_id', $employee_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete Employee Superior', 'User ' . $username . ' deleted employee superior (' . $employee_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_employee_subordinate
    # Purpose    : Delete employee subordinate
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_employee_subordinate($employee_id, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tblemployeesubordinate WHERE SUBORDINATE_ID = :employee_id');
            $sql->bindParam(':employee_id', $employee_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete Employee Subordinate', 'User ' . $username . ' deleted employee subordinate (' . $employee_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_all_employee_subordinate
    # Purpose    : Delete all employee subordinate
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_all_employee_subordinate($employee_id, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tblemployeesubordinate WHERE EMPLOYEE_ID = :employee_id');
            $sql->bindParam(':employee_id', $employee_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete All Employee Subordinate', 'User ' . $username . ' deleted all employee subordinate (' . $employee_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

     # -------------------------------------------------------------
    #
    # Name       : delete_all_employee_authorizer
    # Purpose    : Delete all employee subordinate
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_all_employee_authorizer($employee_id, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tblemployeeauthorizer WHERE EMPLOYEE_ID = :employee_id');
            $sql->bindParam(':employee_id', $employee_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete All Employee Authorizer', 'User ' . $username . ' deleted all employee authorizer (' . $employee_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_employee_office_shift
    # Purpose    : Delete employee office shift
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_employee_office_shift($employee_id, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tblofficeshift WHERE EMPLOYEE_ID = :employee_id');
            $sql->bindParam(':employee_id', $employee_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete All Office Shift', 'User ' . $username . ' deleted office shift of employee (' . $employee_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_email_notification
    # Purpose    : Delete email notification
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_email_notification($notification_id, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tblnotificationsetting WHERE NOTIFICATION_ID = :notification_id');
            $sql->bindParam(':notification_id', $notification_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete Email Notification', 'User ' . $username . ' deleted email notification (' . $notification_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_all_email_notification_recipients
    # Purpose    : Delete all email notification recipients
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_all_email_notification_recipients($notification_id, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tblemailrecipient WHERE NOTIFICATION_ID = :notification_id');
            $sql->bindParam(':notification_id', $notification_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete All Email Notification Recipients', 'User ' . $username . ' deleted all email notification recipients (' . $notification_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_email_recipient
    # Purpose    : Deletes email recipient
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_email_recipient($notification_id, $recipient_id, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tblemailrecipient WHERE NOTIFICATION_ID = :notification_id AND RECIPIENT_ID = :recipient_id');
            $sql->bindParam(':notification_id', $notification_id);
            $sql->bindParam(':recipient_id', $recipient_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete Email Recipient', 'User ' . $username . ' deleted email recipient (' . $recipient_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_payroll_group
    # Purpose    : Delete payroll group
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_payroll_group($payroll_group_id, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tblpayrollgroup WHERE PAYROLL_GROUP_ID = :payroll_group_id');
            $sql->bindParam(':payroll_group_id', $payroll_group_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete Payroll Group', 'User ' . $username . ' deleted payroll group (' . $payroll_group_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_all_payroll_group_employee
    # Purpose    : Delete all assigned employee to payroll group
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_all_payroll_group_employee($payroll_group_id, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tblpayrollgroupemployee WHERE PAYROLL_GROUP_ID = :payroll_group_id');
            $sql->bindParam(':payroll_group_id', $payroll_group_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete All Payroll Group Employee', 'User ' . $username . ' deleted all employee from payroll group (' . $payroll_group_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_payroll_group_employee
    # Purpose    : Delete assigned employee to payroll group
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_payroll_group_employee($payroll_group_id, $employee_id, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tblpayrollgroupemployee WHERE PAYROLL_GROUP_ID = :payroll_group_id AND EMPLOYEE_ID = :employee_id');
            $sql->bindParam(':payroll_group_id', $payroll_group_id);
            $sql->bindParam(':employee_id', $employee_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete Payroll Group Employee', 'User ' . $username . ' deleted employee ('. $employee_id .') from payroll group (' . $payroll_group_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_employee_attendance_adjustment_request
    # Purpose    : Delete employee attendance adjustment request
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_employee_attendance_adjustment_request($adjustment_id, $username){
        if ($this->databaseConnection()) {
            $attendance_adjustment_details = $this->get_data_details_one_parameter('attendance adjustment', $adjustment_id);
            $attachment = $attendance_adjustment_details[0]['ATTACHMENT'];

            $sql = $this->db_connection->prepare('DELETE FROM tblattendanceadustment WHERE ADJUSTMENT_ID = :adjustment_id');
            $sql->bindParam(':adjustment_id', $adjustment_id);

            if($sql->execute()){
                if(file_exists($attachment)){
                    if (unlink($attachment)) {
                        $insert_user_log = $this->insert_logs($username, 'Delete Attendance Adjustment Request', 'User ' . $username . ' deleted attendance adjustment request (' . $adjustment_id . ').');

                        if($insert_user_log == '1'){
                            return '1';
                        }
                        else{
                            return $insert_user_log;
                        }
                    }
                    else{
                        return 'The file does not exist';
                    }
                }
                else{
                    $insert_user_log = $this->insert_logs($username, 'Delete Attendance Adjustment Request', 'User ' . $username . ' deleted attendance adjustment request (' . $adjustment_id . ').');

                    if($insert_user_log == '1'){
                        return '1';
                    }
                    else{
                        return $insert_user_log;
                    }
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_telephone_log
    # Purpose    : Delete telephone log
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_telephone_log($log_id, $username){
        if ($this->databaseConnection()) {

            $sql = $this->db_connection->prepare('DELETE FROM tbltelephonelogsheet WHERE LOG_ID = :log_id');
            $sql->bindParam(':log_id', $log_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete Telephone Log', 'User ' . $username . ' deleted telephone log (' . $log_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_all_document_file_type
    # Purpose    : Delete all document file type
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_all_document_file_type($setting_id, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tbldocumentfiletype WHERE SETTINGS_ID = :setting_id');
            $sql->bindParam(':setting_id', $setting_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete All Document File Type', 'User ' . $username . ' deleted all document file type (' . $setting_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_document_authorizer
    # Purpose    : Delete document authorizer
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_document_authorizer($department, $authorizer, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tbldocumentauthorizer WHERE DEPARTMENT = :department AND AUTHORIZER = :authorizer');
            $sql->bindParam(':department', $department);
            $sql->bindParam(':authorizer', $authorizer);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete Document Authorizer', 'User ' . $username . ' deleted document authorizer ('. $authorizer .') of department (' . $department . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_document
    # Purpose    : Delete document
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
        public function delete_document($document_id, $username) {
        if ($this->databaseConnection()) {
            try {
                $this->db_connection->beginTransaction();

                // First, delete related records in document_tags
                $sql = $this->db_connection->prepare('DELETE FROM document_tags WHERE DOCUMENT_ID = :document_id');
                $sql->bindParam(':document_id', $document_id);
                $sql->execute();

                // Now proceed with the original deletion logic
                $employee_document_details = $this->get_data_details_one_parameter('document', $document_id);
                $document_path = $employee_document_details[0]['DOCUMENT_PATH'] . '.dat';

                if (file_exists($document_path)) {
                    if (!unlink($document_path)) {
                        throw new Exception($document_path . ' cannot be deleted due to an error.');
                    }
                }

                $sql = $this->db_connection->prepare('DELETE FROM tbldocument WHERE DOCUMENT_ID = :document_id');
                $sql->bindParam(':document_id', $document_id);
                $sql->execute();

                $insert_user_log = $this->insert_logs($username, 'Delete Document', 'User ' . $username . ' deleted document (' . $document_id . ').');
                if ($insert_user_log != '1') {
                    throw new Exception($insert_user_log);
                }

                $this->db_connection->commit();
                return '1';
            } catch (Exception $e) {
                $this->db_connection->rollBack();
                return $e->getMessage();
            }
        }
        return 'Database connection failed';
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_department_document_permission
    # Purpose    : Delete assigned department permission to document
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_department_document_permission($document_id, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tbldocumentdepartmentpermission WHERE DOCUMENT_ID = :document_id');
            $sql->bindParam(':document_id', $document_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete Department Document Permission', 'User ' . $username . ' deleted department document permission (' . $document_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_employee_document_permission
    # Purpose    : Delete assigned employee permission to document
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_employee_document_permission($document_id, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tbldocumentemployeepermission WHERE DOCUMENT_ID = :document_id');
            $sql->bindParam(':document_id', $document_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete Employee Document Permission', 'User ' . $username . ' deleted employee document permission (' . $document_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_transmittal
    # Purpose    : Delete transmittal
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_transmittal($transmittal_id, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tbltransmittal WHERE TRANSMITTAL_ID = :transmittal_id');
            $sql->bindParam(':transmittal_id', $transmittal_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete Transmittal', 'User ' . $username . ' deleted transmittal (' . $transmittal_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_all_transmittal_history
    # Purpose    : Delete all transmittal history
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_all_transmittal_history($transmittal_id, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tbltransmittalhistory WHERE TRANSMITTAL_ID = :transmittal_id');
            $sql->bindParam(':transmittal_id', $transmittal_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete All Transmittal History', 'User ' . $username . ' deleted all transmittal history (' . $transmittal_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_suggest_to_win
    # Purpose    : Delete suggest to win
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_suggest_to_win($stw_id, $username){
        if ($this->databaseConnection()) {
            $stw_details = $this->get_data_details_one_parameter('suggest to win', $stw_id);
            $file_path = $stw_details[0]['FILE_PATH'];

            if(!empty($file_path)){
                if(file_exists($file_path)){
                    if (unlink($file_path)) {
                        $sql = $this->db_connection->prepare('DELETE FROM tblstw WHERE STW_ID = :stw_id');
                        $sql->bindParam(':stw_id', $stw_id);

                        if($sql->execute()){
                            $insert_user_log = $this->insert_logs($username, 'Delete Suggest To Win', 'User ' . $username . ' deleted suggest to win (' . $stw_id . ').');

                            if($insert_user_log == '1'){
                                return '1';
                            }
                            else{
                                return $insert_user_log;
                            }
                        }
                        else{
                            return $sql->errorInfo()[2];
                        }
                    }
                    else {
                        return $file_path . ' cannot be deleted due to an error.';
                    }
                }
                else{
                    $sql = $this->db_connection->prepare('DELETE FROM tblstw WHERE STW_ID = :stw_id');
                    $sql->bindParam(':stw_id', $stw_id);

                    if($sql->execute()){
                        $insert_user_log = $this->insert_logs($username, 'Delete Suggest To Win', 'User ' . $username . ' deleted suggest to win (' . $stw_id . ').');

                        if($insert_user_log == '1'){
                            return '1';
                        }
                        else{
                            return $insert_user_log;
                        }
                    }
                    else{
                        return $sql->errorInfo()[2];
                    }
                }
            }
            else{
                $sql = $this->db_connection->prepare('DELETE FROM tblstw WHERE STW_ID = :stw_id');
                $sql->bindParam(':stw_id', $stw_id);

                if($sql->execute()){
                    $insert_user_log = $this->insert_logs($username, 'Delete Suggest To Win', 'User ' . $username . ' deleted suggest to win (' . $stw_id . ').');

                    if($insert_user_log == '1'){
                        return '1';
                    }
                    else{
                        return $insert_user_log;
                    }
                }
                else{
                    return $sql->errorInfo()[2];
                }
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_training_room_log
    # Purpose    : Delete training room log
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_training_room_log($log_id, $username){
        if ($this->databaseConnection()) {

            $sql = $this->db_connection->prepare('DELETE FROM tbltrainingroomlogsheet WHERE LOG_ID = :log_id');
            $sql->bindParam(':log_id', $log_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete Training Room Log', 'User ' . $username . ' deleted training room log (' . $log_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_all_training_room_log_participant
    # Purpose    : Delete all training room log participants
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_all_training_room_log_participant($log_id, $username){
        if ($this->databaseConnection()) {

            $sql = $this->db_connection->prepare('DELETE FROM tbltrainingroomparticipant WHERE LOG_ID = :log_id');
            $sql->bindParam(':log_id', $log_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete Training Room Participants Log', 'User ' . $username . ' deleted training room log participants (' . $log_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_weekly_cash_flow
    # Purpose    : Delete weekly cash flow
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_weekly_cash_flow($wcf_id, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tblwcf WHERE WCF_ID = :wcf_id');
            $sql->bindParam(':wcf_id', $wcf_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete Weekly Cash Flow', 'User ' . $username . ' deleted weekly cash flow (' . $wcf_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_all_weekly_cash_flow_particulars
    # Purpose    : Delete all weekly cash flow particulars
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_all_weekly_cash_flow_particulars($wcf_id, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tblwcfparticulars WHERE WCF_ID = :wcf_id');
            $sql->bindParam(':wcf_id', $wcf_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete All Weekly Cash Flow Particulars', 'User ' . $username . ' deleted all weekly cash flow particulars (' . $wcf_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_weekly_cash_flow_particulars
    # Purpose    : Delete weekly cash flow particulars
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_weekly_cash_flow_particulars($particular_id, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tblwcfparticulars WHERE PARTICULAR_ID = :particular_id');
            $sql->bindParam(':particular_id', $particular_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete Weekly Cash Flow Particulars', 'User ' . $username . ' deleted weekly cash flow particular (' . $particular_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_ticket
    # Purpose    : Delete ticket
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_ticket($ticket_id, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tblticket WHERE TICKET_ID = :ticket_id');
            $sql->bindParam(':ticket_id', $ticket_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete Ticket', 'User ' . $username . ' deleted ticket (' . $ticket_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_all_ticket_notes
    # Purpose    : Delete all ticket notes
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_all_ticket_notes($ticket_id, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tblticketnotes WHERE TICKET_ID = :ticket_id');
            $sql->bindParam(':ticket_id', $ticket_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete All Ticket Notes', 'User ' . $username . ' deleted all ticket notes (' . $ticket_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_all_ticket_attachments
    # Purpose    : Delete all ticket attachments
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_all_ticket_attachments($ticket_id, $username){
        if ($this->databaseConnection()) {
            $error = '';
            $sql = $this->db_connection->prepare('SELECT ATTACHMENT_ID FROM tblticketattachment WHERE TICKET_ID = :ticket_id');
            $sql->bindParam(':ticket_id', $ticket_id);

            if($sql->execute()){
                while($row = $sql->fetch()){
                    $attachment_id = $row['ATTACHMENT_ID'];

                    $delete_ticket_attachment = $this->delete_ticket_attachment($attachment_id, $username);

                    if($delete_ticket_attachment != '1'){
                        $error = $delete_ticket_attachment;
                    }
                }

                if(empty($error)){
                    $insert_user_log = $this->insert_logs($username, 'Delete All Ticket Attachment', 'User ' . $username . ' deleted all ticket attachments (' . $ticket_id . ').');

                    if($insert_user_log == '1'){
                        return '1';
                    }
                    else{
                        return $insert_user_log;
                    }
                }
                else{
                    return $error;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_ticket_attachment
    # Purpose    : Delete ticket attachment
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_ticket_attachment($attachment_id, $username){
        if ($this->databaseConnection()) {
            $stw_details = $this->get_data_details_one_parameter('ticket attachment', $attachment_id);
            $file_path = $stw_details[0]['FILE_PATH'];

            if(file_exists($file_path)){
                if (unlink($file_path)) {
                    $sql = $this->db_connection->prepare('DELETE FROM tblticketattachment WHERE ATTACHMENT_ID = :attachment_id');
                    $sql->bindParam(':attachment_id', $attachment_id);

                    if($sql->execute()){
                        $insert_user_log = $this->insert_logs($username, 'Delete Ticket Attachment', 'User ' . $username . ' deleted ticket attachment (' . $attachment_id . ').');

                        if($insert_user_log == '1'){
                            return '1';
                        }
                        else{
                            return $insert_user_log;
                        }
                    }
                    else{
                        return $sql->errorInfo()[2];
                    }
                }
                else {
                    return $file_path . ' cannot be deleted due to an error.';
                }
            }
            else{
                $sql = $this->db_connection->prepare('DELETE FROM tblticketattachment WHERE ATTACHMENT_ID = :attachment_id');
                $sql->bindParam(':attachment_id', $attachment_id);

                if($sql->execute()){
                    $insert_user_log = $this->insert_logs($username, 'Delete Ticket Attachment', 'User ' . $username . ' deleted ticket attachment (' . $attachment_id . ').');

                    if($insert_user_log == '1'){
                        return '1';
                    }
                    else{
                        return $insert_user_log;
                    }
                }
                else{
                    return $sql->errorInfo()[2];
                }
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_ticket_note
    # Purpose    : Delete ticket note
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_ticket_note($note_id, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tblticketnotes WHERE NOTE_ID = :note_id');
            $sql->bindParam(':note_id', $note_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete Ticket Note', 'User ' . $username . ' deleted ticket note (' . $note_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_all_ticket_adjustments
    # Purpose    : Delete all ticket adjustments
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_all_ticket_adjustments($ticket_id, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tblticketadjustment WHERE TICKET_ID = :ticket_id');
            $sql->bindParam(':ticket_id', $ticket_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete All Ticket Adjustments', 'User ' . $username . ' deleted all ticket adjustments (' . $ticket_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_ticket_adjustment
    # Purpose    : Delete ticket adjustment
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_ticket_adjustment($adjustment_id, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tblticketadjustment WHERE ADJUSTMENT_ID = :adjustment_id');
            $sql->bindParam(':adjustment_id', $adjustment_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete Ticket Adjustment', 'User ' . $username . ' deleted ticket adjustmet (' . $adjustment_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_meeting
    # Purpose    : Delete meeting
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_meeting($meeting_id, $username){
        if ($this->databaseConnection()) {

            $sql = $this->db_connection->prepare('DELETE FROM tblmeeting WHERE MEETING_ID = :meeting_id');
            $sql->bindParam(':meeting_id', $meeting_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete Meeting', 'User ' . $username . ' deleted meeting (' . $meeting_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_all_meeting_attendees
    # Purpose    : Delete all meeting attendees
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_all_meeting_attendees($meeting_id, $username){
        if ($this->databaseConnection()) {

            $sql = $this->db_connection->prepare('DELETE FROM tblmeetingattendees WHERE MEETING_ID = :meeting_id');
            $sql->bindParam(':meeting_id', $meeting_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete All Meeting Attendees', 'User ' . $username . ' deleted all meeting attendees (' . $meeting_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_all_meeting_absentees
    # Purpose    : Delete all meeting absentees
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_all_meeting_absentees($meeting_id, $username){
        if ($this->databaseConnection()) {

            $sql = $this->db_connection->prepare('DELETE FROM tblmeetingabsentattendees WHERE MEETING_ID = :meeting_id');
            $sql->bindParam(':meeting_id', $meeting_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete All Meeting Absentees', 'User ' . $username . ' deleted all meeting absentees (' . $meeting_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_all_meeting_permission
    # Purpose    : Delete all meeting permission
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_all_meeting_permission($meeting_id, $username){
        if ($this->databaseConnection()) {

            $sql = $this->db_connection->prepare('DELETE FROM tblmeetingpermission WHERE MEETING_ID = :meeting_id');
            $sql->bindParam(':meeting_id', $meeting_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete All Meeting Permission', 'User ' . $username . ' deleted all meeting permission (' . $meeting_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_meeting_note
    # Purpose    : Delete meeting note
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_meeting_note($note_id, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tblmeetingnotes WHERE NOTE_ID = :note_id');
            $sql->bindParam(':note_id', $note_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete Meeting Note', 'User ' . $username . ' deleted meeting note (' . $note_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_all_meeting_note
    # Purpose    : Delete all meeting note
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_all_meeting_note($meeting_id, $username){
        if ($this->databaseConnection()) {

            $sql = $this->db_connection->prepare('DELETE FROM tblmeetingnotes WHERE MEETING_ID = :meeting_id');
            $sql->bindParam(':meeting_id', $meeting_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete All Meeting Note', 'User ' . $username . ' deleted all meeting note (' . $meeting_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_all_meeting_task
    # Purpose    : Delete all meeting task
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_all_meeting_task($meeting_id, $username){
        if ($this->databaseConnection()) {

            $sql = $this->db_connection->prepare('DELETE FROM tblmeetingtask WHERE MEETING_ID = :meeting_id');
                $sql->bindParam(':meeting_id', $meeting_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete All Meeting Task', 'User ' . $username . ' deleted all meeting task (' . $agenda_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_meeting_task
    # Purpose    : Delete meeting task
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_meeting_task($task_id, $username){
        if ($this->databaseConnection()) {

            $sql = $this->db_connection->prepare('DELETE FROM tblmeetingtask WHERE TASK_ID = :task_id');
            $sql->bindParam(':task_id', $task_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete Meeting Task', 'User ' . $username . ' deleted meeting task (' . $task_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_meeting_memo
    # Purpose    : Delete meeting memo
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_meeting_memo($memo_id, $username){
        if ($this->databaseConnection()) {

            $sql = $this->db_connection->prepare('DELETE FROM tblmeetingmemo WHERE MEMO_ID = :memo_id');
            $sql->bindParam(':memo_id', $memo_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete Meeting Memo', 'User ' . $username . ' deleted meeting memo (' . $memo_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_all_meeting_memo
    # Purpose    : Delete all meeting memos & procedures
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_all_meeting_memo($meeting_id, $username){
        if ($this->databaseConnection()) {

            $sql = $this->db_connection->prepare('DELETE FROM tblmeetingmemo WHERE MEETING_ID = :meeting_id');
            $sql->bindParam(':meeting_id', $meeting_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete All Meeting Memo', 'User ' . $username . ' deleted all meeting memo (' . $meeting_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_meeting_other_matters
    # Purpose    : Delete meeting other matters
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_meeting_other_matters($other_matters_id, $username){
        if ($this->databaseConnection()) {

            $sql = $this->db_connection->prepare('DELETE FROM tblmeetingothermatters WHERE OTHER_MATTERS_ID = :other_matters_id');
            $sql->bindParam(':other_matters_id', $other_matters_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete Meeting Other Matters', 'User ' . $username . ' deleted meeting other matters (' . $other_matters_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_all_meeting_other_matters
    # Purpose    : Delete all meeting other matters
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_all_meeting_other_matters($meeting_id, $username){
        if ($this->databaseConnection()) {

            $sql = $this->db_connection->prepare('DELETE FROM tblmeetingothermatters WHERE MEETING_ID = :meeting_id');
            $sql->bindParam(':meeting_id', $meeting_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete All Meeting Other Matters', 'User ' . $username . ' deleted all meeting other matters (' . $meeting_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_training
    # Purpose    : Delete training
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_training($training_id, $username){
        if ($this->databaseConnection()) {

            $sql = $this->db_connection->prepare('DELETE FROM tbltraining WHERE TRAINING_ID = :training_id');
            $sql->bindParam(':training_id', $training_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete Training', 'User ' . $username . ' deleted training (' . $training_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_training_attendees
    # Purpose    : Delete assigned training attendees
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_training_attendees($training_id, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tbltrainingattendees WHERE TRAINING_ID = :training_id');
            $sql->bindParam(':training_id', $training_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete Training Attendees', 'User ' . $username . ' deleted training attendees (' . $training_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

	# -------------------------------------------------------------
    #
    # Name       : delete_car_search_parameter
    # Purpose    : Delete car search parameter
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_car_search_parameter($parameter_id, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tblcarparameter WHERE PARAMETER_ID = :parameter_id');
            $sql->bindParam(':parameter_id', $parameter_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete Department', 'User ' . $username . ' deleted car search parameter (' . $parameter_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_price_index_item
    # Purpose    : Delete price index item
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_price_index_item($item_id, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tblpriceindexitem WHERE ITEM_ID = :item_id');
            $sql->bindParam(':item_id', $item_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete Price Index Item', 'User ' . $username . ' deleted price index item (' . $item_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : delete_price_index_amount
    # Purpose    : Delete price index amount
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function delete_price_index_amount($item_id, $year, $username){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('DELETE FROM tblpriceindexitemvalue WHERE ITEM_ID = :item_id AND YEAR_MODEL = :year');
            $sql->bindParam(':item_id', $item_id);
            $sql->bindParam(':year', $year);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Delete Price Index Value', 'User ' . $username . ' deleted price index value (' . $item_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #   Get data
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_permission_count
    # Purpose    : Gets the roles' sub permission count
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function get_permission_count($role_id, $permission_id){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('SELECT COUNT(PERMISSION_ID) AS TOTAL FROM tblrolepermission WHERE ROLE_ID = :role_id AND PERMISSION_ID = :permission_id');
            $sql->bindParam(':role_id', $role_id);
            $sql->bindParam(':permission_id', $permission_id);

            if($sql->execute()){
                $row = $sql->fetch();

                return $row['TOTAL'];
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_system_parameter
    # Purpose    : Gets the system parameter
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function get_system_parameter($parameter_id, $add){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('SELECT PARAMETER_EXTENSION, PARAMETER_NUMBER FROM tblsystemparameters WHERE PARAMETER_ID = :parameter_id');
            $sql->bindParam(':parameter_id', $parameter_id);

            if($sql->execute()){
                $row = $sql->fetch();

                $parameter_number = $row['PARAMETER_NUMBER'] + $add; # Add value to system number
                $parameter_extension = trim($row['PARAMETER_EXTENSION']);

                $response[] = array(
                    'PARAMNUM' => $parameter_number,
                    'ID' => $parameter_extension . $parameter_number
                );

                return $response;
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_modal_size
    # Purpose    : Get the size of the modal.
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function get_modal_size($size){
        if($size == 'SM'){
            return 'modal-sm';
        }
        else if($size == 'LG'){
            return 'modal-lg';
        }
        else if($size == 'XL'){
            return 'modal-xl';
        }
        else {
            return '';
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_role_status
    # Purpose    : Returns the status, badge
    #
    # Returns    : Array
    #
    # -------------------------------------------------------------
    public function get_role_status($stat){
        $response = array();

        switch ($stat) {
            case '1':
                $status = 'ACTIVE';
                $button_class = 'bg-success';
                break;
            default:
                $status = 'INACTIVE';
                $button_class = 'bg-danger';
        }

        $response[] = array(
            'STATUS' => $status,
            'BADGE' => '<span class="badge '. $button_class .'">'. $status .'</span>'
        );

        return $response;
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_user_account_lock_status
    # Purpose    : Returns the status, badge
    #
    # Returns    : Array
    #
    # -------------------------------------------------------------
    public function get_user_account_lock_status($failed_login_attempts){
        $response = array();

        if ($failed_login_attempts >= 5) {
            $status = 'LOCKED';
            $button_class = 'bg-danger';
        }
        else{
            $status = 'UNLOCKED';
            $button_class = 'bg-success';
        }

        $response[] = array(
            'STATUS' => $status,
            'BADGE' => '<span class="badge '. $button_class .'">'. $status .'</span>'
        );

        return $response;
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_user_account_status
    # Purpose    : Returns the status, badge
    #
    # Returns    : Array
    #
    # -------------------------------------------------------------
    public function get_user_account_status($stat){
        $response = array();

        switch ($stat) {
            case '1':
                $status = 'ACTIVE';
                $button_class = 'bg-success';
                break;
            default:
                $status = 'INACTIVE';
                $button_class = 'bg-danger';
        }

        $response[] = array(
            'STATUS' => $status,
            'BADGE' => '<span class="badge '. $button_class .'">'. $status .'</span>'
        );

        return $response;
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_email_notification_status
    # Purpose    : Returns the status, badge
    #
    # Returns    : Array
    #
    # -------------------------------------------------------------
    public function get_email_notification_status($stat){
        $response = array();

        switch ($stat) {
            case '1':
                $status = 'ACTIVE';
                $button_class = 'bg-success';
                break;
            default:
                $status = 'INACTIVE';
                $button_class = 'bg-danger';
        }

        $response[] = array(
            'STATUS' => $status,
            'BADGE' => '<span class="badge '. $button_class .'">'. $status .'</span>'
        );

        return $response;
    }


    public function get_employee_departures_with_reasons() {
    if ($this->databaseConnection()) {
        $query = "
            WITH months AS (
                SELECT 1 AS month_num, 'Jan' AS month_name UNION
                SELECT 2, 'Feb' UNION
                SELECT 3, 'Mar' UNION
                SELECT 4, 'Apr' UNION
                SELECT 5, 'May' UNION
                SELECT 6, 'Jun' UNION
                SELECT 7, 'Jul' UNION
                SELECT 8, 'Aug' UNION
                SELECT 9, 'Sep' UNION
                SELECT 10, 'Oct' UNION
                SELECT 11, 'Nov' UNION
                SELECT 12, 'Dec'
            ),
            exit_reasons AS (
                SELECT DISTINCT EXIT_REASON
                FROM tblemployeeprofile
                WHERE EXIT_DATE IS NOT NULL
                AND EXIT_REASON IS NOT NULL
                AND EXIT_REASON != ''
                LIMIT 5
            )
            SELECT
                m.month_name AS month,
                COUNT(e.EMPLOYEE_ID) AS total_departures,
                SUM(CASE WHEN e.EXIT_REASON IS NULL OR e.EXIT_REASON = '' THEN 1 ELSE 0 END) AS no_reason,
                SUM(CASE WHEN e.EXIT_REASON = 'Resignation' THEN 1 ELSE 0 END) AS resignation,
                SUM(CASE WHEN e.EXIT_REASON = 'Termination' THEN 1 ELSE 0 END) AS termination,
                SUM(CASE WHEN e.EXIT_REASON = 'Retirement' THEN 1 ELSE 0 END) AS retirement,
                SUM(CASE WHEN e.EXIT_REASON = 'End of Contract' THEN 1 ELSE 0 END) AS end_of_contract,
                SUM(CASE WHEN e.EXIT_REASON NOT IN ('', 'Resignation', 'Termination', 'Retirement', 'End of Contract')
                    AND e.EXIT_REASON IS NOT NULL THEN 1 ELSE 0 END) AS other
            FROM
                months m
            LEFT JOIN
                tblemployeeprofile e ON
                    MONTH(e.EXIT_DATE) = m.month_num AND
                    YEAR(e.EXIT_DATE) = YEAR(CURRENT_DATE())
            WHERE
                m.month_num <= MONTH(CURRENT_DATE())
            GROUP BY
                m.month_num, m.month_name
            ORDER BY
                m.month_num";

        $sql = $this->db_connection->prepare($query);

        if (!$sql->execute()) {
            return $sql->errorInfo()[2];
        }

        return $sql->fetchAll(PDO::FETCH_ASSOC);
    }

    return false;
}

    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_paid_status
    # Purpose    : Returns the status, badge
    #
    # Returns    : Array
    #
    # -------------------------------------------------------------
    public function get_paid_status($stat){
        $response = array();

        switch ($stat) {
            case '0':
                $status = 'LOCKED';
                $button_class = 'bg-info';
                break;
            case '1':
                $status = 'PAID';
                $button_class = 'bg-success';
                break;
            default:
                $status = 'REVERSED';
                $button_class = 'bg-danger';
        }

        $response[] = array(
            'STATUS' => $status,
            'BADGE' => '<span class="badge '. $button_class .'">'. $status .'</span>'
        );

        return $response;
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_day_off_status
    # Purpose    : Returns the status, badge
    #
    # Returns    : Array
    #
    # -------------------------------------------------------------
    public function get_day_off_status($stat){
        $response = array();

        switch ($stat) {
            case '1':
                $status = 'True';
                $button_class = 'bg-success';
                break;
            default:
                $status = 'False';
                $button_class = 'bg-info';
        }

        $response[] = array(
            'STATUS' => $status,
            'BADGE' => '<span class="badge '. $button_class .'">'. $status .'</span>'
        );

        return $response;
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_employment_status
    # Purpose    : Returns the status, badge
    #
    # Returns    : Array
    #
    # -------------------------------------------------------------
    public function get_employment_status($stat){
        $response = array();

        switch ($stat) {
            case '1':
                $status = 'Active';
                $button_class = 'bg-success';
                break;
            default:
                $status = 'Inactive';
                $button_class = 'bg-danger';
        }

        $response[] = array(
            'STATUS' => $status,
            'BADGE' => '<span class="badge '. $button_class .'">'. $status .'</span>'
        );

        return $response;
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_day_name
    # Purpose    : Returns the day name
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function get_day_name($day){
        $response = array();

        switch ($day) {
            case '1':
                $day_name = 'Monday';
                break;
            case '2':
                $day_name = 'Tuesday';
                break;
            case '3':
                $day_name = 'Wednesday';
                break;
            case '4':
                $day_name = 'Thursday';
                break;
            case '5':
                $day_name = 'Friday';
                break;
            case '6':
                $day_name = 'Saturday';
                break;
            default:
                $day_name = 'Sunday';
        }

        return $day_name;
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_leave_entitlement_status
    # Purpose    : Returns the status, badge
    #
    # Returns    : Array
    #
    # -------------------------------------------------------------
      public function get_leave_entitlement_status($no_leaves, $acquired_no_leaves){
    $response = [];

    if($acquired_no_leaves > 0){
        if($no_leaves == 0){
            $button_class = 'bg-success';
        } else {
            $percent = ($acquired_no_leaves / $no_leaves) * 100;
            if($percent < 50){
                $button_class = 'bg-success';
            } else if ($percent >= 50 && $percent < 80){
                $button_class = 'bg-warning';
            } else {
                $button_class = 'bg-danger'; // Covers percent >= 80
            }
        }
    } else {
        $button_class = 'bg-success';
    }

    $response[] = [
        'STATUS' => $acquired_no_leaves . ' / ' . $no_leaves,
        'BADGE' => '<span class="badge '. $button_class  .'">'.number_format($this->check_number($acquired_no_leaves), 1). ' / ' . ( $no_leaves == 0 ? '∞' : $no_leaves ) .'</span>'
    ];

    return $response;
}

    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_leave_status
    # Purpose    : Returns the status, badge
    #
    # Returns    : Array
    #
    # -------------------------------------------------------------
    public function get_leave_status($stat, $system_date, $leave_date){
        $response = array();

        if($stat == '0'){
            $status = 'Rejected';
            $button_class = 'bg-danger';
        }
        else if($stat == '1'){
            if(strtotime($system_date) >= strtotime($leave_date)){
                $status = 'Taken';
                $button_class = 'bg-primary';
            }
            else{
                $status = 'Approved';
                $button_class = 'bg-success';
            }
        }
        else if($stat == '2'){
            $status = 'Pending';
            $button_class = 'bg-info';
        }
        else if($stat == '3'){
            $status = 'Cancelled';
            $button_class = 'bg-warning';
        }
        else{
            $status = 'Approved (System Generated)';
            $button_class = 'bg-danger';
        }

        $response[] = array(
            'STATUS' => $status,
            'BADGE' => '<span class="badge '. $button_class .'">'. $status .'</span>'
        );

        return $response;
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_attendance_adjustment_status
    # Purpose    : Returns the status, badge
    #
    # Returns    : Array
    #
    # -------------------------------------------------------------
    public function get_attendance_adjustment_status($stat){
        $response = array();

        if($stat == '0'){
            $status = 'Pending';
            $button_class = 'bg-primary';
        }
        else if($stat == '1'){
            $status = 'Approved';
            $button_class = 'bg-success';
        }
        else if($stat == '2'){
            $status = 'Rejected';
            $button_class = 'bg-danger';
        }
        else if($stat == '3'){
            $status = 'Cancelled';
            $button_class = 'bg-warning';
        }
        else{
            $status = 'Recommended';
            $button_class = 'bg-success';
        }

        $response[] = array(
            'STATUS' => $status,
            'BADGE' => '<span class="badge '. $button_class .'">'. $status .'</span>'
        );

        return $response;
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_payroll_specification_status
    # Purpose    : Returns the status, badge
    #
    # Returns    : Array
    #
    # -------------------------------------------------------------
    public function get_payroll_specification_status($stat){
        $response = array();

        if($stat == '0'){
            $status = 'Unpaid';
            $button_class = 'bg-warning';
        }
        else if($stat == '1'){
            $status = 'Paid';
            $button_class = 'bg-success';
        }
        else{
            $status = 'Reversed';
            $button_class = 'bg-danger';
        }

        $response[] = array(
            'STATUS' => $status,
            'BADGE' => '<span class="badge '. $button_class .'">'. $status .'</span>'
        );

        return $response;
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_telephone_log_status
    # Purpose    : Returns the status, badge
    #
    # Returns    : Array
    #
    # -------------------------------------------------------------
    public function get_telephone_log_status($stat){
        $response = array();

        switch ($stat) {
            case '0':
                $status = 'Pending';
                $button_class = 'bg-primary';
                break;
            case '1':
                $status = 'Approved';
                $button_class = 'bg-success';
                break;
            case '2':
                $status = 'Rejected';
                $button_class = 'bg-danger';
                break;
            case '3':
                $status = 'Cancelled';
                $button_class = 'bg-warning';
                break;
            case '4':
                $status = 'Consumed';
                $button_class = 'bg-success';
                break;
            default:
                $status = 'Not Consumed';
                $button_class = 'bg-info';
        }

        $response[] = array(
            'STATUS' => $status,
            'BADGE' => '<span class="badge '. $button_class .'">'. $status .'</span>'
        );

        return $response;
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_training_room_log_status
    # Purpose    : Returns the status, badge
    #
    # Returns    : Array
    #
    # -------------------------------------------------------------
    public function get_training_room_log_status($stat){
        $response = array();

        switch ($stat) {
            case '0':
                $status = 'Pending';
                $button_class = 'bg-primary';
                break;
            case '1':
                $status = 'Approved';
                $button_class = 'bg-success';
                break;
            case '2':
                $status = 'Rejected';
                $button_class = 'bg-danger';
                break;
            case '3':
                $status = 'Cancelled';
                $button_class = 'bg-warning';
                break;
            case '4':
                $status = 'Consumed';
                $button_class = 'bg-success';
                break;
            default:
                $status = 'Not Consumed';
                $button_class = 'bg-info';
        }

        $response[] = array(
            'STATUS' => $status,
            'BADGE' => '<span class="badge '. $button_class .'">'. $status .'</span>'
        );

        return $response;
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_transmittal_status
    # Purpose    : Returns the status, badge
    #
    # Returns    : Array
    #
    # -------------------------------------------------------------
    public function get_transmittal_status($stat){
        $response = array();

        switch ($stat) {
            case '0':
                $status = 'Pending';
                $button_class = 'bg-primary';
                break;
            case '1':
                $status = 'Received';
                $button_class = 'bg-success';
                break;
            case '2':
                $status = 'Re-Transmitted';
                $button_class = 'bg-info';
                break;
            case '3':
                $status = 'Filed';
                $button_class = 'bg-warning';
                break;
            default:
                $status = 'Cancelled';
                $button_class = 'bg-danger';
        }

        $response[] = array(
            'STATUS' => $status,
            'BADGE' => '<span class="badge '. $button_class .'">'. $status .'</span>'
        );

        return $response;
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_incoming_outgoing_status
    # Purpose    : Returns the status, badge
    #
    # Returns    : Array
    #
    # -------------------------------------------------------------
    public function get_incoming_outgoing_status($employee_id, $employee_department, $current_department, $transmitted_employee, $transmitted_department, $status){
        $response = array();

        if($status == '0' || $status == '2'){
            if($current_department == $employee_department){
                $status = 'Outgoing';
                $button_class = 'bg-success';
            }
            else if($transmitted_employee == $employee_id || $transmitted_department == $employee_department){
                $status = 'Incoming';
                $button_class = 'bg-info';
            }
            else{
                $status = '--';
                $button_class = 'bg-info';
            }
        }
        else{
            $status = '--';
            $button_class = 'bg-info';
        }

        $response[] = array(
            'STATUS' => $status,
            'BADGE' => '<span class="badge '. $button_class .'">'. $status .'</span>'
        );

        return $response;
    }
    # -------------------------------------------------------------

     # -------------------------------------------------------------
    #
    # Name       : get_transmittal_type
    # Purpose    : Returns the status, badge
    #
    # Returns    : Array
    #
    # -------------------------------------------------------------
    public function get_transmittal_type($type){
        $response = array();

        switch ($type) {
            case '0':
                $text = 'Created';
                $button_class = 'bg-primary';
                break;
            case '1':
                $text = 'Received';
                $button_class = 'bg-success';
                break;
            case '2':
                $text = 'Re-Transmitted';
                $button_class = 'bg-info';
                break;
            case '3':
                $text = 'Filed';
                $button_class = 'bg-warning';
                break;
            case '4':
                $text = 'Cancelled';
                $button_class = 'bg-danger';
                break;
            default:
                $text = 'Update';
                $button_class = 'bg-info';
        }

        $response[] = array(
            'TEXT' => $text,
            'BADGE' => '<span class="badge '. $button_class .'">'. $text .'</span>'
        );

        return $response;
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_document_status
    # Purpose    : Returns the status, badge
    #
    # Returns    : Array
    #
    # -------------------------------------------------------------
    public function get_document_status($stat){
        $response = array();

        switch ($stat) {
            case '0':
                $status = 'Pending';
                $button_class = 'bg-primary';
                break;
            case '1':
                $status = 'Approved';
                $button_class = 'bg-success';
                break;
            case '2':
               $status = 'Rescinded';
                $button_class = 'bg-warning';
                break;
            default:
                $status = 'Error';
                $button_class = 'bg-danger';
        }

        $response[] = array(
            'STATUS' => $status,
            'BADGE' => '<span class="badge '. $button_class .'">'. $status .'</span>'
        );

        return $response;
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_stw_status
    # Purpose    : Returns the status, badge
    #
    # Returns    : Array
    #
    # -------------------------------------------------------------
    public function get_stw_status($stat){
        $response = array();

        switch ($stat) {
            case '0':
                $status = 'Pending';
                $button_class = 'bg-primary';
                break;
            case '1':
                $status = 'Approved';
                $button_class = 'bg-success';
                break;
            case '2':
                $status = 'Rejected';
                $button_class = 'bg-danger';
                break;
            default:
                $status = 'Cancelled';
                $button_class = 'bg-warning';
        }

        $response[] = array(
            'STATUS' => $status,
            'BADGE' => '<span class="badge '. $button_class .'">'. $status .'</span>'
        );

        return $response;
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_wcf_status
    # Purpose    : Returns the status, badge
    #
    # Returns    : Array
    #
    # -------------------------------------------------------------
    public function get_wcf_status($stat){
        $response = array();

        switch ($stat) {
            case '0':
                $status = 'Pending';
                $button_class = 'bg-primary';
                break;
            case '1':
                $status = 'Approved';
                $button_class = 'bg-success';
                break;
            case '2':
                $status = 'Locked';
                $button_class = 'bg-danger';
                break;
            default:
                $status = 'Unlocked';
                $button_class = 'bg-info';
        }

        $response[] = array(
            'STATUS' => $status,
            'BADGE' => '<span class="badge '. $button_class .'">'. $status .'</span>'
        );

        return $response;
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_ticket_status
    # Purpose    : Returns the status, badge
    #
    # Returns    : Array
    #
    # -------------------------------------------------------------
    public function get_ticket_status($stat, $system_date, $due_date){
        $response = array();

        switch ($stat) {
            case '0':
                $status = 'Open';
                $button_class = 'bg-primary';
                break;
            case '1':
                if(strtotime($system_date) > strtotime($due_date)){
                    $status = 'Overdue';
                    $button_class = 'bg-danger';
                }
                else{
                    $status = 'Accepted';
                    $button_class = 'bg-success';
                }
                break;
            case '2':
                $status = 'Rejected';
                $button_class = 'bg-danger';
                break;
            case '3':
                $status = 'Cancelled';
                $button_class = 'bg-warning';
                break;
            case '4':
                $status = 'Solved';
                $button_class = 'bg-info';
                break;
            case '5':
                $status = 'Unsolved';
                $button_class = 'bg-danger';
                break;
            default:
                $status = 'Closed';
                $button_class = 'bg-success';
        }

        $response[] = array(
            'STATUS' => $status,
            'BADGE' => '<span class="badge '. $button_class .'">'. $status .'</span>'
        );

        return $response;
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_ticket_priority
    # Purpose    : Returns the status, badge
    #
    # Returns    : Array
    #
    # -------------------------------------------------------------
    public function get_ticket_priority($stat){
        $response = array();

        switch ($stat) {
            case '1':
                $status = 'Low';
                $button_class = 'bg-primary';
                break;
            case '2':
                $status = 'Medium';
                $button_class = 'bg-warning';
                break;
            default:
                $status = 'High';
                $button_class = 'bg-danger';
        }

        $response[] = array(
            'STATUS' => $status,
            'BADGE' => '<span class="badge '. $button_class .'">'. $status .'</span>'
        );

        return $response;
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_ticket_adjustment_status
    # Purpose    : Returns the status, badge
    #
    # Returns    : Array
    #
    # -------------------------------------------------------------
    public function get_ticket_adjustment_status($stat){
        $response = array();

        switch ($stat) {
            case '0':
                $status = 'Pending';
                $button_class = 'bg-primary';
                break;
            case '1':
                $status = 'Approved';
                $button_class = 'bg-success';
                break;
            case '2':
                $status = 'Rejected';
                $button_class = 'bg-danger';
                break;
            default:
                $status = 'Cancelled';
                $button_class = 'bg-warning';
        }

        $response[] = array(
            'STATUS' => $status,
            'BADGE' => '<span class="badge '. $button_class .'">'. $status .'</span>'
        );

        return $response;
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_full_name
    # Purpose    : Returns the full name with diffrent format
    #
    # Returns    : Array
    #
    # -------------------------------------------------------------
    public function get_full_name($first_name, $middle_name, $last_name, $suffix){
        $response = array();

        if(!empty($middle_name)){
            if(!empty($suffix)){
                $full_name = $first_name . ' ' . $middle_name . ' ' . $last_name . ' ' . $suffix;
                $first_last = $first_name . ' ' . $last_name;
                $reverse_full_name = $last_name . ' ' . $suffix . ', ' . $first_name . ' ' . $middle_name;
            }
            else{
                $full_name = $first_name . ' ' . $middle_name . ' ' . $last_name;
                $reverse_full_name = $last_name . ', ' . $first_name . ' ' . $middle_name;
                $first_last = $first_name . ' ' . $last_name;
            }
        }
        else{
            if(!empty($suffix)){
                $full_name = $first_name . ' ' . $last_name . ' ' . $suffix;
                $reverse_full_name = $last_name . ' ' . $suffix . ', ' . $first_name;
                $first_last = $first_name . ' ' . $last_name;
            }
            else{
                $full_name = $first_name . ' ' . $last_name;
                $reverse_full_name = $last_name . ', ' . $first_name;
                $first_last = $first_name . ' ' . $last_name;
            }
        }

        $response[] = array(
            'FULL_NAME' => $full_name,
            'FIRST_LAST' => $first_last,
            'REVERSE_FULL_NAME' => $reverse_full_name
        );

        return $response;
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_system_description
    # Purpose    : Returns the system description
    #              of a certain system code
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function get_system_description($system_type, $system_code){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('SELECT SYSTEM_DESC FROM tblsystemcode WHERE SYSTEM_TYPE = :system_type AND SYSTEM_CODE = :system_code');
            $sql->bindParam(':system_type', $system_type);
            $sql->bindParam(':system_code', $system_code);

            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    $row = $sql->fetch();

                    return $row['SYSTEM_DESC'];
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_ip_address
    # Purpose    : Returns the ip address of the client
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function get_ip_address() {
        if(!empty($_SERVER['HTTP_CLIENT_IP'])) {
            $ip = $_SERVER['HTTP_CLIENT_IP'];
        }
        else if (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {
            $ip = $_SERVER['HTTP_X_FORWARDED_FOR'];
        }
        else{
            $ip = $_SERVER['REMOTE_ADDR'];
        }

        return $ip;
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_leave_entitlment_id
    # Purpose    : Returns the date and time of
    #              last employee login
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function get_leave_entitlment_id($employee_id, $leave_type, $leave_date){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('SELECT LEAVE_ENTITLEMENT_ID, START_DATE, END_DATE FROM tblleaveentitlement WHERE EMPLOYEE_ID = :employee_id AND LEAVE_TYPE = :leave_type');
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':leave_type', $leave_type);

            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    while($row = $sql->fetch()){
                        $leave_entitlement_id = $row['LEAVE_ENTITLEMENT_ID'];
                        $start_date = $row['START_DATE'];
                        $end_date = $row['END_DATE'];

                        if(strtotime($leave_date) >= strtotime($start_date) && strtotime($leave_date) <= strtotime($end_date)){
                            return $leave_entitlement_id;
                        }
                    }
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }

     public function get_days_worked_combined($employee_id, $parameter_1, $parameter_2){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare("
                SELECT COUNT(DISTINCT work_date) AS TOTAL FROM (
                    SELECT TIME_IN_DATE AS work_date
                    FROM tblattendancerecord
                    WHERE EMPLOYEE_ID = :employee_id
                    AND TIME_IN_DATE BETWEEN :parameter_1 AND :parameter_2

                    UNION

                    SELECT LEAVE_DATE AS work_date
                    FROM tblleave
                    WHERE EMPLOYEE_ID = :employee_id
                    AND LEAVE_DATE BETWEEN :parameter_1 AND :parameter_2
                    AND LEAVE_TYPE = 'LEAVETP8'
                    AND STATUS = '1'
                ) AS combined_dates
            ");

            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':parameter_1', $parameter_1);
            $sql->bindParam(':parameter_2', $parameter_2);

            if($sql->execute()){
                $row = $sql->fetch();
                return $row['TOTAL'];
            }
            else{
                return $sql->errorInfo()[2];
            }
        }

        return 0;
    }
    # -------------------------------------------------------------
/**
 * Get total working hours for an employee within a date range
 * Sums all TOTAL_HOURS from attendance records
 *
 * @param string $employee_id Employee identifier
 * @param string $parameter_1 Start date (Y-m-d format)
 * @param string $parameter_2 End date (Y-m-d format)
 * @return float Total working hours
 */
public function get_total_working_hours($employee_id, $parameter_1, $parameter_2){
    if ($this->databaseConnection()) {
        $sql = $this->db_connection->prepare("
            SELECT COALESCE(SUM(TOTAL_HOURS), 0) AS TOTAL_HOURS
            FROM tblattendancerecord
            WHERE EMPLOYEE_ID = :employee_id
            AND TIME_IN_DATE BETWEEN :parameter_1 AND :parameter_2
            AND TOTAL_HOURS IS NOT NULL
        ");

        $sql->bindParam(':employee_id', $employee_id);
        $sql->bindParam(':parameter_1', $parameter_1);
        $sql->bindParam(':parameter_2', $parameter_2);

        if($sql->execute()){
            $row = $sql->fetch();
            return $row['TOTAL_HOURS'];
        }
        else{
            return 0;
        }
    }
    return 0;
}

/**
 * Get total official business (paid) hours for an employee within a date range
 * Calculates hours from approved OB (Paid) leave records
 *
 * @param string $employee_id Employee identifier
 * @param string $parameter_1 Start date (Y-m-d format)
 * @param string $parameter_2 End date (Y-m-d format)
 * @return float Total OB paid hours
 */
public function get_total_ob_paid_hours($employee_id, $parameter_1, $parameter_2){
    if ($this->databaseConnection()) {
        $sql = $this->db_connection->prepare("
            SELECT
                SUM(
                    CASE
                        WHEN START_TIME IS NOT NULL AND END_TIME IS NOT NULL THEN
                            TIME_TO_SEC(TIMEDIFF(END_TIME, START_TIME)) / 3600
                        ELSE 8 -- Default 8 hours for full day OB when times are not specified
                    END
                ) AS TOTAL_HOURS
            FROM tblleave
            WHERE EMPLOYEE_ID = :employee_id
            AND DATE(LEAVE_DATE) BETWEEN :parameter_1 AND :parameter_2
            AND LEAVE_TYPE = 'LEAVETP8'
            AND STATUS = '1'
        ");

        $sql->bindParam(':employee_id', $employee_id);
        $sql->bindParam(':parameter_1', $parameter_1);
        $sql->bindParam(':parameter_2', $parameter_2);

        if($sql->execute()){
            $row = $sql->fetch();
            return $row['TOTAL_HOURS'] ?? 0;
        }
        else{
            return 0;
        }
    }
    return 0;
}

    # -------------------------------------------------------------
    #
    # Name       : get_employee_remaining_leave
    # Purpose    : Returns the number of remaining leaves
    #
    # Returns    : Number
    #
    # -------------------------------------------------------------
    public function get_employee_remaining_leave($employee_id, $leave_type){
        if ($this->databaseConnection()) {
            $systemdate = date('Y-m-d');
            $total = 0;

            $sql = $this->db_connection->prepare('SELECT NO_LEAVES, ACQUIRED_NO_LEAVES, START_DATE, END_DATE FROM tblleaveentitlement WHERE EMPLOYEE_ID = :employee_id AND LEAVE_TYPE = :leave_type');
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':leave_type', $leave_type);

            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    while($row = $sql->fetch()){
                        $no_leaves = $row['NO_LEAVES'];
                        $acquired_no_leaves = $row['ACQUIRED_NO_LEAVES'];
                        $start_date = $row['START_DATE'];
                        $end_date = $row['END_DATE'];
                        $remain = $no_leaves - $acquired_no_leaves;

                        if(strtotime($systemdate) >= strtotime($start_date) && strtotime($systemdate) <= strtotime($end_date)){
                            $total = $total + $remain;
                        }
                    }

                    return $total;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_deduction_amount
    # Purpose    : Returns the deduction amount
    #
    # Returns    : Number
    #
    # -------------------------------------------------------------

    public function insert_career($position, $branch, $career_summary, $available_position, $username){
        if ($this->databaseConnection()) {
            $record_log = 'INS->' . $username . '->' . date('Y-m-d h:i:s');
            $career_order = $this->get_last_career_order() + 1;

            # Get system parameter id
            $system_parameter = $this->get_system_parameter('17', 1);
            $paramnum = $system_parameter[0]['PARAMNUM'];
            $id = $system_parameter[0]['ID'];

            $sql = $this->db_connection->prepare("INSERT INTO tblcareer (CAREER_ID, POSITION, BRANCH, SUMMARY, AVAILABLE_POSITION, CAREER_ORDER, PUBLISH, RECORD_LOG) VALUES (:id, :position, :branch, :career_summary, :available_position, :career_order, '0', :record_log)");
            $sql->bindParam(':id', $id);
            $sql->bindParam(':position', $position);
            $sql->bindParam(':branch', $branch);
            $sql->bindParam(':career_summary', $career_summary);
            $sql->bindParam(':available_position', $available_position);
            $sql->bindParam(':career_order', $career_order);
            $sql->bindParam(':record_log', $record_log);

            if($sql->execute()){
                # Update system parameter value
                $update_system_parameter_value = $this->update_system_parameter_value($paramnum, '17', $username);

                if($update_system_parameter_value){
                    $insert_user_log = $this->insert_logs($username, 'Insert Career', 'User ' . $username . ' inserted career (' . $id . ').');

                    if($insert_user_log == '1'){
                        return '1';
                    }
                    else{
                        return $insert_user_log;
                    }
                }
                else{
                    return $update_system_parameter_value;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }

    public function update_career($position,  $branch, $career_summary, $available_position, $career_id, $username){
        if ($this->databaseConnection()) {
            $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

            $sql = $this->db_connection->prepare('UPDATE tblcareer SET POSITION = :position, BRANCH = :branch, SUMMARY = :career_summary, AVAILABLE_POSITION = :available_position, RECORD_LOG = :record_log WHERE CAREER_ID = :career_id');
            $sql->bindParam(':position', $position);
            $sql->bindParam(':branch', $branch);
            $sql->bindParam(':career_summary', $career_summary);
            $sql->bindParam(':available_position', $available_position);
            $sql->bindParam(':record_log', $record_log);
            $sql->bindParam(':career_id', $career_id);

            if($sql->execute()){
                $insert_user_log = $this->insert_logs($username, 'Update Career', 'User ' . $username . ' updated career (' . $career_id . ').');

                if($insert_user_log == '1'){
                    return '1';
                }
                else{
                    return $insert_user_log;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    public function get_career_by_id($career_id){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('SELECT * FROM tblcareer WHERE CAREER_ID = :career_id');
            $sql->bindParam(':career_id', $career_id);

            if($sql->execute()){
                return $sql->fetch(PDO::FETCH_ASSOC);
            } else {
                error_log("Error in get_career_by_id: " . print_r($sql->errorInfo(), true));
                return false;
            }
        }
        return false;
    }

    public function get_all_careers(){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('SELECT CAREER_ID, POSITION FROM tblcareer ORDER BY CAREER_ID');

            if($sql->execute()){
                return $sql->fetchAll(PDO::FETCH_ASSOC);
            } else {
                error_log("Error in get_all_careers: " . print_r($sql->errorInfo(), true));
                return [];
            }
        }
        return [];
    }

    // Enhanced version of your existing check method with better logging
    public function check_career_exists($career_id){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('SELECT COUNT(*) as count FROM tblcareer WHERE CAREER_ID = :career_id');
            $sql->bindParam(':career_id', $career_id);

            if($sql->execute()){
                $result = $sql->fetch(PDO::FETCH_ASSOC);
                error_log("Career exists check - ID: " . $career_id . ", Count: " . $result['count']);
                return $result['count'];
            } else {
                error_log("Error in check_career_exists: " . print_r($sql->errorInfo(), true));
                return 0;
            }
        }
        return 0;
    }
        # -------------------------------------------------------------
        public function delete_career($career_id, $career_order, $username){
            if ($this->databaseConnection()) {
                $sql = $this->db_connection->prepare('DELETE FROM tblcareer WHERE CAREER_ID = :career_id');
                $sql->bindParam(':career_id', $career_id);

                if($sql->execute()){
                    $update_preceeding_career_order = $this->update_preceeding_career_order($career_id, $career_order, $username);

                    if($update_preceeding_career_order == '1'){
                        $insert_user_log = $this->insert_logs($username, 'Delete Career', 'User ' . $username . ' deleted career (' . $career_id . ').');

                        if($insert_user_log == '1'){
                            return '1';
                        }
                        else{
                            return $insert_user_log;
                        }
                    }
                    else{
                        return $update_preceeding_career_order;
                    }
                }
                else{
                    return $sql->errorInfo()[2];
                }
            }
        }

        public function update_preceeding_career_order($career_id, $career_order, $username){
            if ($this->databaseConnection()) {
                $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

                $sql = $this->db_connection->prepare('UPDATE tblcareer SET CAREER_ORDER = (CAREER_ORDER - 1), RECORD_LOG = :record_log WHERE CAREER_ORDER > :career_order');
                $sql->bindParam(':record_log', $record_log);
                $sql->bindParam(':career_order', $career_order);

                if($sql->execute()){
                    $insert_user_log = $this->insert_logs($username, 'Update Career Order', 'User ' . $username . ' updates preceeding career order (' . $career_id . ').');

                    if($insert_user_log == '1'){
                        return '1';
                    }
                    else{
                        return $insert_user_log;
                    }
                }
                else{
                    return $sql->errorInfo()[2];
                }
            }
        }
        public function update_career_publish_status($career_id, $active, $username){
            if ($this->databaseConnection()) {
                $record_log = 'UPD->' . $username . '->' . date('Y-m-d h:i:s');

                // ✅ Updated SQL: Also sets PUBLISH_DATETIME when published
                $sql = $this->db_connection->prepare('
                    UPDATE tblcareer
                    SET PUBLISH = :active,
                        PUBLISH_DATETIME = CASE WHEN :active = 1 THEN NOW() ELSE NULL END,
                        RECORD_LOG = :record_log
                    WHERE CAREER_ID = :career_id
                ');

                $sql->bindParam(':active', $active);
                $sql->bindParam(':record_log', $record_log);
                $sql->bindParam(':career_id', $career_id);

                if($sql->execute()){
                    if($active == 1){
                        $log_type = 'Publish Career';
                        $log = 'User ' . $username . ' published career (' . $career_id . ')';
                    }
                    else{
                        $log_type = 'Unpublish Career';
                        $log = 'User ' . $username . ' unpublished career (' . $career_id . ')';
                    }

                    $insert_user_log = $this->insert_logs($username, $log_type, $log);

                    if($insert_user_log == '1'){
                        return '1';
                    }
                    else{
                        return $insert_user_log;
                    }
                }
                else{
                    return $sql->errorInfo()[2];
                }
            }
        }


    public function get_last_career_order(){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('SELECT MAX(CAREER_ORDER) AS CAREER_ORDER FROM tblcareer');

            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    $row = $sql->fetch();

                    return $this->check_number($row['CAREER_ORDER']);
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }

    public function get_publish_status($stat){
        $response = array();

        switch ($stat) {
            case '1':
                $status = 'PUBLISHED';
                $button_class = 'bg-success';
                break;
            default:
                $status = 'UNPUBLISHED';
                $button_class = 'bg-danger';
        }

        $response[] = array(
            'STATUS' => $status,
            'BADGE' => '<span class="badge '. $button_class .'">'. $status .'</span>'
        );

        return $response;
    }
    public function get_published_careers_by_branch() {
    $careers_by_branch = [];

    if ($this->databaseConnection()) {
        try {
            $sql = $this->db_connection->prepare('
                SELECT
                    c.CAREER_ID,
                    c.POSITION,
                    c.BRANCH,
                    c.AVAILABLE_POSITION,
                    c.SUMMARY,
                    COALESCE(b.BRANCH, "Head Office") as BRANCH_NAME
                FROM tblcareer c
                LEFT JOIN tblbranch b ON c.BRANCH = b.BRANCH_ID
                WHERE c.PUBLISH = 1
                ORDER BY c.CAREER_ORDER ASC, c.POSITION ASC
            ');

            if ($sql->execute()) {
                while ($row = $sql->fetch(PDO::FETCH_ASSOC)) {
                    $branch_name = trim($row['BRANCH_NAME']);

                    // Get designation label from system code
                    $designation_details = $this->get_data_details_one_parameter('designation', $row['POSITION']);
                    $designation_label = $designation_details[0]['DESIGNATION'] ?? $row['POSITION']; // fallback to code

                    if (!isset($careers_by_branch[$branch_name])) {
                        $careers_by_branch[$branch_name] = [];
                    }

                    $careers_by_branch[$branch_name][] = [
                        'CAREER_ID' => $row['CAREER_ID'],
                        'POSITION' => $designation_label, // human-readable
                        'AVAILABLE_POSITION' => (int)$row['AVAILABLE_POSITION'],
                        'SUMMARY' => $row['SUMMARY']
                    ];
                }
            }
        } catch (Exception $e) {
            error_log("Error fetching careers by branch: " . $e->getMessage());
        }
    }

    return $careers_by_branch;
}


/**
 * Get total count of all published positions
 * @return int - Total number of published positions
 */
public function get_total_published_positions() {
    if ($this->databaseConnection()) {
        try {
            $sql = $this->db_connection->prepare('SELECT COUNT(*) as total FROM tblcareer WHERE PUBLISH = 1');
            if($sql->execute()) {
                $result = $sql->fetch(PDO::FETCH_ASSOC);
                return (int)$result['total'];
            }
        } catch (Exception $e) {
            error_log("Error counting published positions: " . $e->getMessage());
        }
    }
    return 0;
}

    public function get_deduction_amount($deduction_id, $employee_id){
        if ($this->databaseConnection()) {
            $employee_profile_details = $this->get_data_details_one_parameter('employee profile', $employee_id);
            $basic_pay = $employee_profile_details[0]['BASIC_PAY'];

            $sql = $this->db_connection->prepare('SELECT START_RANGE, END_RANGE, DEDUCTION_AMOUNT FROM tbldeductionamount WHERE DEDUCTION_TYPE_ID = :deduction_id');
            $sql->bindParam(':deduction_id', $deduction_id);

            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    while($row = $sql->fetch()){
                        $start_range = $row['START_RANGE'];
                        $end_range = $row['END_RANGE'];
                        $deduction_amount = $row['DEDUCTION_AMOUNT'];

                        if($basic_pay >= $start_range && $basic_pay <= $end_range){
                            $deduction = $deduction_amount;
                        }
                    }

                    return $deduction;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_available_entitlement
    # Purpose    : Returns the available entitlement count
    #
    # Returns    : Number
    #
    # -------------------------------------------------------------
    public function get_available_entitlement($employee_id, $leave_date, $leave_type){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('SELECT (NO_LEAVES - ACQUIRED_NO_LEAVES) AS TOTAL FROM tblleaveentitlement WHERE EMPLOYEE_ID = :employee_id AND LEAVE_TYPE = :leave_type AND (START_DATE <= :leave_date AND END_DATE >= :leave_date)');
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':leave_type', $leave_type);
            $sql->bindParam(':leave_date', $leave_date);

            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    $row = $sql->fetch();

                    return $row['TOTAL'];
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_specification_total
    # Purpose    : Returns the payroll spec total
    #
    # Returns    : Number
    #
    # -------------------------------------------------------------
    public function get_specification_total($employee_id, $payroll_start_date, $payroll_end_date, $spec_type){
        if ($this->databaseConnection()) {
            $total = 0;

            $sql = $this->db_connection->prepare('SELECT SPEC_AMOUNT, PAYROLL_DATE, CATEGORY FROM tblpayrollspec WHERE EMPLOYEE_ID = :employee_id AND SPEC_TYPE = :spec_type');
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':spec_type', $spec_type);

            if($sql->execute()){
                while($row = $sql->fetch()){
                    $category = $row['CATEGORY'];
                    $payroll_date = $row['PAYROLL_DATE'];

                    if($spec_type == 'DEDUCTION'){
                        $deduction_type_details = $this->get_data_details_one_parameter('deduction type', $category);
                        $deduction_category = $deduction_type_details[0]['CATEGORY'];

                        if($deduction_category == 'GOVERNMENT'){
                            $spec_amount = $this->get_deduction_amount($category, $employee_id);
                        }
                        else{
                            $spec_amount = $row['SPEC_AMOUNT'];
                        }
                    }
                    else{
                        $spec_amount = $row['SPEC_AMOUNT'];
                    }

                    if (strtotime($payroll_date) >= strtotime($payroll_start_date) && strtotime($payroll_date) <= strtotime($payroll_end_date)){
                        $total = $total + $spec_amount;
                    }
                }

                return $total;
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_payroll_late_total
    # Purpose    : Returns the total late within payroll period
    #
    # Returns    : Number
    #
    # -------------------------------------------------------------
    public function get_payroll_late_total($employee_id, $payroll_start_date, $payroll_end_date){
        if ($this->databaseConnection()) {
            $total = 0;
            $sql = $this->db_connection->prepare('SELECT TIME_IN_DATE, TIME_IN, LATE FROM tblattendancerecord WHERE EMPLOYEE_ID = :employee_id AND TIME_IN_DATE BETWEEN :payroll_start_date AND :payroll_end_date AND LATE > 0');
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':payroll_start_date', $payroll_start_date);
            $sql->bindParam(':payroll_end_date', $payroll_end_date);

            if($sql->execute()){
                while($row = $sql->fetch()){
                    $late = $row['LATE'];
                    $attendance_time_in = $row['TIME_IN'];
                    $attendance_time_in_date = $this->check_date('empty', $row['TIME_IN_DATE'], '', 'Y-m-d', '', '', '');

                    $leave_details = $this->get_data_details_two_parameter('leave date', $employee_id, $time_in_date);

                    if(count($leave_details) > 0){
                        for($i = 0; $i < count($leave_details); $i++){
                            $leave_type = $leave_details[$i]['LEAVE_TYPE'];
                            $leave_start_time = $leave_details[$i]['START_TIME'];
                            $leave_status = $leave_details[$i]['STATUS'];

                            $leave_type_details = $this->get_data_details_one_parameter('leave type', $leave_type);
                            $paid_status = $leave_type_details[0]['PAID_STATUS'];

                            if($leave_status == '1' && $paid_status == 'PAID'){
                                if(strtotime($leave_start_time) < strtotime($attendance_time_in)){
                                    $time_in = strtotime($leave_start_time);

                                    $total = $total + get_attendance_late_total($employee_id, $attendance_time_in_date, $time_in);
                                }
                                else{
                                    $total = $total + $late;
                                }
                            }
                            else{
                                $total = $total + $late;
                            }
                        }
                    }
                    else{
                        $total = $total + $late;
                    }
                }

                return $total;
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_payroll_early_leave_total
    # Purpose    : Returns the total early leave within payroll period
    #
    # Returns    : Number
    #
    # -------------------------------------------------------------
    public function get_payroll_early_leave_total($employee_id, $payroll_start_date, $payroll_end_date){
        if ($this->databaseConnection()) {
            $total = 0;
            $sql = $this->db_connection->prepare('SELECT TIME_IN_DATE, TIME_OUT, EARLY_LEAVING FROM tblattendancerecord WHERE EMPLOYEE_ID = :employee_id AND TIME_IN_DATE BETWEEN :payroll_start_date AND :payroll_end_date AND EARLY_LEAVING > 0');
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':payroll_start_date', $payroll_start_date);
            $sql->bindParam(':payroll_end_date', $payroll_end_date);

            if($sql->execute()){
                while($row = $sql->fetch()){
                    $early_leaving = $row['EARLY_LEAVING'];
                    $attendance_time_out = $row['TIME_OUT'];
                    $attendance_time_in_date = $this->check_date('empty', $row['TIME_IN_DATE'], '', 'Y-m-d', '', '', '');

                    $leave_details = $this->get_data_details_two_parameter('leave date', $employee_id, $time_in_date);

                    if(count($leave_details) > 0){
                        for($i = 0; $i < count($leave_details); $i++){
                            $leave_type = $leave_details[$i]['LEAVE_TYPE'];
                            $leave_end_time = $leave_details[$i]['END_TIME'];
                            $leave_status = $leave_details[$i]['STATUS'];

                            $leave_type_details = $this->get_data_details_one_parameter('leave type', $leave_type);
                            $paid_status = $leave_type_details[0]['PAID_STATUS'];

                            if($leave_status == '1' && $paid_status == 'PAID'){
                                if(strtotime($leave_end_time) > strtotime($attendance_time_out)){
                                    $time_out = strtotime($leave_end_time);

                                    $total = $total + get_attendance_early_leaving_total($employee_id, $attendance_time_in_date, $time_out);
                                }
                                else{
                                    $total = $total + $early_leaving;
                                }
                            }
                            else{
                                $total = $total + $early_leaving;
                            }
                        }
                    }
                    else{
                        $total = $total + $early_leaving;
                    }
                }

                return $total;
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_payroll_unpaid_leave_total
    # Purpose    : Returns the total unpaid leave within payroll period
    #
    # Returns    : Number
    #
    # -------------------------------------------------------------
    public function get_payroll_unpaid_leave_total($employee_id, $payroll_start_date, $payroll_end_date){
        if ($this->databaseConnection()) {
            $total = 0;

            $sql = $this->db_connection->prepare("SELECT LEAVE_TYPE, LEAVE_DATE, START_TIME, END_TIME FROM tblleave WHERE EMPLOYEE_ID = :employee_id AND STATUS = '1' AND LEAVE_TYPE IN (SELECT LEAVE_TYPE_ID FROM tblleavetype WHERE PAID_STATUS = 'UNPAID') AND LEAVE_DATE BETWEEN :payroll_start_date AND :payroll_end_date");
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':payroll_start_date', $payroll_start_date);
            $sql->bindParam(':payroll_end_date', $payroll_end_date);

            if($sql->execute()){
                while($row = $sql->fetch()){
                    $leave_day = $this->check_date('empty', $row['LEAVE_DATE'], '', 'N', '', '', '');
                    $office_shift_details = $this->get_data_details_two_parameter('office shift', $employee_id, $leave_day);
                    $office_shift_day_off = strtotime($office_shift_details[0]['DAY_OFF']);
                    $office_shift_time_in = strtotime($office_shift_details[0]['TIME_IN']);
                    $office_shift_time_out = strtotime($office_shift_details[0]['TIME_OUT']);
                    $office_shift_start_lunch_break = strtotime($office_shift_details[0]['START_LUNCH_BREAK']);
                    $office_shift_end_lunch_break = strtotime($office_shift_details[0]['END_LUNCH_BREAK']);

                    if($office_shift_day_off == 0){
                        $leave_date = $this->check_date('empty', $row['LEAVE_DATE'], '', 'Y-m-d', '', '', '');
                        $leave_start_time = strtotime($row['START_TIME']);
                        $leave_end_time = strtotime($row['END_TIME']);

                        if($leave_start_time >= $office_shift_end_lunch_break){
                            if($leave_start_time >= $office_shift_time_in){
                                $start_time = $leave_start_time - $office_shift_end_lunch_break;
                            }
                            else{
                                $start_time = $office_shift_time_in - $office_shift_end_lunch_break;
                            }
                        }
                        else{
                            if($leave_start_time >= $office_shift_time_in){
                                $start_time = $leave_start_time - $office_shift_start_lunch_break;
                            }
                            else{
                                $start_time = $office_shift_time_in - $office_shift_start_lunch_break;
                            }
                        }

                        if($leave_end_time <= $office_shift_start_lunch_break){
                            $end_time = $leave_end_time - $office_shift_start_lunch_break;
                        }
                        else{
                            $end_time = $leave_end_time - $office_shift_end_lunch_break;
                        }

                        $get_overlap_attendance_record = $this->get_overlap_attendance_record($employee_id, $leave_date);

                        $total = ((abs(abs($start_time - $end_time) - $get_overlap_attendance_record) / 3600));
                    }
                    else{
                        $total = $total + 0;
                    }
                }

                return $total;
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_payroll_total_overtime
    # Purpose    : Returns the total overtime
    #
    # Returns    : Number
    #
    # -------------------------------------------------------------
    public function get_payroll_total_overtime($employee_id, $payroll_start_date, $payroll_end_date){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare("SELECT SUM(OVERTIME) AS OVERTIME FROM tblattendancerecord WHERE EMPLOYEE_ID = :employee_id AND TIME_IN_DATE BETWEEN :payroll_start_date AND :payroll_end_date");
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':payroll_start_date', $payroll_start_date);
            $sql->bindParam(':payroll_end_date', $payroll_end_date);

            if($sql->execute()){
                $row = $sql->fetch();

                return $row['OVERTIME'];
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_payroll_total_hours_worked
    # Purpose    : Returns the total hours worked
    #
    # Returns    : Number
    #
    # -------------------------------------------------------------
    public function get_payroll_total_hours_worked($employee_id, $payroll_start_date, $payroll_end_date){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare("SELECT SUM(TOTAL_HOURS) AS TOTAL_HOURS FROM tblattendancerecord WHERE EMPLOYEE_ID = :employee_id AND TIME_IN_DATE BETWEEN :payroll_start_date AND :payroll_end_date");
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':payroll_start_date', $payroll_start_date);
            $sql->bindParam(':payroll_end_date', $payroll_end_date);

            if($sql->execute()){
                $row = $sql->fetch();

                return $row['TOTAL_HOURS'];
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_payroll_total_specification
    # Purpose    : Returns the total payroll specification
    #
    # Returns    : Number
    #
    # -------------------------------------------------------------
    public function get_payroll_total_specification($spec_type, $employee_id, $payroll_start_date, $payroll_end_date){
        if ($this->databaseConnection()) {
            $total = 0;

            $sql = $this->db_connection->prepare("SELECT SPEC_AMOUNT, CATEGORY FROM tblpayrollspec WHERE EMPLOYEE_ID = :employee_id AND SPEC_TYPE = :spec_type AND PAYROLL_DATE BETWEEN :payroll_start_date AND :payroll_end_date AND (PAYROLL_ID = 0 OR PAYROLL_ID IS NULL)");
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':spec_type', $spec_type);
            $sql->bindParam(':payroll_start_date', $payroll_start_date);
            $sql->bindParam(':payroll_end_date', $payroll_end_date);

            if($sql->execute()){
                while($row = $sql->fetch()){
                    $spec_amount = $row['SPEC_AMOUNT'];
                    $category = $row['CATEGORY'];

                    if($spec_type == 'DEDUCTION'){
                        $deduction_type_details = $this->get_data_details_one_parameter('deduction type', $category);
                        $deduction_category = $deduction_type_details[0]['CATEGORY'];

                        if($deduction_category == 'GOVERNMENT'){
                            $spec_amount = $this->get_deduction_amount($category, $employee_id);
                        }
                    }

                    $total = $total + $spec_amount;
                }

                return $total;
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_attendance_late_total
    # Purpose    : Returns the total late minutes
    #
    # Returns    : Number
    #
    # -------------------------------------------------------------
    public function get_attendance_late_total($employee_id, $time_in_date, $time_in){
        if ($this->databaseConnection()) {
            $time_in_day = date('N', strtotime($time_in_date));
            $time_in = strtotime($time_in);

            $office_shift_details = $this->get_data_details_two_parameter('office shift', $employee_id, $time_in_day);
            $office_shift_time_in = strtotime($office_shift_details[0]['TIME_IN']);
            $start_lunch_break = strtotime($office_shift_details[0]['START_LUNCH_BREAK']);
            $end_lunch_break = strtotime($office_shift_details[0]['END_LUNCH_BREAK']);

            if($time_in >= $end_lunch_break){
                $late = floor((($time_in - $end_lunch_break) / 3600) * 60);
            }
            else{
                $late = floor((($time_in - $office_shift_time_in) / 3600) * 60);
            }

            if($late <= 0){
                $late = 0;
            }

            if($late > 30){
                $late = floor((($start_lunch_break - $office_shift_time_in) / 3600) * 60);
            }

            return $late;
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_attendance_total_hours
    # Purpose    : Returns the total hours worked
    #
    # Returns    : Number
    #
    # -------------------------------------------------------------
    public function get_attendance_total_hours($employee_id, $attendance_time_in_date, $attendance_time_in, $attendance_time_out_date, $attendance_time_out){
        if ($this->databaseConnection()) {
            $total_hours = 0;
            $time_in_day = date('N', strtotime($attendance_time_in_date));

            $late = $this->get_attendance_late_total($employee_id, $attendance_time_in_date, $attendance_time_in);
            $early_leaving = $this->get_attendance_early_leaving_total($employee_id, $attendance_time_out_date, $attendance_time_out);

            $office_shift_details = $this->get_data_details_two_parameter('office shift', $employee_id, $time_in_day);
            $office_shift_time_in = strtotime($attendance_time_in_date . ' ' . $office_shift_details[0]['TIME_IN']);
            $office_shift_time_out = strtotime($attendance_time_in_date . ' ' . $office_shift_details[0]['TIME_OUT']);
            $office_shift_start_lunch_break = strtotime($attendance_time_in_date . ' ' . $office_shift_details[0]['START_LUNCH_BREAK']);
            $office_shift_end_lunch_break = strtotime($attendance_time_in_date . ' ' . $office_shift_details[0]['END_LUNCH_BREAK']);

            $time_in = abs($office_shift_time_in - $office_shift_start_lunch_break);
            $time_out = abs($office_shift_time_out - $office_shift_end_lunch_break);

            $total_hours = (((abs($time_in + $time_out) / 3600) * 60) - ($late + $early_leaving)) / 60;

            if($total_hours <= 0){
                $total_hours = 0;
            }

            return $total_hours;
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_attendance_early_leaving_total
    # Purpose    : Returns the total early leaving minutes
    #
    # Returns    : Number
    #
    # -------------------------------------------------------------
    public function get_attendance_early_leaving_total($employee_id, $attendance_time_out_date, $attendance_time_out){
        if ($this->databaseConnection()) {
            $time_in_day = date('N', strtotime($attendance_time_out_date));
            $attendance_time_out = strtotime($attendance_time_out);

            $company_details = $this->get_data_details_one_parameter('company', 1);
            $end_lunch_break = strtotime($company_details[0]['END_LUNCH_BREAK']);

            $office_shift_details = $this->get_data_details_two_parameter('office shift', $employee_id, $time_in_day);
            $office_shift_time_out = strtotime($office_shift_details[0]['TIME_OUT']);

            $early_leaving = floor((($office_shift_time_out - $attendance_time_out) / 3600) * 60);

            if($early_leaving <= 0){
                $early_leaving = 0;
            }

            if($early_leaving > 30){
                $early_leaving = floor((($office_shift_time_out - $end_lunch_break) / 3600) * 60);
            }

            return $early_leaving;
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_attendance_overtime_total
    # Purpose    : Returns the total overtime minutes
    #
    # Returns    : Number
    #
    # -------------------------------------------------------------
    public function get_attendance_overtime_total($employee_id, $attendance_time_in_date, $attendance_time_out_date, $attendance_time_out){
        if ($this->databaseConnection()) {
            $time_in_day = date('N', strtotime($attendance_time_out_date));
            $attendance_time_out = strtotime($attendance_time_out_date . ' ' . $attendance_time_out);

            $office_shift_details = $this->get_data_details_two_parameter('office shift', $employee_id, $time_in_day);
            $office_shift_time_out = strtotime($attendance_time_in_date . ' ' . $office_shift_details[0]['TIME_OUT']);

            $over_time = floor((($attendance_time_out - $office_shift_time_out) / 3600));

            if($over_time <= 0){
                $over_time = 0;
            }

            return floor($over_time);
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_next_date
    # Purpose    : Returns the calculated date
    #              based on the frequency
    #
    # Returns    : Date
    #
    # -------------------------------------------------------------
    public function get_next_date($prevdate, $maturitydate, $frequency){
        $matdteom = $this->check_end_of_month($maturitydate);
        $maturityday = date('d', strtotime($maturitydate));

        if($frequency == 'SEMIMONTHLY'){
            $prevday = date('d', strtotime($prevdate));
            $prevmonth = date('m', strtotime($prevdate));
            $prevyear = date('Y', strtotime($prevdate));
            $prevlastday = date('t', strtotime($prevdate));
            $maturitylastday = date('t', strtotime($maturitydate));
            $isendofmonth = $this->check_end_of_month($maturitydate);

            if($maturityday == $maturitylastday || $maturityday == 15){
                if($prevday == 15){
                    $duedate = date('m/t/Y', strtotime($prevdate));
                }
                else{
                    $prevdateaddmonth = date('m/d/Y', strtotime('+1 day', strtotime($prevdate)));
                    $duedate = date('m', strtotime($prevdateaddmonth)) . '/15/' . date('Y', strtotime($prevdateaddmonth));
                }
            }
            else{
                if($prevday < 15){
                    if($prevmonth == '2' && $prevday == '14'){
                        $duedate = date('m/t/Y', strtotime($prevdate));
                    }
                    else{
                        $duedate = $prevmonth . '/' . ($prevday + 15) . '/' . $prevyear;
                    }
                }
                else if($prevday > 15){
                    if($maturityday < 15){
                        $prevdate = date('m/d/Y', strtotime('+1 month', strtotime($prevdate)));
                        $duedate = date('m', strtotime($prevdate)) . '/' . $maturityday . '/' . date('Y', strtotime($prevdate));
                    }
                    else{
                        $prevdate = date('m/d/Y', strtotime('+1 month', strtotime($prevdate)));
                        $duedate = date('m', strtotime($prevdate)) . '/' . ($maturityday - 15) . '/' . date('Y', strtotime($prevdate));
                    }
                }
            }

            $flag = '0';
        }
        else if($frequency == 'MONTHLY'){
            $prevdate = $this->get_calculated_date($prevdate, 1);
            $prevlastday = date('t', strtotime($prevdate));

            if($prevlastday < $maturityday){
                $duedate = $prevdate;
            }
            else{
                $duedate = date('m', strtotime($prevdate)) . '/'. date('d', strtotime($maturitydate)) .'/' . date('Y', strtotime($prevdate));
            }

            $flag = '1';
        }
        else{
            $prevdate = $this->get_calculated_date($prevdate, 12);
            $prevlastday = date('t', strtotime($prevdate));

            if($prevlastday < $maturityday){
                $duedate = $prevdate;
            }
            else{
                $duedate = date('m', strtotime($prevdate)) . '/'. date('d', strtotime($maturitydate)) .'/' . date('Y', strtotime($prevdate));
            }

            $flag = '1';
        }

        if($matdteom == '1' && $flag == '1'){
            $duedate = date('m/t/Y', strtotime($duedate));
        }

        return $duedate;
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_calculated_date
    # Purpose    : Returns the calculated date based
    #              on months added to the start date ($d1)
    #
    # Returns    : Date
    #
    # -------------------------------------------------------------
    public function get_calculated_date($d1, $months){
        $date = new DateTime($d1);

        # call add_months function to add the months
        $newDate = $date->add($this->add_months($months, $date));

        #formats final date to m/d/Y form
        $dateReturned = $newDate->format('m/d/Y');

        return $dateReturned;
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_clock_in_total
    # Purpose    : Gets the total clock-in by date
    #
    # Returns    : Number
    #
    # -------------------------------------------------------------
    public function get_clock_in_total($employee_id, $system_date){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('SELECT COUNT(ATTENDANCE_ID) AS TOTAL FROM tblattendancerecord WHERE EMPLOYEE_ID = :employee_id AND TIME_IN_DATE = :system_date AND TIME_OUT_DATE IS NOT NULL AND TIME_OUT IS NOT NULL');
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':system_date', $system_date);

            if($sql->execute()){
                $row = $sql->fetch();

                return $row['TOTAL'];
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_health_declaration_count
    # Purpose    : Gets the total health declaration by date
    #
    # Returns    : Number
    #
    # -------------------------------------------------------------
    public function get_health_declaration_count($employee_id, $system_date){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('SELECT COUNT(DECLARATION_ID) AS TOTAL FROM tblhealthdeclaration WHERE EMPLOYEE_ID = :employee_id AND SUBMIT_DATE = :system_date');
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':system_date', $system_date);

            if($sql->execute()){
                $row = $sql->fetch();

                return $row['TOTAL'];
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_last_attendance_record
    # Purpose    : Gets the last attendance record
    #
    # Returns    : Number
    #
    # -------------------------------------------------------------
    public function get_last_attendance_record($employee_id){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('SELECT TIME_IN_DATE FROM tblattendancerecord WHERE EMPLOYEE_ID = :employee_id AND (TIME_IN_DATE IS NOT NULL AND TIME_IN IS NOT NULL AND TIME_OUT_DATE IS NOT NULL AND TIME_OUT IS NOT NULL) ORDER BY TIME_IN_DATE DESC LIMIT 1');
            $sql->bindParam(':employee_id', $employee_id);

            if($sql->execute()){
                $row = $sql->fetch();

                return $row['TIME_IN_DATE'] ?? null;
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_last_payroll_period
    # Purpose    : Returns last payroll period
    #
    # Returns    : Array
    #
    # -------------------------------------------------------------
    public function get_last_payroll_period($payroll_date){
        if ($this->databaseConnection()) {
            $response = array();

            $sql = $this->db_connection->prepare('SELECT PAYROLL_START_DATE, PAYROLL_END_DATE FROM tblpayroll WHERE PAYROLL_START_DATE < :payroll_date ORDER BY PAYROLL_START_DATE DESC LIMIT 1');
            $sql->bindParam(':payroll_date', $payroll_date);

            if($sql->execute()){
                $row = $sql->fetch();

                $response[] = array(
                    'PAYROLL_START_DATE' => $row['PAYROLL_START_DATE'] ?? null,
                    'PAYROLL_END_DATE' => $row['PAYROLL_END_DATE'] ?? null
                );

                return $response;
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_overlap_attendance_record
    # Purpose    : Returns attendance data that overlaps with the leave
    #
    # Returns    : Number
    #
    # -------------------------------------------------------------
    public function get_overlap_attendance_record($employee_id, $leave_date){
        if ($this->databaseConnection()) {

            $sql = $this->db_connection->prepare('SELECT TOTAL_HOURS FROM tblattendancerecord WHERE TIME_IN_DATE = :leave_date');
            $sql->bindParam(':leave_date', $leave_date);

            if($sql->execute()){
                $row = $sql->fetch();

                return $row['TOTAL_HOURS'];
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_withholding_tax
    # Purpose    : Returns the total withholding tax
    #
    # Returns    : Number
    #
    # -------------------------------------------------------------
    public function get_withholding_tax($employee_id, $payroll_start_date, $payroll_end_date){
        if ($this->databaseConnection()) {
            $employee_profile_details = $this->get_data_details_one_parameter('employee profile', $employee_id);
            $payroll_period = $employee_profile_details[0]['PAYROLL_PERIOD'];
            $basic_pay = $employee_profile_details[0]['BASIC_PAY'];
            $taxable_allowance = $this->get_taxable_payroll_specification('ALLOWANCE', $employee_id, $payroll_start_date, $payroll_end_date);
            $taxable_other_income = $this->get_taxable_payroll_specification('OTHERINCOME', $employee_id, $payroll_start_date, $payroll_end_date);

            if($payroll_period == 'SEMIMONTHLY'){
                $total_taxable = ($basic_pay / 2) + $taxable_allowance + $taxable_other_income;

                if($total_taxable <= 10416){
                    $withholding_tax = 0;
                }
                else if($total_taxable >= 10417 && $total_taxable <= 16666){
                    $withholding_tax = ($total_taxable - 10417) * 0.2;
                }
                else if($total_taxable >= 16667 && $total_taxable <= 33332){
                    $withholding_tax = 1250 + (($total_taxable - 16667) * 0.25);
                }
                else if($total_taxable >= 33333 && $total_taxable <= 83332){
                    $withholding_tax = 5416.67 + (($total_taxable - 33333) * 0.3);
                }
                else if($total_taxable >= 83333 && $total_taxable <= 333332){
                    $withholding_tax = 20416.67 + (($total_taxable - 83333) * 0.32);
                }
                else{
                    $withholding_tax = 100416.67 + (($total_taxable - 333333) * 0.35);
                }
            }
            else{
                $total_taxable = $basic_pay + $taxable_allowance + $taxable_other_income;

                if($total_taxable <= 20832){
                    $withholding_tax = 0;
                }
                else if($total_taxable >= 20833 && $total_taxable <= 33332){
                    $withholding_tax = ($total_taxable - 20833) * 0.2;
                }
                else if($total_taxable >= 33333 && $total_taxable <= 66666){
                    $withholding_tax = 2500 + (($total_taxable - 33333) * 0.25);
                }
                else if($total_taxable >= 66667 && $total_taxable <= 166666){
                    $withholding_tax = 10833.33 + (($total_taxable - 66667) * 0.3);
                }
                else if($total_taxable >= 166667 && $total_taxable <= 666666){
                    $withholding_tax = 40833.33  + (($total_taxable - 166667) * 0.32);
                }
                else{
                    $withholding_tax = 200833.33 + (($total_taxable - 666667) * 0.35);
                }
            }

            return number_format($withholding_tax, 4);
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_taxable_payroll_specification
    # Purpose    : Returns the total taxable payroll specification
    #
    # Returns    : Number
    #
    # -------------------------------------------------------------
    public function get_taxable_payroll_specification($spec_type, $employee_id, $payroll_start_date, $payroll_end_date){
        if ($this->databaseConnection()) {
            $total = 0;

            $sql = $this->db_connection->prepare("SELECT SPEC_AMOUNT, CATEGORY FROM tblpayrollspec WHERE EMPLOYEE_ID = :employee_id AND SPEC_TYPE = :spec_type AND PAYROLL_DATE BETWEEN :payroll_start_date AND :payroll_end_date AND PAYROLL_ID = 0");
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':spec_type', $spec_type);
            $sql->bindParam(':payroll_start_date', $payroll_start_date);
            $sql->bindParam(':payroll_end_date', $payroll_end_date);

            if($sql->execute()){
                while($row = $sql->fetch()){
                    $spec_amount = $row['SPEC_AMOUNT'];
                    $category = $row['CATEGORY'];

                    if($spec_type == 'ALLOWANCE'){
                        $allowance_type_details = $this->get_data_details_one_parameter('allowance type', $category);
                        $tax_type = $allowance_type_details[0]['TAX_TYPE'];
                    }
                    else{
                        $other_income_type_details = $this->get_data_details_one_parameter('other income type', $category);
                        $tax_type = $other_income_type_details[0]['TAX_TYPE'];
                    }

                    if($tax_type == 'TAXABLE'){
                        $total = $total + $spec_amount;
                    }
                    else{
                        $total = $total + 0;
                    }
                }

                return $total;
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_assigned_payroll_group_employee_count
    # Purpose    : Returns assigned employee count to payroll group
    #
    # Returns    : Number
    #
    # -------------------------------------------------------------
    public function get_assigned_payroll_group_employee_count(){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare("SELECT COUNT(EMPLOYEE_ID) AS TOTAL FROM tblemployeeprofile WHERE EMPLOYMENT_STATUS = '1' AND EMPLOYEE_ID NOT LIKE 'USER-%' AND EMPLOYEE_ID NOT IN (SELECT EMPLOYEE_ID FROM tblpayrollgroupemployee)");

            if($sql->execute()){
                $row = $sql->fetch();

                return $row['TOTAL'];
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_working_days
    # Purpose    : Returns working days
    #
    # Returns    : Number
    #
    # -------------------------------------------------------------
    public function get_working_days($employee_id, $parameter_1, $parameter_2){
        if ($this->databaseConnection()) {
            $working_days = 0;
            $start_date = strtotime($parameter_1);
            $end_date = strtotime($parameter_2);

            for ($i = $start_date; $i <= $end_date; $i = $i + (60 * 60 * 24)) {
                $day = $this->check_week_day(date('w', $i));

                $day_off = $this->check_if_day_off($employee_id, $day);

                if($day_off == 0){
                    $working_days = $working_days + 1;
                }
            }

            return $working_days;
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_days_worked
    # Purpose    : Returns days worked
    #
    # Returns    : Number
    #
    # -------------------------------------------------------------
    public function get_days_worked($employee_id, $parameter_1, $parameter_2){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare("SELECT COUNT(DISTINCT(TIME_IN_DATE)) AS TOTAL FROM tblattendancerecord WHERE EMPLOYEE_ID = :employee_id AND TIME_IN_DATE BETWEEN :parameter_1 AND :parameter_2");
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':parameter_1', $parameter_1);
            $sql->bindParam(':parameter_2', $parameter_2);

            if($sql->execute()){
                $row = $sql->fetch();

                return $row['TOTAL'];
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_total_late
    # Purpose    : Returns total late number
    #
    # Returns    : Number
    #
    # -------------------------------------------------------------
    public function get_total_late($employee_id, $parameter_1, $parameter_2){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare("SELECT COUNT(DISTINCT(TIME_IN_DATE)) AS TOTAL FROM tblattendancerecord WHERE EMPLOYEE_ID = :employee_id AND LATE > 0 AND TIME_IN_DATE BETWEEN :parameter_1 AND :parameter_2");
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':parameter_1', $parameter_1);
            $sql->bindParam(':parameter_2', $parameter_2);

            if($sql->execute()){
                $row = $sql->fetch();

                return $row['TOTAL'];
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_total_late_minutes
    # Purpose    : Returns late minutes
    #
    # Returns    : Number
    #
    # -------------------------------------------------------------
    public function get_total_late_minutes($employee_id, $parameter_1, $parameter_2){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare("SELECT SUM(LATE) AS TOTAL FROM tblattendancerecord WHERE EMPLOYEE_ID = :employee_id AND TIME_IN_DATE BETWEEN :parameter_1 AND :parameter_2");
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':parameter_1', $parameter_1);
            $sql->bindParam(':parameter_2', $parameter_2);

            if($sql->execute()){
                $row = $sql->fetch();

                return $row['TOTAL'];
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_total_early_leaving
    # Purpose    : Returns total early leaving number
    #
    # Returns    : Number
    #
    # -------------------------------------------------------------
    public function get_total_early_leaving($employee_id, $parameter_1, $parameter_2){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare("SELECT COUNT(DISTINCT(TIME_IN_DATE)) AS TOTAL FROM tblattendancerecord WHERE EMPLOYEE_ID = :employee_id AND EARLY_LEAVING > 0 AND TIME_IN_DATE BETWEEN :parameter_1 AND :parameter_2");
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':parameter_1', $parameter_1);
            $sql->bindParam(':parameter_2', $parameter_2);

            if($sql->execute()){
                $row = $sql->fetch();

                return $row['TOTAL'];
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_total_early_leaving_minutes
    # Purpose    : Returns early leaving minutes
    #
    # Returns    : Number
    #
    # -------------------------------------------------------------
    public function get_total_early_leaving_minutes($employee_id, $parameter_1, $parameter_2){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare("SELECT SUM(EARLY_LEAVING) AS TOTAL FROM tblattendancerecord WHERE EMPLOYEE_ID = :employee_id AND TIME_IN_DATE BETWEEN :parameter_1 AND :parameter_2");
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':parameter_1', $parameter_1);
            $sql->bindParam(':parameter_2', $parameter_2);

            if($sql->execute()){
                $row = $sql->fetch();

                return $row['TOTAL'];
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_total_attendance_adjustments
    # Purpose    : Returns total attendance adjustments
    #
    # Returns    : Number
    #
    # -------------------------------------------------------------
    public function get_total_attendance_adjustments($employee_id, $parameter_1, $parameter_2){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare("SELECT COUNT(ADJUSTMENT_ID) AS TOTAL FROM tblattendanceadustment WHERE EMPLOYEE_ID = :employee_id AND TIME_IN_DATE BETWEEN :parameter_1 AND :parameter_2 AND STATUS = '1'");
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':parameter_1', $parameter_1);
            $sql->bindParam(':parameter_2', $parameter_2);

            if($sql->execute()){
                $row = $sql->fetch();

                return $row['TOTAL'];
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }


   public function get_total_overtime_minutes($employee_id, $parameter_1, $parameter_2) {
    if ($this->databaseConnection()) {
        $sql = $this->db_connection->prepare("
            SELECT START_TIME, END_TIME, HOLIDAY_TYPE
            FROM tblovertime
            WHERE EMPLOYEE_ID = :employee_id
              AND OVERTIME_DATE BETWEEN :parameter_1 AND :parameter_2
              AND STATUS = 2
        ");

        $sql->bindParam(':employee_id', $employee_id);
        $sql->bindParam(':parameter_1', $parameter_1);
        $sql->bindParam(':parameter_2', $parameter_2);

        if ($sql->execute()) {
            $overtime_by_type = [];

            while ($row = $sql->fetch()) {
                $start = new DateTime($row['START_TIME']);
                $end = new DateTime($row['END_TIME']);

                // Calculate minutes
                $interval = $end->diff($start);
                $minutes = ($interval->h * 60) + $interval->i + ($interval->days * 24 * 60);

                // Group by HOLIDAY_TYPE
                $holiday_type = $row['HOLIDAY_TYPE'] ?? 'UNKNOWN';

                if (!isset($overtime_by_type[$holiday_type])) {
                    $overtime_by_type[$holiday_type] = 0;
                }

                $overtime_by_type[$holiday_type] += $minutes;
            }

            return $overtime_by_type;
        } else {
            return $sql->errorInfo()[2]; // error string
        }
    }
}


    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_leave_total
    # Purpose    : Returns total leave
    #
    # Returns    : Number
    #
    # -------------------------------------------------------------
    public function get_leave_total($employee_id, $parameter_1, $parameter_2, $type, $status){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare("SELECT COUNT(LEAVE_ID) AS TOTAL FROM tblleave WHERE EMPLOYEE_ID = :employee_id AND LEAVE_DATE BETWEEN :parameter_1 AND :parameter_2 AND LEAVE_TYPE = :type AND STATUS = :status");
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':parameter_1', $parameter_1);
            $sql->bindParam(':parameter_2', $parameter_2);
            $sql->bindParam(':type', $type);
            $sql->bindParam(':status', $status);

            if($sql->execute()){
                $row = $sql->fetch();

                return $row['TOTAL'];
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }


    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_latest_payroll_period
    # Purpose    : Returns latest payroll period
    #
    # Returns    : Array
    #
    # -------------------------------------------------------------
    public function get_latest_payroll_period(){
        if ($this->databaseConnection()) {
            $response = array();

            $sql = $this->db_connection->prepare("SELECT PAYROLL_START_DATE, PAYROLL_END_DATE FROM tblpayroll GROUP BY PAYROLL_START_DATE ORDER BY PAYROLL_START_DATE DESC LIMIT 1");

            if($sql->execute()){
                $row = $sql->fetch();

                $response[] = array(
                    'PAYROLL_START_DATE' => $row['PAYROLL_START_DATE'] ?? null,
                    'PAYROLL_END_DATE' => $row['PAYROLL_END_DATE'] ?? null
                );

                return $response;
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_stw_voting_date
    # Purpose    : Returns end voting date for STW
    #
    # Returns    : Array
    #
    # -------------------------------------------------------------
    public function get_stw_voting_date($current_date, $working_days){
        if ($this->databaseConnection()) {
            $next_month = $this->check_date('empty', $current_date, '', 'Y-m-01', '+1 month', '', '');
            $i = 0;
            $bin_value = '';

            $company_details = $this->get_data_details_one_parameter('company', '1');
            $company_working_days = decbin($company_details[0]['WORKING_DAYS']);

            if(strlen($company_working_days) == 6){
                $bin_value = '0' . $company_working_days;
            }
            if(strlen($company_working_days) == 5){
                $bin_value = '00' . $company_working_days;
            }
            else if(strlen($company_working_days) == 4){
                $bin_value = '000' . $company_working_days;
            }
            else if(strlen($company_working_days) == 3){
                $bin_value = '0000' . $company_working_days;
            }
            else if(strlen($company_working_days) == 2){
                $bin_value = '00000' . $company_working_days;
            }
            else if(strlen($company_working_days) == 1){
                $bin_value = '000000' . $company_working_days;
            }

            while($i < $working_days){
                $check_if_holiday = $this->check_if_holiday($next_month);
                $day = $this->check_date('empty', $next_month, '', 'N', '', '', '');

                if((($day == 1 && $bin_value[6] == '1') || ($day == 2 && $bin_value[5] == '1') || ($day == 3 && $bin_value[4] == '1') || ($day == 4 && $bin_value[3] == '1') || ($day == 5 && $bin_value[2] == '1') || ($day == 6 && $bin_value[1] == '1') || ($day == 7 && $bin_value[0] == '1')) && $check_if_holiday == 0){
                    $i++;
                }

                if($i < $working_days){
                    $next_month = $this->check_date('empty', $next_month, '', 'Y-m-d', '+1 day', '', '');
                }
            }

            return $next_month;
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_file_size_unit
    # Purpose    : Returns file size unit
    #
    # Returns    : Array
    #
    # -------------------------------------------------------------
    public function get_file_size_unit($path){
        $file_size = filesize($path);

        $units = array( 'B', 'Kb', 'Mb', 'Gb', 'Tb', 'Pb', 'Eb', 'Zb', 'Yb');
        $power = $file_size > 0 ? floor(log($file_size, 1024)) : 0;
        return number_format($file_size / pow(1024, $power), 2, '.', ',') . ' ' . $units[$power];
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_transmittal_count
    # Purpose    : Returns total transmittal
    #
    # Returns    : Number
    #
    # -------------------------------------------------------------
    public function get_transmittal_count($type, $username){
        if ($this->databaseConnection()) {
            $employee_details = $this->get_data_details_one_parameter('employee profile', $username);
            $employee_id = $employee_details[0]['EMPLOYEE_ID'];
            $employee_department = $employee_details[0]['DEPARTMENT'];

            if($type == 'all incoming/outgoing'){
                $sql = $this->db_connection->prepare("SELECT COUNT(TRANSMITTAL_ID) AS TOTAL FROM tbltransmittal WHERE (CURRENT_EMPLOYEE = :employee_id OR CURRENT_DEPARTMENT = :employee_department OR TRANSMITTED_EMPLOYEE = :employee_id OR TRANSMITTED_DEPARTMENT = :employee_department) AND STATUS IN ('0', '2')");
                $sql->bindParam(':employee_id', $employee_id);
                $sql->bindParam(':employee_department', $employee_department);
            }
            else if($type == 'incoming'){
                $sql = $this->db_connection->prepare("SELECT COUNT(TRANSMITTAL_ID) AS TOTAL FROM tbltransmittal WHERE (TRANSMITTED_EMPLOYEE = :employee_id OR TRANSMITTED_DEPARTMENT = :employee_department) AND STATUS IN ('0', '2')");
                $sql->bindParam(':employee_id', $employee_id);
                $sql->bindParam(':employee_department', $employee_department);
            }
            else if($type == 'outgoing'){
                $sql = $this->db_connection->prepare("SELECT COUNT(TRANSMITTAL_ID) AS TOTAL FROM tbltransmittal WHERE (CURRENT_EMPLOYEE = :employee_id OR CURRENT_DEPARTMENT = :employee_department) AND STATUS IN ('0', '2')");
                $sql->bindParam(':employee_id', $employee_id);
                $sql->bindParam(':employee_department', $employee_department);
            }

            if($sql->execute()){
                $row = $sql->fetch();

                return $row['TOTAL'];
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_unread_notifications_count
    # Purpose    : Returns total unread notifications
    #
    # Returns    : Number
    #
    # -------------------------------------------------------------
    public function get_unread_notifications_count($employee_id){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare("SELECT COUNT(NOTIFICATION_ID) AS TOTAL FROM tblnotifications WHERE NOTIFICATION_TO = :employee_id AND STATUS = '0'");
            $sql->bindParam(':employee_id', $employee_id);

            if($sql->execute()){
                $row = $sql->fetch();

                return $row['TOTAL'];
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_column_size
    # Purpose    : Gets the column size
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function get_column_size($items_per_row, $total_items){
        switch ($items_per_row) {
            case 6:
                for ($a = 0; $a < $items_per_row; $a++) $response[] = "col-lg-6 col-md-2";
                break;
            case 4:
                for ($a = 0; $a < $items_per_row; $a++) $response[] = "col-lg-6 col-md-3";
                break;
            case 3:
                for ($a = 0; $a < $items_per_row; $a++) $response[] = "col-lg-6 col-md-4";
                break;
            case 2:
                for ($a = 0; $a < $items_per_row; $a++) $response[] = "col-md-6";
                break;
            default:
                for ($a = 0; $a < $items_per_row; $a++) $response[] = "col-md-12";
                break;
        }

        $total_items = $total_items - $items_per_row;

        while($total_items > 0){
            switch (abs($total_items)) {
                case 6:
                    for ($a = 0; $a < abs($total_items); $a++) $response[] = "col-lg-6 col-md-2";
                    break;
                case 4:
                    for ($a = 0; $a < abs($total_items); $a++) $response[] = "col-lg-6 col-md-3";
                    break;
                case 3:
                    for ($a = 0; $a < abs($total_items); $a++) $response[] = "col-lg-6 col-md-4";
                    break;
                case 2:
                    for ($a = 0; $a < abs($total_items); $a++) $response[] = "col-md-6";
                    break;
                default:
                    for ($a = 0; $a < abs($total_items); $a++) $response[] = "col-md-12";
                    break;
            }

            $total_items = $total_items - $items_per_row;
        }

        return $response;
    }
    # -------------------------------------------------------------

     # -------------------------------------------------------------
    #
    # Name       : get_meeting_status
    # Purpose    : Returns the status, badge
    #
    # Returns    : Array
    #
    # -------------------------------------------------------------
    public function get_meeting_status($stat){
        $response = array();

        switch ($stat) {
            case '0':
                $status = 'Pending';
                $button_class = 'bg-primary';
                break;
            case '2':
                $status = 'Submitted';
                $button_class = 'bg-info';
                break;
            default:
                $status = 'Approved';
                $button_class = 'bg-success';
        }

        $response[] = array(
            'STATUS' => $status,
            'BADGE' => '<span class="badge '. $button_class .'">'. $status .'</span>'
        );

        return $response;
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_training_status
    # Purpose    : Returns the status, badge
    #
    # Returns    : Array
    #
    # -------------------------------------------------------------
    public function get_training_status($stat){
        $response = array();

        switch ($stat) {
            case '0':
                $status = 'Pending';
                $button_class = 'bg-primary';
                break;
            case '1':
                $status = 'Recommended';
                $button_class = 'bg-info';
                break;
            case '2':
                $status = 'Approved';
                $button_class = 'bg-success';
                break;
            case '3':
                $status = 'Rejected';
                $button_class = 'bg-danger';
                break;
            case '4':
                $status = 'Cancelled';
                $button_class = 'bg-warning';
                break;
            case '5':
                $status = 'Locked';
                $button_class = 'bg-warning';
                break;
            default:
                $status = 'Unlocked';
                $button_class = 'bg-info';
        }

        $response[] = array(
            'STATUS' => $status,
            'BADGE' => '<span class="badge '. $button_class .'">'. $status .'</span>'
        );

        return $response;
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_agenda_task_status
    # Purpose    : Returns the status, badge
    #
    # Returns    : Array
    #
    # -------------------------------------------------------------
    public function get_agenda_task_status($stat){
        $response = array();

        switch ($stat) {
            case '0':
                $status = 'On-Going';
                $button_class = 'bg-primary';
                break;
            case '1':
                $status = 'Done';
                $button_class = 'bg-success';
                break;
            case '2':
                $status = 'Cancelled';
                $button_class = 'bg-warning';
                break;
            default:
                $status = 'On-Hold';
                $button_class = 'bg-info';
        }

        $response[] = array(
            'STATUS' => $status,
            'BADGE' => '<span class="badge '. $button_class .'">'. $status .'</span>'
        );

        return $response;
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_age
    # Purpose    : Returns the age
    #
    # Returns    : Number
    #
    # -------------------------------------------------------------
    public function get_age($birthday){
        $system_date = date('Y-m-d');

        $age = date_diff(date_create($birthday), date_create($system_date));

        return $age->format("%y");
    }
    # -------------------------------------------------------------

	 # -------------------------------------------------------------
    #
    # Name       : get_ticket_auto_accept_date_time
    # Purpose    : Returns the ticket auto accept date and time
    #
    # Returns    : Array
    #
    # -------------------------------------------------------------
    public function get_ticket_auto_accept_date_time($employee_id, $no_days, $no_hours, $ticket_id){
        if ($this->databaseConnection()) {
            $response = array();
            $ticket_details = $this->get_data_details_one_parameter('ticket', $ticket_id);
            $auto_accept_date = $ticket_details[0]['CREATED_DATE'];
            $auto_accept_time = $ticket_details[0]['CREATED_TIME'];
            $minutes = $this->check_date('empty', $auto_accept_time, '', 'i', '', '', '');

            $no_days = $no_days * 8;
            $total_hours = $no_days + $no_hours;

            for($i = 0; $i < $total_hours; $i++){
                $work_day = $this->check_week_day($this->check_date('empty', $auto_accept_date, '', 'w', '', '', ''));

                $office_shift_details = $this->get_data_details_two_parameter('office shift', $employee_id, $work_day);
                $office_shift_time_in = $office_shift_details[0]['TIME_IN'];
                $office_shift_time_out = $office_shift_details[0]['TIME_OUT'];
                $office_shift_start_lunch_break = $office_shift_details[0]['START_LUNCH_BREAK'];
                $office_shift_end_lunch_break = $office_shift_details[0]['END_LUNCH_BREAK'];
                $office_shift_day_off = $office_shift_details[0]['DAY_OFF'];

                if((strtotime($auto_accept_time) >= strtotime($office_shift_time_in) && strtotime($auto_accept_time) <= strtotime($office_shift_start_lunch_break)) || (strtotime($auto_accept_time) <= strtotime($office_shift_time_out) && strtotime($auto_accept_time) >= strtotime($office_shift_end_lunch_break))){
                    $auto_accept_time = date('H:i:00', strtotime('+1 hour', strtotime($auto_accept_time)));
                }
                else if(strtotime($auto_accept_time) > strtotime($office_shift_start_lunch_break) && strtotime($auto_accept_time) < strtotime($office_shift_end_lunch_break)){
                    $auto_accept_time = $this->check_date('empty', $office_shift_end_lunch_break, '', 'h:'. $minutes .':00 a', '', '', '');
                }
                else if(strtotime($auto_accept_time) > strtotime($office_shift_time_out)){
                    $auto_accept_time = $this->check_date('empty', $office_shift_time_in, '', 'h:'. $minutes .':00 a', '', '', '');

                    do {
                        $auto_accept_date = date('Y-m-d', strtotime('+1 day', strtotime($auto_accept_date)));

                        $auto_accept_day = $this->check_week_day($this->check_date('empty', $auto_accept_date, '', 'w', '', '', ''));

                        $check_if_holiday = $this->check_if_holiday($auto_accept_date);
                        $check_if_day_off = $this->check_if_day_off($employee_id, $auto_accept_day);

                        if($check_if_holiday > 0 || $check_if_day_off == 1){
                            $x = 1;
                            $auto_accept_date = date('Y-m-d', strtotime('+1 day', strtotime($auto_accept_date)));
                        }
                        else{
                            $x = 0;
                        }

                    } while ($x == 1);
                }
            }

            $response[] = array(
                'AUTO_ACCEPT_DATE' => $this->check_date('empty', $auto_accept_date, '', 'Y-m-d', '', '', ''),
                'AUTO_ACCEPT_TIME' => $this->check_date('empty', $auto_accept_time, '', 'H:i:00', '', '', ''),
            );

            return $response;
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_ticket_auto_close_date_time
    # Purpose    : Returns the ticket auto close date and time
    #
    # Returns    : Array
    #
    # -------------------------------------------------------------
    public function get_ticket_auto_close_date_time($employee_id, $no_days, $no_hours, $ticket_id){
        if ($this->databaseConnection()) {
            $response = array();
            $ticket_details = $this->get_data_details_one_parameter('ticket', $ticket_id);
            $auto_close_date = $ticket_details[0]['SOLVED_DATE'];
            $auto_close_time = $ticket_details[0]['SOLVED_TIME'];
            $minutes = $this->check_date('empty', $auto_close_time, '', 'i', '', '', '');

            $no_days = $no_days * 8;
            $total_hours = $no_days + $no_hours;

            for($i = 0; $i < $total_hours; $i++){
                $work_day = $this->check_week_day($this->check_date('empty', $auto_close_date, '', 'w', '', '', ''));

                $office_shift_details = $this->get_data_details_two_parameter('office shift', $employee_id, $work_day);
                $office_shift_time_in = $office_shift_details[0]['TIME_IN'];
                $office_shift_time_out = $office_shift_details[0]['TIME_OUT'];
                $office_shift_start_lunch_break = $office_shift_details[0]['START_LUNCH_BREAK'];
                $office_shift_end_lunch_break = $office_shift_details[0]['END_LUNCH_BREAK'];
                $office_shift_day_off = $office_shift_details[0]['DAY_OFF'];

                if((strtotime($auto_close_time) >= strtotime($office_shift_time_in) && strtotime($auto_close_time) <= strtotime($office_shift_start_lunch_break)) || (strtotime($auto_close_time) <= strtotime($office_shift_time_out) && strtotime($auto_close_time) >= strtotime($office_shift_end_lunch_break))){
                    $auto_close_time = date('H:i:00', strtotime('+1 hour', strtotime($auto_close_time)));
                }
                else if(strtotime($auto_close_time) > strtotime($office_shift_start_lunch_break) && strtotime($auto_close_time) < strtotime($office_shift_end_lunch_break)){
                    $auto_close_time = $this->check_date('empty', $office_shift_end_lunch_break, '', 'h:'. $minutes .':00 a', '', '', '');
                }
                else if(strtotime($auto_close_time) > strtotime($office_shift_time_out)){
                    $auto_close_time = $this->check_date('empty', $office_shift_time_in, '', 'h:'. $minutes .':00 a', '', '', '');

                    do {
                        $auto_close_date = date('Y-m-d', strtotime('+1 day', strtotime($auto_close_date)));

                        $auto_close_day = $this->check_week_day($this->check_date('empty', $auto_close_date, '', 'w', '', '', ''));

                        $check_if_holiday = $this->check_if_holiday($auto_close_date);
                        $check_if_day_off = $this->check_if_day_off($employee_id, $auto_close_day);

                        if($check_if_holiday > 0 || $check_if_day_off == 1){
                            $x = 1;
                            $auto_close_date = date('Y-m-d', strtotime('+1 day', strtotime($auto_close_date)));
                        }
                        else{
                            $x = 0;
                        }

                    } while ($x == 1);
                }
            }

            $response[] = array(
                'AUTO_CLOSE_DATE' => $this->check_date('empty', $auto_close_date, '', 'Y-m-d', '', '', ''),
                'AUTO_CLOSE_TIME' => $this->check_date('empty', $auto_close_time, '', 'H:i:00', '', '', ''),
            );

            return $response;
        }
    }
    # -------------------------------------------------------------

	# -------------------------------------------------------------
    #
    # Name       : get_price_index_amount_adjustment_status
    # Purpose    : Returns the status, badge
    #
    # Returns    : Array
    #
    # -------------------------------------------------------------
    public function get_price_index_amount_adjustment_status($stat){
        $response = array();

        if($stat == '0'){
            $status = 'Pending';
            $button_class = 'bg-primary';
        }
        else if($stat == '1'){
            $status = 'Approved';
            $button_class = 'bg-success';
        }
        else if($stat == '2'){
            $status = 'Rejected';
            $button_class = 'bg-danger';
        }
        else{
            $status = 'Cancelled';
            $button_class = 'bg-warning';
        }

        $response[] = array(
            'STATUS' => $status,
            'BADGE' => '<span class="badge '. $button_class .'">'. $status .'</span>'
        );

        return $response;
    }
    # -------------------------------------------------------------


    # -------------------------------------------------------------
    #   Get details data
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_data_details_one_parameter
    # Purpose    : Returns the details data with one parameter
    #
    # Returns    : Array
    #
    # -------------------------------------------------------------
    public function get_data_details_one_parameter($type, $parameter){
        if ($this->databaseConnection()) {
            $response = array();



            switch ($type) {
                case 'pdc monitoring':
                    $query = "SELECT * FROM tblpdcmonitoring WHERE ID_MONITORING=:parameter ";
                    break;
                case 'employees department':
                    $query = "SELECT * FROM tblemployeeprofile WHERE DEPARTMENT=:parameter ";
                    break;

                case 'purchase request by prno':
                    $query = "SELECT * FROM tblpritems WHERE PRNO=:parameter";
                break;

                case 'purchase request':
                    $query = "SELECT * FROM tblpurchaserequest WHERE PRNO=:parameter";
                break;
                case 'vault access':
                        $query = "SELECT * FROM tblvaultacess WHERE ID=:parameter";
                    break;
                case 'insurance request' :
                    $query = "SELECT * FROM tblinsurancerequest WHERE ID=:parameter";
                    break;
                case  'activity note attachment':
                    $query = 'SELECT * FROM tblactivityattachments WHERE ID=:parameter';
                    break;
                case  'activity note':
                    $query = 'SELECT * FROM tblactivitynotes WHERE ID=:parameter';
                    break;
                case 'user account':
                    $query = 'SELECT EMPLOYEE_ID, USERNAME, PASSWORD, ROLE_ID, ACTIVE, PASSWORD_EXPIRY_DATE, FAILED_LOGIN, LAST_FAILED_LOGIN, RECORD_LOG FROM tbluseraccount WHERE EMPLOYEE_ID = :parameter OR USERNAME = :parameter';
                    break;
                case 'employee profile':
                    $query = 'SELECT EMPLOYEE_ID, USERNAME, ID_NUMBER, FIRST_NAME, LAST_NAME, MIDDLE_NAME, SUFFIX, BIRTHDAY, EMPLOYEMENT_TYPE, EMPLOYMENT_STATUS, JOIN_DATE, PERMANENT_DATE, END_OF_CONTRACT, EXIT_DATE, EXIT_REASON, PROFILE_IMAGE, EMAIL, PHONE, TELEPHONE, DEPARTMENT, BRANCH, DESIGNATION, POSITION, GENDER, CIVIL_STATUS, ADDRESS, PAYROLL_PERIOD, BASIC_PAY, DAILY_RATE, HOURLY_RATE, MINUTE_RATE, SSS, TIN, PHILHEALTH, PAGIBIG, DRIVERS_LICENSE, ACCOUNT_NAME, ACCOUNT_NUMBER, RECORD_LOG FROM tblemployeeprofile WHERE EMPLOYEE_ID = :parameter OR USERNAME = :parameter';
                    break;
                case 'page':
                    $query = 'SELECT PAGE_NAME, RECORD_LOG FROM tblpage WHERE PAGE_ID = :parameter';
                    break;
                case 'permission':
                    $query = 'SELECT PAGE_ID, PERMISSION_DESC, RECORD_LOG FROM tblpermission WHERE PERMISSION_ID = :parameter';
                    break;
                case 'system parameter':
                    $query = 'SELECT PARAMETER_DESC, PARAMETER_EXTENSION, PARAMETER_NUMBER, RECORD_LOG FROM tblsystemparameters WHERE PARAMETER_ID = :parameter';
                    break;
                case 'role':
                    $query = 'SELECT ROLE_DESC, ACTIVE, RECORD_LOG FROM tblrole WHERE ROLE_ID = :parameter';
                    break;
                case 'role permission':
                    $query = 'SELECT PERMISSION_ID, RECORD_LOG FROM tblrolepermission WHERE ROLE_ID = :parameter';
                    break;
                case 'role user':
                    $query = 'SELECT USERNAME, RECORD_LOG FROM tblroleuser WHERE ROLE_ID = :parameter';
                    break;
                case 'company':
                    $query = 'SELECT COMPANY_NAME, EMAIL, PHONE, TELEPHONE, WEBSITE, ADDRESS, WORKING_DAYS, START_WORKING_HOURS, END_WORKING_HOURS, START_LUNCH_BREAK, END_LUNCH_BREAK, MONTHLY_WORKING_DAYS, HALF_DAY_MARK, LATE_MARK, MAX_CLOCK_IN, HEALTH_DECLARATION, RECORD_LOG FROM tblcompany WHERE COMPANY_ID = :parameter';
                    break;
                case 'application settings':
                    $query = 'SELECT LOGIN_BG, LOGO_LIGHT, LOGO_DARK, LOGO_ICON_LIGHT, LOGO_ICON_DARK, FAVICON, CURRENCY, TIMEZONE, DATE_FORMAT, TIME_FORMAT, RECORD_LOG FROM tblapplicationsettings WHERE SETTINGS_ID = :parameter';
                    break;
                case 'department':
                    $query = 'SELECT DEPARTMENT, RECORD_LOG FROM tbldepartment WHERE DEPARTMENT_ID = :parameter';
                    break;
                case 'designation':
                    $query = 'SELECT DESIGNATION, RECORD_LOG FROM tbldesignation WHERE DESIGNATION_ID = :parameter';
                    break;
                case 'branch':
                    $query = 'SELECT BRANCH, EMAIL, PHONE, TELEPHONE, ADDRESS, RECORD_LOG FROM tblbranch WHERE BRANCH_ID = :parameter';
                    break;
                case 'holiday':
                    $query = 'SELECT HOLIDAY, HOLIDAY_DATE, HOLIDAY_TYPE, RECORD_LOG FROM tblholiday WHERE HOLIDAY_ID = :parameter';
                    break;
                case 'leave type':
                    $query = 'SELECT LEAVE_NAME, NO_LEAVES, PAID_STATUS, RECORD_LOG FROM tblleavetype WHERE LEAVE_TYPE_ID = :parameter';
                    break;
                case 'employee document':
                    $query = 'SELECT EMPLOYEE_ID, DOCUMENT_NAME, DOCUMENT_PATH, RECORD_LOG FROM tblemployeedocument WHERE DOCUMENT_ID = :parameter';
                    break;
                case 'deduction type':
                    $query = 'SELECT DEDUCTION, CATEGORY, RECORD_LOG FROM tbldeductiontype WHERE DEDUCTION_TYPE_ID = :parameter';
                    break;
                case 'allowance type':
                    $query = 'SELECT ALLOWANCE, TAX_TYPE, RECORD_LOG FROM tblallowancetype WHERE ALLOWANCE_TYPE_ID = :parameter';
                    break;
                case 'other income type':
                    $query = 'SELECT OTHER_INCOME, TAX_TYPE, RECORD_LOG FROM tblotherincometype WHERE OTHER_INCOME_TYPE_ID = :parameter';
                    break;
                case 'payroll specification':
                    $query = 'SELECT EMPLOYEE_ID, SPEC_TYPE, STATUS, CATEGORY, SPEC_AMOUNT, PAYROLL_ID, PAYROLL_DATE, RECORD_LOG FROM tblpayrollspec WHERE SPEC_ID = :parameter';
                    break;
                case 'employee superior':
                    $query = 'SELECT EMPLOYEE_ID, SUPERIOR_ID, RECORD_LOG FROM tblemployeesuperior WHERE EMPLOYEE_ID = :parameter';
                    break;
                case 'employee subordinate':
                    $query = 'SELECT EMPLOYEE_ID, SUBORDINATE_ID, RECORD_LOG FROM tblemployeesubordinate WHERE EMPLOYEE_ID = :parameter';
                    break;
                case 'employee authorizer':
                    $query = 'SELECT EMPLOYEE_ID, AUTHORIZER_ID, RECORD_LOG FROM tblemployeeauthorizer WHERE EMPLOYEE_ID = :parameter';
                    break;
                case 'email notification':
                    $query = 'SELECT NOTIFICATION, ACTIVE, RECORD_LOG FROM tblnotificationsetting WHERE NOTIFICATION_ID = :parameter';
                    break;
                case 'email configuration':
                    $query = 'SELECT MAIL_HOST, PORT, SMTP_AUTH, SMTP_AUTO_TLS, USERNAME, PASSWORD, MAIL_ENCRYPTION, MAIL_FROM_NAME, MAIL_FROM_EMAIL, RECORD_LOG FROM tblmailconfig WHERE MAIL_ID = :parameter';
                    break;
                case 'payroll group':
                    $query = 'SELECT PAYROLL_GROUP_DESC, RECORD_LOG FROM tblpayrollgroup WHERE PAYROLL_GROUP_ID = :parameter';
                    break;
                case 'attendance adjustment':
                    $query = 'SELECT EMPLOYEE_ID, ATTENDANCE_ID, TIME_IN_DATE, TIME_IN_ORG, TIME_IN_ADJ, TIME_OUT_DATE_ORG, TIME_OUT_DATE_ADJ, TIME_OUT_ORG, TIME_OUT_ADJ, STATUS, ATTACHMENT, REASON, FILE_DATE, FILE_TIME, DECISION_DATE, DECISION_TIME, RECORD_LOG FROM tblattendanceadustment WHERE ADJUSTMENT_ID = :parameter';
                    break;
                case 'telephone log':
                    $query = 'SELECT EMPLOYEE_ID, INITIAL_CALL_DATE, INITIAL_CALL_TIME, ACTUAL_CALL_DATE, ACTUAL_CALL_TIME, ACTUAL_CALL_DURATION, RECIPIENT, TELEPHONE, REQUEST_DATE, REQUEST_TIME, STATUS, DECISION_DATE, DECISION_TIME, DECISION_BY, REASON, RECORD_LOG FROM tbltelephonelogsheet WHERE LOG_ID = :parameter';
                    break;
                case 'document management setting':
                    $query = 'SELECT MAX_FILE_SIZE, AUTHORIZATION, RECORD_LOG FROM tbldocumentsettings WHERE SETTINGS_ID = :parameter';
                    break;
                case 'document file type':
                    $query = 'SELECT FILE_TYPE, RECORD_LOG FROM tbldocumentfiletype WHERE SETTINGS_ID = :parameter';
                    break;
                   case 'document':
                $query = 'SELECT d.DOCUMENT_NAME, d.AUTHOR, d.DEPARTMENT, d.DOCUMENT_PATH, d.DOCUMENT_CATEGORY,
                                 d.DOCUMENT_EXTENSION, d.DOCUMENT_SIZE, d.DESCRIPTION, d.UPLOAD_DATE, d.UPLOAD_TIME,
                                 d.PUBLISH, d.PUBLISH_BY, d.PUBLISH_DATE, d.PUBLISH_TIME, d.RECORD_LOG,
                                 GROUP_CONCAT(DISTINCT t.TAG_NAME SEPARATOR ", ") AS TAGS
                          FROM tbldocument d
                          LEFT JOIN document_tags dt ON d.DOCUMENT_ID = dt.DOCUMENT_ID
                          LEFT JOIN tags t ON dt.TAG_ID = t.TAG_ID
                          WHERE d.DOCUMENT_ID = :parameter
                          GROUP BY d.DOCUMENT_ID';
                    break;
                case 'department document permission':
                    $query = 'SELECT DEPARTMENT_ID, PERMISSION, RECORD_LOG FROM tbldocumentdepartmentpermission WHERE DOCUMENT_ID = :parameter';
                    break;
                case 'employee document permission':
                    $query = 'SELECT EMPLOYEE_ID, PERMISSION, RECORD_LOG FROM tbldocumentemployeepermission WHERE DOCUMENT_ID = :parameter';
                    break;
                case 'transmittal':
                    $query = 'SELECT DESCRIPTION, STATUS, CURRENT_EMPLOYEE, CURRENT_DEPARTMENT, TRANSMITTED_EMPLOYEE, TRANSMITTED_DEPARTMENT, LAST_TRANSACTION_DATE, LAST_TRANSACTION_TIME, RECORD_LOG FROM tbltransmittal WHERE TRANSMITTAL_ID = :parameter';
                    break;
                case 'suggest to win':
                    $query = 'SELECT EMPLOYEE_ID, STATUS, FILE_PATH, TITLE, DESCRIPTION, REASON, BENEFITS, POST_DATE, POST_TIME, DECISION_DATE, DECISION_TIME, VOTING_PERIOD, RECORD_LOG FROM tblstw WHERE STW_ID = :parameter';
                    break;
                case 'training room log':
                    $query = 'SELECT EMPLOYEE_ID, START_DATE, START_TIME, END_TIME, REQUEST_DATE, REQUEST_TIME, STATUS, DECISION_DATE, DECISION_TIME, DECISION_BY, OTHER_PARTICIPANT, FAN, AIRCON, LIGHTS, REASON, RECORD_LOG FROM tbltrainingroomlogsheet WHERE LOG_ID = :parameter';
                    break;
                case 'training room log participant':
                    $query = 'SELECT EMPLOYEE_ID, RECORD_LOG FROM tbltrainingroomparticipant WHERE LOG_ID = :parameter';
                    break;
                case 'weekly cash flow':
                    $query = 'SELECT EMPLOYEE_ID, DEPARTMENT, STATUS, START_DATE, END_DATE, APPROVAL_DATE, APPROVAL_TIME, APPROVAL_BY, RECORD_LOG FROM tblwcf WHERE WCF_ID = :parameter';
                    break;
                case 'weekly cash flow particulars':
                    $query = 'SELECT WCF_ID, DETAILS, WCF_TYPE, LOAN_WCF_TYPE, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, TOTAL, RECORD_LOG FROM tblwcfparticulars WHERE PARTICULAR_ID = :parameter';
                    break;
                case 'ticket':
                    $query = 'SELECT REQUESTER, DEPARTMENT, CATEGORY, ASSIGNED_DEPARTMENT, ASSIGNED_EMPLOYEE, SUBJECT, DESCRIPTION, PRIORITY, STATUS, DUE_DATE, DUE_TIME, CREATED_DATE, CREATED_TIME, AUTO_ACCEPT_DATE, AUTO_ACCEPT_TIME, ACCEPTED_DATE, ACCEPTED_TIME, SOLVED_DATE, SOLVED_TIME, CLOSED_DATE, CLOSED_TIME, AUTO_CLOSE_DATE, AUTO_CLOSE_TIME, AUTO_CLOSE_REASON, DECISION_DATE, DECISION_TIME, REJECTION_REASON, CANCELLATION_REASON, RECORD_LOG FROM tblticket WHERE TICKET_ID = :parameter';
                    break;
                case 'ticket attachment':
                    $query = 'SELECT TICKET_ID, FILE_PATH, RECORD_LOG FROM tblticketattachment WHERE ATTACHMENT_ID = :parameter';
                    break;
                case 'ticket adjustment':
                    $query = 'SELECT EMPLOYEE_ID, TICKET_ID, STATUS, ASSIGNED_EMPLOYEE_ORG, ASSIGNED_EMPLOYEE_ADJ, CATEGORY_ORG, CATEGORY_ADJ, SUBJECT_ORG, SUBJECT_ADJ, DESCRIPTION_ORG, DESCRIPTION_ADJ, PRIORITY_ORG, PRIORITY_ADJ, DUE_DATE_ORG, DUE_DATE_ADJ, DUE_TIME_ORG, DUE_TIME_ADJ, REASON, REQUEST_DATE, REQUEST_TIME, DECISION_DATE, DECISION_TIME, DECISION_BY, RECORD_LOG FROM tblticketadjustment WHERE ADJUSTMENT_ID = :parameter';
                    break;
                case 'notification':
                    $query = 'SELECT NOTIFICATION_FROM, NOTIFICATION_TO, STATUS, NOTIFICATION_TITLE, NOTIFICATION, LINK, NOTIFICATION_DATE, NOTIFICATION_TIME, RECORD_LOG FROM tblnotifications WHERE NOTIFICATION_ID = :parameter';
                    break;
                case 'meeting':
                    $query = 'SELECT AUTHOR, DEPARTMENT, TITLE, MEETING_DATE, START_TIME, END_TIME, MEETING_TYPE, PREVIOUS_MEETING, STATUS, DECISION_DATE, DECISION_TIME, DECISION_BY, PRESIDER, NOTED_BY, RECORD_LOG FROM tblmeeting WHERE MEETING_ID = :parameter';
                    break;
                case 'meeting attendees':
                    $query = 'SELECT EMPLOYEE_ID, RECORD_LOG FROM tblmeetingattendees WHERE MEETING_ID = :parameter';
                    break;
                case 'meeting absentees':
                    $query = 'SELECT EMPLOYEE_ID, RECORD_LOG FROM tblmeetingabsentattendees WHERE MEETING_ID = :parameter';
                    break;
                case 'meeting permission':
                    $query = 'SELECT EMPLOYEE_ID, PERMISSION, RECORD_LOG FROM tblmeetingpermission WHERE MEETING_ID = :parameter';
                    break;
                case 'meeting task':
                    $query = 'SELECT AGENDA, MEETING_ID, TASK, EMPLOYEE_ID, DEPARTMENT, STATUS, DUE_DATE_TYPE, DUE_DATE, NEW_DUE_DATE, PREVIOUS_MEETING, RECORD_LOG FROM tblmeetingtask WHERE TASK_ID = :parameter';
                    break;
                case 'meeting other matters':
                    $query = 'SELECT MEETING_ID, OTHER_MATTERS, RECORD_LOG FROM tblmeetingothermatters WHERE OTHER_MATTERS_ID = :parameter';
                    break;
                case 'overtime':
                    $query = 'SELECT  EMPLOYEE_ID, TITLE, HOLIDAY_TYPE,  OVERTIME_DATE, START_TIME, END_TIME,  REASON  FROM tblovertime WHERE OVERTIME_ID = :parameter';
                    break;
                case 'training':
                    $query = 'SELECT EMPLOYEE_ID, TITLE, DETAILS, TRAINING_TYPE, STATUS, TRAINING_DATE, START_TIME, END_TIME, DECISION_DATE, DECISION_TIME, DECISION_BY, RECORD_LOG FROM tbltraining WHERE TRAINING_ID = :parameter';
                    break;
                case 'training attendees':
                    $query = 'SELECT EMPLOYEE_ID, RECORD_LOG FROM tbltrainingattendees WHERE TRAINING_ID = :parameter';
                    break;
				case 'car search parameter':
                    $query = "SELECT PARAMETER_ID, PARAMETER_CODE, CATEGORY_TYPE, PARAMETER_VALUE, RECORD_LOG FROM tblcarparameter WHERE PARAMETER_ID = :parameter OR PARAMETER_CODE = :parameter OR PARAMETER_VALUE LIKE CONCAT('%', :parameter, '%')";
                    break;
                case 'price index item':
                    $query = 'SELECT BRAND, MODEL, VARIANT, ENGINE_SIZE, GAS_TYPE, TRANSMISSION, DRIVE_TRAIN, BODY_TYPE, SEATING_CAPACITY, CAMSHAFT_PROFILE, COLOR_TYPE, AIRCON_TYPE, OTHER_INFORMATION, RECORD_LOG FROM tblpriceindexitem WHERE ITEM_ID = :parameter';
                    break;
                case 'price index amount adjustment':
                    $query = 'SELECT ITEM_ID, YEAR_MODEL, INITIAL_ITEM_VALUE, PROPOSED_ITEM_VALUE, STATUS, REQUEST_DATE, REQUEST_TIME, REQUEST_BY, DECISION_DATE, DECISION_TIME, DECISION_BY, DECISION_REASON, RECORD_LOG FROM tblpriceindexvalueadustment WHERE ADJUSTMENT_ID = :parameter';
                    break;
                default:
                    $query = '';
            }

            $sql = $this->db_connection->prepare($query);
            $sql->bindParam(':parameter', $parameter);

            if($sql->execute()){
                while($row = $sql->fetch()){

                    switch ($type) {
                        case 'pdc monitoring' :
                            $response[] = array(
                                'LOAN_NUM' => $row['LOAN_NUM'],
                                'CURR_PDC_NUMBER' =>$row['CURR_PDC_NUMBER'],
                                'UNDERTAKING' =>$row['UNDERTAKING'],
                                'ASSIGN_TO' =>$row['ASSIGN_TO'],
                                'BRANCH' =>$row['BRANCH'],
                                'CREATED_AT' =>$row['CREATED_AT'],
                            );
                        break;

                        case 'employees department' :

                            $response[] = array(
                                'EMPLOYEE_ID' => $row['EMPLOYEE_ID'],
                                'USERNAME' => $row['USERNAME'],
                                'FIRST_NAME'=>$row['FIRST_NAME'],
                                'MIDDLE_NAME'=>$row['MIDDLE_NAME'],
                                'LAST_NAME'=>$row['LAST_NAME'],
                                'SUFFIX'=>$row['SUFFIX'],

                            );



                            break;


                        case 'purchase request by prno':
                            $response[] = array(
                                'IDNO' => $row['IDNO'],
                                'QUANTITY' => $row['QUANTITY'],
                                'UNIT'=>$row['UNIT'],
                                'PARTICULAR'=>$row['PARTICULAR'],
                                'BUDGET'=>$row['BUDGET'],
                                'ESTIMATEDCOST'=>$row['ESTIMATEDCOST'],
                                'PRNO'=>$row['PRNO'],

                            );
                            break;

                        case 'purchase request':
                            $response[] = array(
                                'PRNO' => $row['PRNO'],
                                'TITLE' => $row['TITLE'],
                                'DATE_NEEDED'=>$row['DATE_NEEDED'],
                                'DEPARTMENT'=>$row['DEPARTMENT'],
                                'STATUS'=>$row['STATUS'],
                                'CREATOR'=>$row['CREATOR'],
                                'REMARKS'=>$row['REMARKS'],
                                'REQUESTEDBY'=>$row['REQUESTEDBY'],
                                'BUDGETCONFIRMEE'=>$row['BUDGETCONFIRMEE'],
                                'BUDGETCONFIRMREM'=>$row['BUDGETCONFIRMREM'],
                                'RECOMMENDED_BY'=>$row['RECOMMENDED_BY'],
                                'RECOMMENDED_BY1'=>$row['RECOMMENDED_BY1'],
                                'RECOM1STATUS'=>$row['RECOM1STATUS'],
                                'RECOM2STATUS'=>$row['RECOM2STATUS'],
                                'APPROVED_BY'=>$row['APPROVED_BY'],
                                'CREATED_AT'=>$row['CREATED_AT'],

                            );
                            break;

                        case 'vault access':
                            $response[] = array(
                                'PERSON' => $row['PERSON'],
                                'ACTIVITY' => $row['ACTIVITY'],
                                'REMARKS'=>$row['REMARKS'],
                                'VAULT_BRANCH'=>$row['VAULT_BRANCH']

                            );
                            break;

                        case 'insurance request':
                            $response[] = array(
                                'CLIENT_NAME' => $row['CLIENT_NAME'],
                                'ADDRESS' => $row['ADDRESS'],
                                'ID' => $row['ID'],
                                'COLLA_ID' => $row['COLLA_ID'],
                                'UNIT_DESC' => $row['UNIT_DESC'],
                                'YEAR_MOD' => $row['YEAR_MOD'],
                                'PLATE_NUM' => $row['PLATE_NUM'],
                                'CHASIS_NUM' => $row['CHASIS_NUM'],
                                'MOTOR_NUM' => $row['MOTOR_NUM'],
                                'COLOR' => $row['COLOR'],
                                'INS_BY_ELF' => $row['INS_BY_ELF'],
                                'INS_CODE' => $row['INS_CODE'],
                                'INS_CLAS' => $row['INS_CLAS'],
                                'MORTGAGEE' => $row['MORTGAGEE'],
                                'RATE' => $row['RATE'],
                                'COVERAGE' => $row['COVERAGE'],
                                'OTHER_LINES' => $row['OTHER_LINES'],
                                'PRM' => $row['PRM'],
                                'PRM_AM' => $row['PRM_AM'],
                                'IS_AOG' => $row['IS_AOG'],
                                'INCEP_SDT' => $row['INCEP_SDT'],
                                'INCEP_EDT' => $row['INCEP_EDT'],
                                'PAY_TERM' => $row['PAY_TERM'],
                                'NOD' => $row['NOD'],
                                'DD' => $row['DD'],
                                'ODTL' => $row['ODTL'],
                                'BODIN' => $row['BODIN'],
                                'PTDMG' => $row['PTDMG'],
                                'PERACC' => $row['PERACC'],
                                'GP' => $row['GP'],
                                'NETMT' => $row['NETMT'],
                                'NETCOMI' => $row['NETCOMI'],
                                'TOTALPREM' => $row['TOTALPREM'],
                                'INCOME' => $row['INCOME'],
                                'DEALCD' => $row['DEALCD'],
                                'REQ_BY' => $row['REQ_BY'],
                                'REQ_DT' => $row['REQ_DT'],
                                'IRS' => $row['IRS'],
                                'CAN_REM' => $row['CAN_REM'],

                            );
                            break;




                        case 'activity note':
                            $response[] = array(
                                'ACT_ID' => $row['ID'],
                                'CLIENT_NAME' => $row['CLIENT_NAME'],
                                'CLIENT_TEL' => $row['CLIENT_TEL'],
                                'NOTE_TYPE' => $row['NOTE_TYPE'],
                                'NOTE_DESC' => $row['NOTE_DESC'],
                                'LAT' => $row['GEO_LAT'],
                                'LONG' => $row['GEO_LONG']

                            );
                            break;



                        case 'user account':
                            $response[] = array(
                                'EMPLOYEE_ID' => $row['EMPLOYEE_ID'],
                                'USERNAME' => $row['USERNAME'],
                                'PASSWORD' => $row['PASSWORD'],
                                'ROLE_ID' => $row['ROLE_ID'],
                                'ACTIVE' => $row['ACTIVE'],
                                'PASSWORD_EXPIRY_DATE' => $row['PASSWORD_EXPIRY_DATE'],
                                'FAILED_LOGIN' => $row['FAILED_LOGIN'],
                                'LAST_FAILED_LOGIN' => $row['LAST_FAILED_LOGIN'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
                        case 'employee profile':
                            $response[] = array(
                                'EMPLOYEE_ID' => $row['EMPLOYEE_ID'],
                                'USERNAME' => $row['USERNAME'],
                                'ID_NUMBER' => $row['ID_NUMBER'],
                                'FIRST_NAME' => $row['FIRST_NAME'],
                                'MIDDLE_NAME' => $row['MIDDLE_NAME'],
                                'LAST_NAME' => $row['LAST_NAME'],
                                'SUFFIX' => $row['SUFFIX'],
                                'BIRTHDAY' => $this->check_date('empty', $row['BIRTHDAY'], '', 'm/d/Y', '', '', ''),
                                'EMPLOYEMENT_TYPE' => $row['EMPLOYEMENT_TYPE'],
                                'EMPLOYMENT_STATUS' => $row['EMPLOYMENT_STATUS'],
                                'JOIN_DATE' => $this->check_date('empty', $row['JOIN_DATE'], '', 'm/d/Y', '', '', ''),
                                'PERMANENT_DATE' => $this->check_date('empty', $row['PERMANENT_DATE'], '', 'm/d/Y', '', '', ''),
                                'END_OF_CONTRACT' => $this->check_date('empty', $row['END_OF_CONTRACT'], '', 'm/d/Y', '', '', ''),
                                'EXIT_DATE' => $this->check_date('empty', $row['EXIT_DATE'], '', 'm/d/Y', '', '', ''),
                                'EXIT_REASON' => $row['EXIT_REASON'],
                                'PROFILE_IMAGE' => $this->check_profile_image($row['PROFILE_IMAGE']),
                                'EMAIL' => $row['EMAIL'],
                                'PHONE' => $row['PHONE'],
                                'TELEPHONE' => $row['TELEPHONE'],
                                'DEPARTMENT' => $row['DEPARTMENT'],
                                'BRANCH' => $row['BRANCH'],
                                'POSITION' => $row['POSITION'],
                                'DESIGNATION' => $row['DESIGNATION'],
                                'GENDER' => $row['GENDER'],
                                'CIVIL_STATUS' => $row['CIVIL_STATUS'],
                                'ADDRESS' => $row['ADDRESS'],
                                'PAYROLL_PERIOD' => $row['PAYROLL_PERIOD'],
                                'BASIC_PAY' => $row['BASIC_PAY'],
                                'DAILY_RATE' => $row['DAILY_RATE'],
                                'HOURLY_RATE' => $row['HOURLY_RATE'],
                                'MINUTE_RATE' => $row['MINUTE_RATE'],
                                'SSS' => $row['SSS'],
                                'TIN' => $row['TIN'],
                                'PHILHEALTH' => $row['PHILHEALTH'],
                                'PAGIBIG' => $row['PAGIBIG'],
                                'DRIVERS_LICENSE' => $row['DRIVERS_LICENSE'],
                                'ACCOUNT_NAME' => $row['ACCOUNT_NAME'],
                                'ACCOUNT_NUMBER' => $row['ACCOUNT_NUMBER'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
                        case 'page':
                            $response[] = array(
                                'PAGE_NAME' => $row['PAGE_NAME'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
                        case 'permission':
                            $response[] = array(
                                'PAGE_ID' => $row['PAGE_ID'],
                                'PERMISSION_DESC' => $row['PERMISSION_DESC'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
                        case 'system parameter':
                            $response[] = array(
                                'PARAMETER_DESC' => $row['PARAMETER_DESC'],
                                'PARAMETER_EXTENSION' => $row['PARAMETER_EXTENSION'],
                                'PARAMETER_NUMBER' => $row['PARAMETER_NUMBER'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
                        case 'role':
                            $response[] = array(
                                'ROLE_DESC' => $row['ROLE_DESC'],
                                'ACTIVE' => $row['ACTIVE'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
                        case 'role permission':
                            $response[] = array(
                                'PERMISSION_ID' => $row['PERMISSION_ID'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
                        case 'role user':
                            $response[] = array(
                                'USERNAME' => $row['USERNAME'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
                        case 'company':
                            $response[] = array(
                                'COMPANY_NAME' => $row['COMPANY_NAME'],
                                'EMAIL' => $row['EMAIL'],
                                'PHONE' => $row['PHONE'],
                                'TELEPHONE' => $row['TELEPHONE'],
                                'WEBSITE' => $row['WEBSITE'],
                                'ADDRESS' => $row['ADDRESS'],
                                'WORKING_DAYS' => $row['WORKING_DAYS'],
                                'START_WORKING_HOURS' => $row['START_WORKING_HOURS'],
                                'END_WORKING_HOURS' => $row['END_WORKING_HOURS'],
                                'HALF_DAY_MARK' => $row['HALF_DAY_MARK'],
                                'START_LUNCH_BREAK' => $row['START_LUNCH_BREAK'],
                                'END_LUNCH_BREAK' => $row['END_LUNCH_BREAK'],
                                'MONTHLY_WORKING_DAYS' => $row['MONTHLY_WORKING_DAYS'],
                                'LATE_MARK' => $row['LATE_MARK'],
                                'MAX_CLOCK_IN' => $row['MAX_CLOCK_IN'],
                                'HEALTH_DECLARATION' => $row['HEALTH_DECLARATION'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
                        case 'application settings':
                            $response[] = array(
                                'LOGIN_BG' => $row['LOGIN_BG'],
                                'LOGO_LIGHT' => $row['LOGO_LIGHT'],
                                'LOGO_DARK' => $row['LOGO_DARK'],
                                'LOGO_ICON_LIGHT' => $row['LOGO_ICON_LIGHT'],
                                'LOGO_ICON_DARK' => $row['LOGO_ICON_DARK'],
                                'FAVICON' => $row['FAVICON'],
                                'CURRENCY' => $row['CURRENCY'],
                                'TIMEZONE' => $row['TIMEZONE'],
                                'DATE_FORMAT' => $row['DATE_FORMAT'],
                                'TIME_FORMAT' => $row['TIME_FORMAT'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
                        case 'department':
                            $response[] = array(
                                'DEPARTMENT' => $row['DEPARTMENT'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
                        case 'designation':
                            $response[] = array(
                                'DESIGNATION' => $row['DESIGNATION'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
                        case 'branch':
                            $response[] = array(
                                'BRANCH' => $row['BRANCH'],
                                'EMAIL' => $row['EMAIL'],
                                'PHONE' => $row['PHONE'],
                                'TELEPHONE' => $row['TELEPHONE'],
                                'ADDRESS' => $row['ADDRESS'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
                        case 'holiday':
                            $response[] = array(
                                'HOLIDAY' => $row['HOLIDAY'],
                                'HOLIDAY_DATE' => $row['HOLIDAY_DATE'],
                                'HOLIDAY_TYPE' => $row['HOLIDAY_TYPE'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
                        case 'leave type':
                            $response[] = array(
                                'LEAVE_NAME' => $row['LEAVE_NAME'],
                                'NO_LEAVES' => $row['NO_LEAVES'],
                                'PAID_STATUS' => $row['PAID_STATUS'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
                        case 'employee document':
                            $response[] = array(
                                'EMPLOYEE_ID' => $row['EMPLOYEE_ID'],
                                'DOCUMENT_NAME' => $row['DOCUMENT_NAME'],
                                'DOCUMENT_PATH' => $row['DOCUMENT_PATH'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
                        case 'deduction type':
                            $response[] = array(
                                'DEDUCTION' => $row['DEDUCTION'],
                                'CATEGORY' => $row['CATEGORY'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
                        case 'allowance type':
                            $response[] = array(
                                'ALLOWANCE' => $row['ALLOWANCE'],
                                'TAX_TYPE' => $row['TAX_TYPE'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
                        case 'other income type':
                            $response[] = array(
                                'OTHER_INCOME' => $row['OTHER_INCOME'],
                                'TAX_TYPE' => $row['TAX_TYPE'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
                        case 'payroll specification':
                            $response[] = array(
                                'EMPLOYEE_ID' => $row['EMPLOYEE_ID'],
                                'SPEC_TYPE' => $row['SPEC_TYPE'],
                                'STATUS' => $row['STATUS'],
                                'CATEGORY' => $row['CATEGORY'],
                                'SPEC_AMOUNT' => $row['SPEC_AMOUNT'],
                                'PAYROLL_ID' => $row['PAYROLL_ID'],
                                'PAYROLL_DATE' => $row['PAYROLL_DATE'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
                        case 'employee superior':
                            $response[] = array(
                                'EMPLOYEE_ID' => $row['EMPLOYEE_ID'],
                                'SUPERIOR_ID' => $row['SUPERIOR_ID'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
                        case 'employee subordinate':
                            $response[] = array(
                                'EMPLOYEE_ID' => $row['EMPLOYEE_ID'],
                                'SUBORDINATE_ID' => $row['SUBORDINATE_ID'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
                        case 'employee authorizer':
                            $response[] = array(
                                'EMPLOYEE_ID' => $row['EMPLOYEE_ID'],
                                'AUTHORIZER_ID' => $row['AUTHORIZER_ID'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
                        case 'email notification':
                            $response[] = array(
                                'NOTIFICATION' => $row['NOTIFICATION'],
                                'ACTIVE' => $row['ACTIVE'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
                        case 'email configuration':
                            $response[] = array(
                                'MAIL_HOST' => $row['MAIL_HOST'],
                                'PORT' => $row['PORT'],
                                'SMTP_AUTH' => $row['SMTP_AUTH'],
                                'SMTP_AUTO_TLS' => $row['SMTP_AUTO_TLS'],
                                'USERNAME' => $row['USERNAME'],
                                'PASSWORD' => $row['PASSWORD'],
                                'MAIL_ENCRYPTION' => $row['MAIL_ENCRYPTION'],
                                'MAIL_FROM_NAME' => $row['MAIL_FROM_NAME'],
                                'MAIL_FROM_EMAIL' => $row['MAIL_FROM_EMAIL'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
                        case 'payroll group':
                            $response[] = array(
                                'PAYROLL_GROUP_DESC' => $row['PAYROLL_GROUP_DESC'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
                        case 'attendance adjustment':
                            $response[] = array(
                                'EMPLOYEE_ID' => $row['EMPLOYEE_ID'],
                                'ATTENDANCE_ID' => $row['ATTENDANCE_ID'],
                                'TIME_IN_DATE' => $row['TIME_IN_DATE'],
                                'TIME_IN_ORG' => $row['TIME_IN_ORG'],
                                'TIME_IN_ADJ' => $row['TIME_IN_ADJ'],
                                'TIME_OUT_DATE_ORG' => $row['TIME_OUT_DATE_ORG'],
                                'TIME_OUT_DATE_ADJ' => $row['TIME_OUT_DATE_ADJ'],
                                'TIME_OUT_ORG' => $row['TIME_OUT_ORG'],
                                'TIME_OUT_ADJ' => $row['TIME_OUT_ADJ'],
                                'STATUS' => $row['STATUS'],
                                'ATTACHMENT' => $row['ATTACHMENT'],
                                'REASON' => $row['REASON'],
                                'FILE_DATE' => $row['FILE_DATE'],
                                'FILE_TIME' => $row['FILE_TIME'],
                                'DECISION_DATE' => $row['DECISION_DATE'],
                                'DECISION_TIME' => $row['DECISION_TIME'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
                        case 'telephone log':
                            $response[] = array(
                                'EMPLOYEE_ID' => $row['EMPLOYEE_ID'],
                                'INITIAL_CALL_DATE' => $row['INITIAL_CALL_DATE'],
                                'INITIAL_CALL_TIME' => $row['INITIAL_CALL_TIME'],
                                'ACTUAL_CALL_DATE' => $row['ACTUAL_CALL_DATE'],
                                'ACTUAL_CALL_TIME' => $row['ACTUAL_CALL_TIME'],
                                'ACTUAL_CALL_DURATION' => $row['ACTUAL_CALL_DURATION'],
                                'RECIPIENT' => $row['RECIPIENT'],
                                'TELEPHONE' => $row['TELEPHONE'],
                                'REQUEST_DATE' => $row['REQUEST_DATE'],
                                'REQUEST_TIME' => $row['REQUEST_TIME'],
                                'STATUS' => $row['STATUS'],
                                'DECISION_DATE' => $row['DECISION_DATE'],
                                'DECISION_TIME' => $row['DECISION_TIME'],
                                'DECISION_BY' => $row['DECISION_BY'],
                                'REASON' => $row['REASON'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
                        case 'document management setting':
                            $response[] = array(
                                'MAX_FILE_SIZE' => $row['MAX_FILE_SIZE'],
                                'AUTHORIZATION' => $row['AUTHORIZATION'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
                        case 'document file type':
                            $response[] = array(
                                'FILE_TYPE' => $row['FILE_TYPE'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
                        case 'document':
                            $response[] = array(
                                'DOCUMENT_NAME' => $row['DOCUMENT_NAME'],
                                'AUTHOR' => $row['AUTHOR'],
                                'DEPARTMENT' => $row['DEPARTMENT'],
                                'DOCUMENT_PATH' => $row['DOCUMENT_PATH'],
                                'DOCUMENT_CATEGORY' => $row['DOCUMENT_CATEGORY'],
                                'DOCUMENT_EXTENSION' => $row['DOCUMENT_EXTENSION'],
                                'DOCUMENT_SIZE' => $row['DOCUMENT_SIZE'],
                                'DESCRIPTION' => $row['DESCRIPTION'],
                                'UPLOAD_DATE' => $row['UPLOAD_DATE'],
                                'UPLOAD_TIME' => $row['UPLOAD_TIME'],
                                'PUBLISH' => $row['PUBLISH'],
                                'PUBLISH_BY' => $row['PUBLISH_BY'],
                                'PUBLISH_DATE' => $row['PUBLISH_DATE'],
                                'PUBLISH_TIME' => $row['PUBLISH_TIME'],
                                'RECORD_LOG' => $row['RECORD_LOG'],
                                 'TAGS' => $row['TAGS'] // Add this line to include tags


                            );
                            break;
                        case 'department document permission':
                            $response[] = array(
                                'DEPARTMENT_ID' => $row['DEPARTMENT_ID'],
                                'PERMISSION' => $row['PERMISSION'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
                        case 'employee document permission':
                            $response[] = array(
                                'EMPLOYEE_ID' => $row['EMPLOYEE_ID'],
                                'PERMISSION' => $row['PERMISSION'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
                        case 'transmittal':
                            $response[] = array(
                                'DESCRIPTION' => $row['DESCRIPTION'],
                                'STATUS' => $row['STATUS'],
                                'CURRENT_EMPLOYEE' => $row['CURRENT_EMPLOYEE'],
                                'CURRENT_DEPARTMENT' => $row['CURRENT_DEPARTMENT'],
                                'TRANSMITTED_EMPLOYEE' => $row['TRANSMITTED_EMPLOYEE'],
                                'TRANSMITTED_DEPARTMENT' => $row['TRANSMITTED_DEPARTMENT'],
                                'LAST_TRANSACTION_DATE' => $row['LAST_TRANSACTION_DATE'],
                                'LAST_TRANSACTION_TIME' => $row['LAST_TRANSACTION_TIME'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
                        case 'suggest to win':
                            $response[] = array(
                                'EMPLOYEE_ID' => $row['EMPLOYEE_ID'],
                                'STATUS' => $row['STATUS'],
                                'FILE_PATH' => $row['FILE_PATH'],
                                'TITLE' => $row['TITLE'],
                                'DESCRIPTION' => $row['DESCRIPTION'],
                                'REASON' => $row['REASON'],
                                'BENEFITS' => $row['BENEFITS'],
                                'POST_DATE' => $row['POST_DATE'],
                                'POST_TIME' => $row['POST_TIME'],
                                'DECISION_DATE' => $row['DECISION_DATE'],
                                'DECISION_TIME' => $row['DECISION_TIME'],
                                'VOTING_PERIOD' => $row['VOTING_PERIOD'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
                        case 'training room log':
                            $response[] = array(
                                'EMPLOYEE_ID' => $row['EMPLOYEE_ID'],
                                'START_DATE' => $row['START_DATE'],
                                'START_TIME' => $row['START_TIME'],
                                'END_TIME' => $row['END_TIME'],
                                'REQUEST_DATE' => $row['REQUEST_DATE'],
                                'REQUEST_TIME' => $row['REQUEST_TIME'],
                                'STATUS' => $row['STATUS'],
                                'DECISION_DATE' => $row['DECISION_DATE'],
                                'DECISION_TIME' => $row['DECISION_TIME'],
                                'DECISION_BY' => $row['DECISION_BY'],
                                'OTHER_PARTICIPANT' => $row['OTHER_PARTICIPANT'],
                                'FAN' => $row['FAN'],
                                'AIRCON' => $row['AIRCON'],
                                'LIGHTS' => $row['LIGHTS'],
                                'REASON' => $row['REASON'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
                        case 'training room log participant':
                            $response[] = array(
                                'EMPLOYEE_ID' => $row['EMPLOYEE_ID'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
                        case 'weekly cash flow':
                            $response[] = array(
                                'EMPLOYEE_ID' => $row['EMPLOYEE_ID'],
                                'DEPARTMENT' => $row['DEPARTMENT'],
                                'STATUS' => $row['STATUS'],
                                'START_DATE' => $row['START_DATE'],
                                'END_DATE' => $row['END_DATE'],
                                'APPROVAL_DATE' => $row['APPROVAL_DATE'],
                                'APPROVAL_TIME' => $row['APPROVAL_TIME'],
                                'APPROVAL_BY' => $row['APPROVAL_BY'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
                        case 'weekly cash flow particulars':
                            $response[] = array(
                                'WCF_ID' => $row['WCF_ID'],
                                'DETAILS' => $row['DETAILS'],
                                'WCF_TYPE' => $row['WCF_TYPE'],
                                'LOAN_WCF_TYPE' => $row['LOAN_WCF_TYPE'],
                                'MONDAY' => $row['MONDAY'],
                                'TUESDAY' => $row['TUESDAY'],
                                'WEDNESDAY' => $row['WEDNESDAY'],
                                'THURSDAY' => $row['THURSDAY'],
                                'FRIDAY' => $row['FRIDAY'],
                                'TOTAL' => $row['TOTAL'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
                        case 'ticket':
                            $response[] = array(
                                'REQUESTER' => $row['REQUESTER'],
                                'DEPARTMENT' => $row['DEPARTMENT'],
                                'CATEGORY' => $row['CATEGORY'],
                                'ASSIGNED_DEPARTMENT' => $row['ASSIGNED_DEPARTMENT'],
                                'ASSIGNED_EMPLOYEE' => $row['ASSIGNED_EMPLOYEE'],
                                'SUBJECT' => $row['SUBJECT'],
                                'DESCRIPTION' => $row['DESCRIPTION'],
                                'PRIORITY' => $row['PRIORITY'],
                                'STATUS' => $row['STATUS'],
                                'DUE_DATE' => $row['DUE_DATE'],
                                'DUE_TIME' => $row['DUE_TIME'],
                                'CREATED_DATE' => $row['CREATED_DATE'],
                                'CREATED_TIME' => $row['CREATED_TIME'],
                                'AUTO_ACCEPT_DATE' => $row['AUTO_ACCEPT_DATE'],
                                'AUTO_ACCEPT_TIME' => $row['AUTO_ACCEPT_TIME'],
                                'ACCEPTED_DATE' => $row['ACCEPTED_DATE'],
                                'ACCEPTED_TIME' => $row['ACCEPTED_TIME'],
                                'SOLVED_DATE' => $row['SOLVED_DATE'],
                                'SOLVED_TIME' => $row['SOLVED_TIME'],
                                'CLOSED_DATE' => $row['CLOSED_DATE'],
                                'CLOSED_TIME' => $row['CLOSED_TIME'],
                                'AUTO_CLOSE_DATE' => $row['AUTO_CLOSE_DATE'],
                                'AUTO_CLOSE_TIME' => $row['AUTO_CLOSE_TIME'],
                                'AUTO_CLOSE_REASON' => $row['AUTO_CLOSE_REASON'],
                                'DECISION_DATE' => $row['DECISION_DATE'],
                                'DECISION_TIME' => $row['DECISION_TIME'],
                                'REJECTION_REASON' => $row['REJECTION_REASON'],
                                'CANCELLATION_REASON' => $row['CANCELLATION_REASON'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
                        case 'ticket attachment':
                            $response[] = array(
                                'TICKET_ID' => $row['TICKET_ID'],
                                'FILE_PATH' => $row['FILE_PATH'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
                        case 'ticket adjustment':
                            $response[] = array(
                                'EMPLOYEE_ID' => $row['EMPLOYEE_ID'],
                                'TICKET_ID' => $row['TICKET_ID'],
                                'STATUS' => $row['STATUS'],
                                'ASSIGNED_EMPLOYEE_ORG' => $row['ASSIGNED_EMPLOYEE_ORG'],
                                'ASSIGNED_EMPLOYEE_ADJ' => $row['ASSIGNED_EMPLOYEE_ADJ'],
                                'CATEGORY_ORG' => $row['CATEGORY_ORG'],
                                'CATEGORY_ADJ' => $row['CATEGORY_ADJ'],
                                'SUBJECT_ORG' => $row['SUBJECT_ORG'],
                                'SUBJECT_ADJ' => $row['SUBJECT_ADJ'],
                                'DESCRIPTION_ORG' => $row['DESCRIPTION_ORG'],
                                'DESCRIPTION_ADJ' => $row['DESCRIPTION_ADJ'],
                                'PRIORITY_ORG' => $row['PRIORITY_ORG'],
                                'PRIORITY_ADJ' => $row['PRIORITY_ADJ'],
                                'DUE_DATE_ORG' => $row['DUE_DATE_ORG'],
                                'DUE_DATE_ADJ' => $row['DUE_DATE_ADJ'],
                                'DUE_TIME_ORG' => $row['DUE_TIME_ORG'],
                                'DUE_TIME_ADJ' => $row['DUE_TIME_ADJ'],
                                'REASON' => $row['REASON'],
                                'REQUEST_DATE' => $row['REQUEST_DATE'],
                                'REQUEST_TIME' => $row['REQUEST_TIME'],
                                'DECISION_DATE' => $row['DECISION_DATE'],
                                'DECISION_TIME' => $row['DECISION_TIME'],
                                'DECISION_BY' => $row['DECISION_BY'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
                        case 'notification':
                            $response[] = array(
                                'NOTIFICATION_FROM' => $row['NOTIFICATION_FROM'],
                                'NOTIFICATION_TO' => $row['NOTIFICATION_TO'],
                                'STATUS' => $row['STATUS'],
                                'NOTIFICATION_TITLE' => $row['NOTIFICATION_TITLE'],
                                'NOTIFICATION' => $row['NOTIFICATION'],
                                'LINK' => $row['LINK'],
                                'NOTIFICATION_DATE' => $row['NOTIFICATION_DATE'],
                                'NOTIFICATION_TIME' => $row['NOTIFICATION_TIME'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
                        case 'meeting':
                            $response[] = array(
                                'AUTHOR' => $row['AUTHOR'],
                                'DEPARTMENT' => $row['DEPARTMENT'],
                                'TITLE' => $row['TITLE'],
                                'PRESIDER' => $row['PRESIDER'],
                                'NOTED_BY' => $row['NOTED_BY'],
                                'MEETING_DATE' => $row['MEETING_DATE'],
                                'START_TIME' => $row['START_TIME'],
                                'END_TIME' => $row['END_TIME'],
                                'MEETING_TYPE' => $row['MEETING_TYPE'],
                                'PREVIOUS_MEETING' => $row['PREVIOUS_MEETING'],
                                'STATUS' => $row['STATUS'],
                                'DECISION_DATE' => $row['DECISION_DATE'],
                                'DECISION_TIME' => $row['DECISION_TIME'],
                                'DECISION_BY' => $row['DECISION_BY'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
                        case 'meeting attendees':
                            $response[] = array(
                                'EMPLOYEE_ID' => $row['EMPLOYEE_ID'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
                        case 'meeting absentees':
                            $response[] = array(
                                'EMPLOYEE_ID' => $row['EMPLOYEE_ID'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
                        case 'meeting permission':
                            $response[] = array(
                                'EMPLOYEE_ID' => $row['EMPLOYEE_ID'],
                                'PERMISSION' => $row['PERMISSION'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
                        case 'meeting task':
                            $response[] = array(
                                'AGENDA' => $row['AGENDA'],
                                'MEETING_ID' => $row['MEETING_ID'],
                                'TASK' => $row['TASK'],
                                'EMPLOYEE_ID' => $row['EMPLOYEE_ID'],
                                'DEPARTMENT' => $row['DEPARTMENT'],
                                'STATUS' => $row['STATUS'],
                                'DUE_DATE_TYPE' => $row['DUE_DATE_TYPE'],
                                'DUE_DATE' => $row['DUE_DATE'],
                                'NEW_DUE_DATE' => $row['NEW_DUE_DATE'],
                                'PREVIOUS_MEETING' => $row['PREVIOUS_MEETING'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
                        case 'meeting other matters':
                            $response[] = array(
                                'MEETING_ID' => $row['MEETING_ID'],
                                'OTHER_MATTERS' => $row['OTHER_MATTERS'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
                        case 'training':
                            $response[] = array(
                                'EMPLOYEE_ID' => $row['EMPLOYEE_ID'],
                                'TITLE' => $row['TITLE'],
                                'DETAILS' => $row['DETAILS'],
                                'TRAINING_TYPE' => $row['TRAINING_TYPE'],
                                'STATUS' => $row['STATUS'],
                                'TRAINING_DATE' => $row['TRAINING_DATE'],
                                'START_TIME' => $row['START_TIME'],
                                'END_TIME' => $row['END_TIME'],
                                'DECISION_DATE' => $row['DECISION_DATE'],
                                'DECISION_TIME' => $row['DECISION_TIME'],
                                'DECISION_BY' => $row['DECISION_BY'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
                               case 'overtime':
                            $response[] = array(
                                'EMPLOYEE_ID' => $row['EMPLOYEE_ID'],
                                'TITLE' => $row['TITLE'],
                                'HOLIDAY_TYPE' => $row['HOLIDAY_TYPE'],
                                'REASON' => $row['REASON'],
                                'STATUS' => $row['STATUS'],
                                'OVERTIME_DATE' => $row['OVERTIME_DATE'],
                                'START_TIME' => $row['START_TIME'],
                                'END_TIME' => $row['END_TIME'],
                                'DECISION_DATE' => $row['DECISION_DATE'],
                                'DECISION_TIME' => $row['DECISION_TIME'],
                                'DECISION_BY' => $row['DECISION_BY'],
                            );
                            break;

                        case 'training attendees':
                            $response[] = array(
                                'EMPLOYEE_ID' => $row['EMPLOYEE_ID'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
						case 'car search parameter':
                            $response[] = array(
                                'PARAMETER_ID' => $row['PARAMETER_ID'],
                                'PARAMETER_CODE' => $row['PARAMETER_CODE'],
                                'CATEGORY_TYPE' => $row['CATEGORY_TYPE'],
                                'PARAMETER_VALUE' => $row['PARAMETER_VALUE'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
                        case 'price index item':
                            $response[] = array(
                                'BRAND' => $row['BRAND'],
                                'MODEL' => $row['MODEL'],
                                'VARIANT' => $row['VARIANT'],
                                'ENGINE_SIZE' => $row['ENGINE_SIZE'],
                                'GAS_TYPE' => $row['GAS_TYPE'],
                                'TRANSMISSION' => $row['TRANSMISSION'],
                                'DRIVE_TRAIN' => $row['DRIVE_TRAIN'],
                                'BODY_TYPE' => $row['BODY_TYPE'],
                                'SEATING_CAPACITY' => $row['SEATING_CAPACITY'],
                                'CAMSHAFT_PROFILE' => $row['CAMSHAFT_PROFILE'],
                                'COLOR_TYPE' => $row['COLOR_TYPE'],
                                'AIRCON_TYPE' => $row['AIRCON_TYPE'],
                                'OTHER_INFORMATION' => $row['OTHER_INFORMATION'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
                        case 'price index amount adjustment':
                            $response[] = array(
                                'ITEM_ID' => $row['ITEM_ID'],
                                'YEAR_MODEL' => $row['YEAR_MODEL'],
                                'INITIAL_ITEM_VALUE' => $row['INITIAL_ITEM_VALUE'],
                                'PROPOSED_ITEM_VALUE' => $row['PROPOSED_ITEM_VALUE'],
                                'STATUS' => $row['STATUS'],
                                'REQUEST_DATE' => $row['REQUEST_DATE'],
                                'REQUEST_TIME' => $row['REQUEST_TIME'],
                                'REQUEST_BY' => $row['REQUEST_BY'],
                                'DECISION_DATE' => $row['DECISION_DATE'],
                                'DECISION_TIME' => $row['DECISION_TIME'],
                                'DECISION_BY' => $row['DECISION_BY'],
                                'DECISION_REASON' => $row['DECISION_REASON'],
                                'RECORD_LOG' => $row['RECORD_LOG']
                            );
                            break;
                        default:
                            $response = array();
                    }
                }

                return $response;
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------


    # -------------------------------------------------------------
    #
    # Name       : get_data_details_two_parameter
    # Purpose    : Returns the details data with two parameters
    #
    # Returns    : Array
    #
    # -------------------------------------------------------------
    public function get_data_details_two_parameter($type, $parameter1, $parameter2){
        if ($this->databaseConnection()) {

            switch ($type) {
                case 'system code':
                    $query = 'SELECT SYSTEM_DESC, RECORD_LOG FROM tblsystemcode WHERE SYSTEM_TYPE = :parameter1 AND SYSTEM_CODE = :parameter2';
                    break;
                case 'leave entitlement':
                    $query = 'SELECT LEAVE_TYPE, LEAVE_ENTITLEMENT_ID, NO_LEAVES, ACQUIRED_NO_LEAVES, START_DATE, END_DATE, RECORD_LOG FROM tblleaveentitlement WHERE (LEAVE_ENTITLEMENT_ID = :parameter1 OR LEAVE_TYPE = :parameter1) AND EMPLOYEE_ID = :parameter2';
                    break;
                case 'available leaves':
                    $query = 'SELECT (NO_LEAVES - ACQUIRED_NO_LEAVES) AS TOTAL FROM tblleaveentitlement WHERE LEAVE_TYPE = :parameter1 AND EMPLOYEE_ID = :parameter2';
                    break;
                case 'employee leave':
                    $query = 'SELECT LEAVE_TYPE, LEAVE_DATE, START_TIME, END_TIME, REASON, STATUS, DECISION_DATE, DECISION_TIME, REJECTION_REASON, FILED_BY, FILE_DATE, FILE_TIME, DECISION_BY, RECORD_LOG FROM tblleave WHERE LEAVE_ID = :parameter1 AND EMPLOYEE_ID = :parameter2';
                    break;
                case 'employee attendance log':
                    $query = 'SELECT TIME_IN_DATE, LOCKED, TIME_IN, TIME_IN_BY, TIME_IN_IP, TIME_IN_LAT, TIME_IN_LONG, TIME_OUT_DATE, TIME_OUT, TIME_OUT_BY, TIME_OUT_IP, TIME_OUT_LAT, TIME_OUT_LONG, ATTACHMENT, REMARKS, RECORD_LOG FROM tblattendancerecord WHERE ATTENDANCE_ID = :parameter1 AND EMPLOYEE_ID = :parameter2';
                    break;
                case 'payroll specification deduction amount':
                    $query = 'SELECT TIME_IN_DATE, TIME_IN, TIME_IN_BY, TIME_IN_IP, TIME_IN_LAT, TIME_IN_LONG, TIME_OUT_DATE, TIME_OUT, TIME_OUT_BY, TIME_OUT_IP, TIME_OUT_LAT, TIME_OUT_LONG, REMARKS, RECORD_LOG FROM tblattendancerecord WHERE ATTENDANCE_ID = :parameter1 AND EMPLOYEE_ID = :parameter2';
                    break;
                case 'office shift':
                    $query = 'SELECT DAY_OFF, TIME_IN, TIME_OUT, LATE_MARK, START_LUNCH_BREAK, END_LUNCH_BREAK, HALF_DAY_MARK, RECORD_LOG FROM tblofficeshift WHERE EMPLOYEE_ID = :parameter1 AND DTR_DAY = :parameter2';
                    break;
                case 'payroll':
                    $query = 'SELECT PAYROLL_START_DATE, PAYROLL_END_DATE, STATUS, NO_HOURS, GROSS, NET, DEDUCTIONS, WITHHOLDING_TAX, LATE, EARLY_LEAVING, OVERTIME, ABSENT, ALLOWANCE, OTHER_INCOME, GENERATED_DATE, GENERATED_BY, REMARKS, BANK_REFERENCE, PAY_DATE, REVERSAL_DATE, PAY_DATE, REVERSAL_DATE, RECORD_LOG FROM tblpayroll WHERE PAYROLL_ID = :parameter1 AND EMPLOYEE_ID = :parameter2';
                    break;
                case 'leave date':
                    $query = 'SELECT LEAVE_ID, LEAVE_TYPE, START_TIME, END_TIME, REASON, STATUS, DECISION_DATE, DECISION_TIME, REJECTION_REASON, FILED_BY, FILE_DATE, FILE_TIME, DECISION_BY, RECORD_LOG FROM tblleave WHERE EMPLOYEE_ID = :parameter1 AND LEAVE_DATE = :parameter2';
                    break;
                case 'suggest to win vote':
                    $query = 'SELECT VOTE_ID, SATISFACTION, QUALITY, INNOVATION, FEASIBILITY, TOTAL, VOTE_DATE, VOTE_TIME, REMARKS, RECORD_LOG FROM tblstwvote WHERE STW_ID = :parameter1 AND EMPLOYEE_ID = :parameter2';
                    break;
                case 'email recipient':
                    $query = 'SELECT EMAIL, RECORD_LOG FROM tblemailrecipient WHERE NOTIFICATION_ID = :parameter1 AND RECIPIENT_ID = :parameter2';
                    break;
                case 'training report':
                    $query = 'SELECT LEARNINGS, COMMENTS, RECORD_LOG FROM tbltrainingreport WHERE TRAINING_ID = :parameter1 AND EMPLOYEE_ID = :parameter2';
                    break;
				 case 'price index amount':
                    $query = 'SELECT ITEM_VALUE, CREATED_DATE, CREATED_TIME, CREATED_BY, LAST_UPDATE_DATE, LAST_UPDATE_TIME, LAST_UPDATE_BY, RECORD_LOG FROM tblpriceindexitemvalue WHERE ITEM_ID = :parameter1 AND YEAR_MODEL = :parameter2';
                    break;
                case 'car search parameter value':
                    $query = "SELECT PARAMETER_CODE FROM tblcarparameter WHERE CATEGORY_TYPE = :parameter1 AND PARAMETER_VALUE LIKE CONCAT('%', :parameter2, '%')";
                    break;
                default:
                  $query = '';
            }

            $sql = $this->db_connection->prepare($query);
            $sql->bindParam(':parameter1', $parameter1);
            $sql->bindParam(':parameter2', $parameter2);

            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    $row = $sql->fetch();

                    switch ($type) {
                        case 'system code':
                            $response[] = array(
                                'SYSTEM_DESC' => trim($row['SYSTEM_DESC']),
                                'RECORD_LOG' => trim($row['RECORD_LOG'])
                            );
                            break;
                        case 'leave entitlement':
                            $response[] = array(
                                'LEAVE_TYPE' => trim($row['LEAVE_TYPE']),
                                'LEAVE_ENTITLEMENT_ID' => trim($row['LEAVE_ENTITLEMENT_ID']),
                                'NO_LEAVES' => $row['NO_LEAVES'],
                                'ACQUIRED_NO_LEAVES' => trim($row['ACQUIRED_NO_LEAVES']),
                                'START_DATE' => trim($row['START_DATE']),
                                'END_DATE' => trim($row['END_DATE']),
                                'RECORD_LOG' => trim($row['RECORD_LOG'])
                            );
                            break;
                        case 'available leaves':
                            $response[] = array(
                                'TOTAL' => trim($row['TOTAL'])
                            );
                            break;
                        case 'employee leave':
                            $response[] = array(
                                'LEAVE_TYPE' => trim($row['LEAVE_TYPE']),
                                'LEAVE_DATE' => trim($row['LEAVE_DATE']),
                                'START_TIME' => trim($row['START_TIME']),
                                'END_TIME' => trim($row['END_TIME']),
                                'REASON' => trim($row['REASON']),
                                'STATUS' => trim($row['STATUS']),
                                'DECISION_DATE' => trim($row['DECISION_DATE']),
                                'DECISION_TIME' => trim($row['DECISION_TIME']),
                                'REJECTION_REASON' => trim($row['REJECTION_REASON']),
                                'FILED_BY' => trim($row['FILED_BY']),
                                'FILE_DATE' => trim($row['FILE_DATE']),
                                'FILE_TIME' => trim($row['FILE_TIME']),
                                'DECISION_BY' => trim($row['DECISION_BY']),
                                'RECORD_LOG' => trim($row['RECORD_LOG'])
                            );
                            break;
                        case 'employee attendance log':
                            $response[] = array(
                                'LOCKED' => trim($row['LOCKED']),
                                'TIME_IN_DATE' => trim($row['TIME_IN_DATE']),
                                'TIME_IN' => trim($row['TIME_IN']),
                                'TIME_IN_BY' => trim($row['TIME_IN_BY']),
                                'TIME_IN_IP' => trim($row['TIME_IN_IP']),
                                'TIME_IN_LAT' => trim($row['TIME_IN_LAT']),
                                'TIME_IN_LONG' => trim($row['TIME_IN_LONG']),
                                'TIME_OUT_DATE' => trim($row['TIME_OUT_DATE']),
                                'TIME_OUT' => trim($row['TIME_OUT']),
                                'TIME_OUT_BY' => trim($row['TIME_OUT_BY']),
                                'TIME_OUT_IP' => trim($row['TIME_OUT_IP']),
                                'TIME_OUT_LAT' => trim($row['TIME_OUT_LAT']),
                                'TIME_OUT_LONG' => trim($row['TIME_OUT_LONG']),
                                'ATTACHMENT' => trim($row['ATTACHMENT']),
                                'REMARKS' => trim($row['REMARKS']),
                                'RECORD_LOG' => trim($row['RECORD_LOG'])
                            );
                            break;
                        case 'office shift':
                            $response[] = array(
                                'DAY_OFF' => trim($row['DAY_OFF']),
                                'TIME_IN' => trim($row['TIME_IN']),
                                'TIME_OUT' => trim($row['TIME_OUT']),
                                'LATE_MARK' => trim($row['LATE_MARK']),
                                'START_LUNCH_BREAK' => trim($row['START_LUNCH_BREAK']),
                                'END_LUNCH_BREAK' => trim($row['END_LUNCH_BREAK']),
                                'HALF_DAY_MARK' => trim($row['HALF_DAY_MARK']),
                                'RECORD_LOG' => trim($row['RECORD_LOG'])
                            );
                            break;
                        case 'payroll':
                            $response[] = array(
                                'PAYROLL_START_DATE' => trim($row['PAYROLL_START_DATE']),
                                'PAYROLL_END_DATE' => trim($row['PAYROLL_END_DATE']),
                                'STATUS' => trim($row['STATUS']),
                                'NO_HOURS' => trim($row['NO_HOURS']),
                                'GROSS' => trim($row['GROSS']),
                                'NET' => trim($row['NET']),
                                'DEDUCTIONS' => trim($row['DEDUCTIONS']),
                                'WITHHOLDING_TAX' => trim($row['WITHHOLDING_TAX']),
                                'LATE' => trim($row['LATE']),
                                'EARLY_LEAVING' => trim($row['EARLY_LEAVING']),
                                'OVERTIME' => trim($row['OVERTIME']),
                                'ABSENT' => trim($row['ABSENT']),
                                'ALLOWANCE' => trim($row['ALLOWANCE']),
                                'OTHER_INCOME' => trim($row['OTHER_INCOME']),
                                'GENERATED_DATE' => trim($row['GENERATED_DATE']),
                                'GENERATED_BY' => trim($row['GENERATED_BY']),
                                'REMARKS' => trim($row['REMARKS']),
                                'BANK_REFERENCE' => trim($row['BANK_REFERENCE']),
                                'PAY_DATE' => trim($row['PAY_DATE']),
                                'REVERSAL_DATE' => trim($row['REVERSAL_DATE']),
                                'RECORD_LOG' => trim($row['RECORD_LOG'])
                            );
                            break;
                        case 'leave date':
                            $response[] = array(
                                'LEAVE_TYPE' => trim($row['LEAVE_TYPE']),
                                'LEAVE_ID' => trim($row['LEAVE_ID']),
                                'START_TIME' => trim($row['START_TIME']),
                                'END_TIME' => trim($row['END_TIME']),
                                'REASON' => trim($row['REASON']),
                                'STATUS' => trim($row['STATUS']),
                                'DECISION_DATE' => trim($row['DECISION_DATE']),
                                'DECISION_TIME' => trim($row['DECISION_TIME']),
                                'REJECTION_REASON' => trim($row['REJECTION_REASON']),
                                'FILED_BY' => trim($row['FILED_BY']),
                                'FILE_DATE' => trim($row['FILE_DATE']),
                                'FILE_TIME' => trim($row['FILE_TIME']),
                                'DECISION_BY' => trim($row['DECISION_BY']),
                                'RECORD_LOG' => trim($row['RECORD_LOG'])
                            );
                            break;
                        case 'suggest to win vote':
                            $response[] = array(
                                'VOTE_ID' => trim($row['VOTE_ID']),
                                'SATISFACTION' => trim($row['SATISFACTION']),
                                'QUALITY' => trim($row['QUALITY']),
                                'INNOVATION' => trim($row['INNOVATION']),
                                'FEASIBILITY' => trim($row['FEASIBILITY']),
                                'TOTAL' => trim($row['TOTAL']),
                                'VOTE_DATE' => trim($row['VOTE_DATE']),
                                'VOTE_TIME' => trim($row['VOTE_TIME']),
                                'REMARKS' => trim($row['REMARKS']),
                                'RECORD_LOG' => trim($row['RECORD_LOG'])
                            );
                            break;
                        case 'email recipient':
                            $response[] = array(
                                'EMAIL' => trim($row['EMAIL']),
                                'RECORD_LOG' => trim($row['RECORD_LOG'])
                            );
                            break;
                        case 'training report':
                            $response[] = array(
                                'LEARNINGS' => trim($row['LEARNINGS']),
                                'COMMENTS' => trim($row['COMMENTS']),
                                'RECORD_LOG' => trim($row['RECORD_LOG'])
                            );
                            break;
						 case 'price index amount':
                            $response[] = array(
                                'ITEM_VALUE' => trim($row['ITEM_VALUE']),
                                'CREATED_DATE' => trim($row['CREATED_DATE']),
                                'CREATED_TIME' => trim($row['CREATED_TIME']),
                                'CREATED_BY' => trim($row['CREATED_BY']),
                                'LAST_UPDATE_DATE' => trim($row['LAST_UPDATE_DATE']),
                                'LAST_UPDATE_TIME' => trim($row['LAST_UPDATE_TIME']),
                                'LAST_UPDATE_BY' => trim($row['LAST_UPDATE_BY']),
                                'RECORD_LOG' => trim($row['RECORD_LOG'])
                            );
                            break;
                        case 'car search parameter value':
                            $response[] = array(
                                'PARAMETER_CODE' => trim($row['PARAMETER_CODE'])
                            );
                            break;
                        default:
                            $response = array();
                    }

                    return $response;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : get_data_details_three_parameter
    # Purpose    : Returns the details data with three parameters
    #
    # Returns    : Array
    #
    # -------------------------------------------------------------
    public function get_data_details_three_parameter($type, $parameter1, $parameter2, $parameter3){
        if ($this->databaseConnection()) {

            switch ($type) {
                case 'deduction amount':
                    $query = 'SELECT DEDUCTION_AMOUNT, RECORD_LOG FROM tbldeductionamount WHERE DEDUCTION_TYPE_ID = :parameter1 AND START_RANGE = :parameter2 AND END_RANGE = :parameter3';
                    break;
                default:
                  $query = '';
            }

            $sql = $this->db_connection->prepare($query);
            $sql->bindParam(':parameter1', $parameter1);
            $sql->bindParam(':parameter2', $parameter2);
            $sql->bindParam(':parameter3', $parameter3);

            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    $row = $sql->fetch();

                    switch ($type) {
                        case 'deduction amount':
                            $response[] = array(
                                'DEDUCTION_AMOUNT' => trim($row['DEDUCTION_AMOUNT']),
                                'RECORD_LOG' => trim($row['RECORD_LOG'])
                            );
                            break;
                        default:
                            $response = array();
                    }

                    return $response;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #   Check functions
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : check_modal_scrollable
    # Purpose    : Check if the modal to be generated
    #              is scrollable or not.
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function check_modal_scrollable($scrollable){
        if($scrollable == '1'){
            return 'modal-dialog-scrollable';
        }
        else{
            return '';
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : check_number
    # Purpose    : Checks the number if empty or 0
    #              return 0 or return number given
    #
    # Returns    : Number
    #
    # -------------------------------------------------------------
    public function check_number($number){
        if(is_numeric($number) && (!empty($number) || $number > 0)){
            return $number;
        }
        else{
            return '0';
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : check_profile_image
    # Purpose    : Checks the profile image
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function check_profile_image($profileimg){
        if(empty($profileimg) || !file_exists($profileimg)){
            return './assets/images/default/avatar-default.png';
        }
        else{
            return $profileimg;
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : check_date
    # Purpose    : Checks the date with different format
    #
    # Returns    : Date
    #
    # -------------------------------------------------------------
    public function check_date($type, $date, $time, $format, $modify, $systemdate, $current_time){
        if($type == 'default'){
            if(!empty($date)){
                return $this->format_date($format, $date, $modify);
            }
            else{
                return $systemdate;
            }
        }
        else if($type == 'empty'){
            if(!empty($date)){
                return $this->format_date($format, $date, $modify);
            }
            else{
                return NULL;
            }
        }
        else if($type == 'na'){
            if(!empty($date)){
                return $this->format_date($format, $date, $modify);
            }
            else{
                return 'N/A';
            }
        }
        else if($type == 'complete'){
            if(!empty($date)){
                return $this->format_date($format, $date, $modify) . ' ' . $time;
            }
            else{
                return 'N/A';
            }
        }
        else if($type == 'encoded'){
            if(!empty($date)){
                return $this->format_date($format, $date, $modify) . ' ' . $time;
            }
            else{
                return 'N/A';
            }
        }
        else if($type == 'date time'){
            if(!empty($date)){
                return $this->format_date($format, $date, $modify) . ' ' . $time;
            }
            else{
                return 'N/A';
            }
        }
        else if($type == 'default time'){
            if(!empty($date)){
                return $time;
            }
            else{
                return $current_time;
            }
        }else if ($type == 'Invalid Dat'){
            if(!empty($date)){
                return null;
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : check_week_day
    # Purpose    : Checks the week day
    #
    # Returns    : Date
    #
    # -------------------------------------------------------------
    public function check_week_day($day){
        if($day == 0) {
            return '7';
        }
        else{
            return $day;
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : check_leave_entitlement_overlap
    # Purpose    : Checks the leave entitlement overlap
    #
    # Returns    : Date
    #
    # -------------------------------------------------------------
    public function check_leave_entitlement_overlap($date, $leave_type, $entitlement_id, $employee_id){
        if ($this->databaseConnection()) {
            $overlap_count = 0;

            $sql = $this->db_connection->prepare('SELECT START_DATE, END_DATE FROM tblleaveentitlement WHERE EMPLOYEE_ID = :employee_id AND LEAVE_TYPE = :leave_type');
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':leave_type', $leave_type);

            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    while($row = $sql->fetch()){
                        $start_date = $row['START_DATE'];
                        $end_date = $row['END_DATE'];

                        if (strtotime($date) >= strtotime($start_date) && strtotime($date) <= strtotime($end_date)){
                            $overlap_count++;
                        }
                    }

                    return $overlap_count;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : check_attendance_clock_out
    # Purpose    : Checks the attendance clock out
    #
    # Returns    : Date
    #
    # -------------------------------------------------------------
    public function check_attendance_clock_out($employee_id){
        if ($this->databaseConnection()) {
            $overlap_count = 0;

            $sql = $this->db_connection->prepare('SELECT ATTENDANCE_ID FROM tblattendancerecord WHERE EMPLOYEE_ID = :employee_id AND (TIME_IN_DATE IS NOT NULL AND TIME_IN IS NOT NULL AND TIME_OUT_DATE IS NULL) LIMIT 1');
            $sql->bindParam(':employee_id', $employee_id);

            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    $row = $sql->fetch();

                    return $row['ATTENDANCE_ID'];
                }
                else{
                    return '';
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : check_deduction_amount_overlap
    # Purpose    : Checks the deduction amount overlap
    #
    # Returns    : Date
    #
    # -------------------------------------------------------------
    public function check_deduction_amount_overlap($range, $deduction_type_id){
        if ($this->databaseConnection()) {
            $overlap_count = 0;

            $sql = $this->db_connection->prepare('SELECT START_RANGE, END_RANGE FROM tbldeductionamount WHERE DEDUCTION_TYPE_ID = :deduction_type_id');
            $sql->bindParam(':deduction_type_id', $deduction_type_id);

            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    while($row = $sql->fetch()){
                        $start_range = $row['START_RANGE'];
                        $end_range = $row['END_RANGE'];

                        if ($range >= $start_range && $range <= $end_range){
                            $overlap_count++;
                        }
                    }

                    return $overlap_count;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : check_payroll_period_overlap
    # Purpose    : Checks the payroll period overlap
    #
    # Returns    : Date
    #
    # -------------------------------------------------------------
    public function check_payroll_period_overlap($employee_id, $date){
        if ($this->databaseConnection()) {
            $overlap_count = 0;

            $sql = $this->db_connection->prepare("SELECT PAYROLL_START_DATE, PAYROLL_END_DATE, STATUS FROM tblpayroll WHERE EMPLOYEE_ID = :employee_id");
            $sql->bindParam(':employee_id', $employee_id);

            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    while($row = $sql->fetch()){
                        $start_date = $row['PAYROLL_START_DATE'];
                        $end_date = $row['PAYROLL_END_DATE'];
                        $status = $row['STATUS'];

                        if (strtotime($date) >= strtotime($start_date) && strtotime($date) <= strtotime($end_date) && ($status == 0 || $status == 1)){
                            $overlap_count++;
                        }
                    }

                    return $overlap_count;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : check_weekly_cash_flow_overlap
    # Purpose    : Checks the weekly cash flow overlap
    #
    # Returns    : Date
    #
    # -------------------------------------------------------------
    public function check_weekly_cash_flow_overlap($department, $branch, $date){
        if ($this->databaseConnection()) {
            $overlap_count = 0;

            $sql = $this->db_connection->prepare("SELECT START_DATE, END_DATE FROM tblwcf WHERE DEPARTMENT = :department AND BRANCH = :branch");
            $sql->bindParam(':department', $department);
            $sql->bindParam(':branch', $branch);

            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    while($row = $sql->fetch()){
                        $start_date = $row['START_DATE'];
                        $end_date = $row['END_DATE'];

                        if (strtotime($date) >= strtotime($start_date) && strtotime($date) <= strtotime($end_date)){
                            $overlap_count++;
                        }
                    }

                    return $overlap_count;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : check_training_room_log_overlap
    # Purpose    : Checks the training room log overlap
    #
    # Returns    : Date
    #
    # -------------------------------------------------------------
    public function check_training_room_log_overlap($date, $time){
        if ($this->databaseConnection()) {
            $overlap_count = 0;

            $sql = $this->db_connection->prepare("SELECT START_DATE, START_TIME, END_TIME FROM tbltrainingroomlogsheet WHERE STATUS = '1'");

            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    while($row = $sql->fetch()){
                        $start_date = $row['START_DATE'] . ' ' . $row['START_TIME'];
                        $end_date = $row['START_DATE'] . ' ' . $row['END_TIME'];

                        if (strtotime($date . ' ' . $time) >= strtotime($start_date) && strtotime($date . ' ' . $time) <= strtotime($end_date)){
                            $overlap_count++;
                        }
                    }

                    return $overlap_count;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : check_leave_overlap
    # Purpose    : Checks the leave application overlap
    #
    # Returns    : Date
    #
    # -------------------------------------------------------------
    public function check_leave_overlap($employee_id, $date, $time){
        if ($this->databaseConnection()) {
            $overlap_count = 0;

            $sql = $this->db_connection->prepare("SELECT LEAVE_DATE, START_TIME, END_TIME FROM tblleave WHERE STATUS IN ('1', '4') AND EMPLOYEE_ID = :employee_id AND LEAVE_TYPE NOT IN ('LEAVETP8', 'LEAVETP9')");
            $sql->bindParam(':employee_id', $employee_id);

            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    while($row = $sql->fetch()){
                        $start_date = $this->check_date('empty', $row['LEAVE_DATE'], '', 'Y-m-d', '', '', '') . ' ' . $row['START_TIME'];
                        $end_date = $this->check_date('empty', $row['LEAVE_DATE'], '', 'Y-m-d', '', '', '') . ' ' . $row['END_TIME'];

                        if (strtotime($date . ' ' . $time) >= strtotime($start_date) && strtotime($date . ' ' . $time) <= strtotime($end_date)){
                            $overlap_count++;
                        }
                    }

                    return $overlap_count;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : check_end_of_month
    # Purpose    : Checks the date falls in the end of month
    #
    # Returns    : Number
    #
    # -------------------------------------------------------------
    public function check_end_of_month($date){
        # Adds 1 day to date
        $Temp = date('m/d/Y',strtotime('+1 day', strtotime($date)));

        # Get the month of each date
        $tempmonth = date('m', strtotime($Temp));
        $datemonth = date('m', strtotime($date));

        # Check if the months are equal
        if($tempmonth != $datemonth){
            return '1';
        }
        else{
            return '0';
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : check_if_day_off
    # Purpose    : Checks the office shift is day off
    #
    # Returns    : Date
    #
    # -------------------------------------------------------------
    public function check_if_day_off($employee_id, $absent_day){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare('SELECT DAY_OFF FROM tblofficeshift WHERE EMPLOYEE_ID = :employee_id AND DTR_DAY = :absent_day');
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':absent_day', $absent_day);

            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    $row = $sql->fetch();

                    return $row['DAY_OFF'];
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : check_if_holiday
    # Purpose    : Checks if the date is a holiday
    #
    # Returns    : Date
    #
    # -------------------------------------------------------------
    public function check_if_holiday($holiday_date){
        if ($this->databaseConnection()) {
            $total = 0;

            $sql = $this->db_connection->prepare('SELECT HOLIDAY_TYPE FROM tblholiday WHERE HOLIDAY_DATE = :holiday_date');
            $sql->bindParam(':holiday_date', $holiday_date);

            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    $row = $sql->fetch();

                    if($row['HOLIDAY_TYPE'] != 'SPCNONWORKHOL'){
                        $total = 1;
                    }
                    else{
                        $total = 2;
                    }
                }

                return $total;
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : check_if_filed_leave
    # Purpose    : Checks if there is a filed leave
    #
    # Returns    : Date
    #
    # -------------------------------------------------------------
    public function check_if_filed_leave($employee_id, $absent_date){
        if ($this->databaseConnection()) {
            $sql = $this->db_connection->prepare("SELECT COUNT(LEAVE_ID) AS LEAVE_ID FROM tblleave WHERE EMPLOYEE_ID = :employee_id AND LEAVE_DATE = :absent_date AND STATUS NOT IN ('0', '3')");
            $sql->bindParam(':employee_id', $employee_id);
            $sql->bindParam(':absent_date', $absent_date);

            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    $row = $sql->fetch();

                    return $row['LEAVE_ID'];
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : check_attendance_log_validation
    # Purpose    : Checks attendance log validation
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function check_attendance_log_validation($time_in_date, $time_in, $time_out_date, $time_out){
        if(!empty($time_in_date) && !empty($time_in) && !empty($time_out_date) && !empty($time_out)){
            if(strtotime($time_in_date . ' ' . $time_in) > strtotime($time_out_date . ' ' . $time_out)){
                return 'Time-In';
            }
            else if(strtotime($time_out_date . ' ' . $time_out) < strtotime($time_in_date . ' ' . $time_in)){
                return 'Time-Out';
            }
            else{
                return '';
            }
        }
        else{
            return '';
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : check_date_time_validation
    # Purpose    : Checks attendance log validation
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function check_date_time_validation($start_date, $start_time, $end_date, $end_time){
        if(!empty($start_date) && !empty($start_time) && !empty($end_date) && !empty($end_time)){
            if(strtotime($start_date . ' ' . $start_time) > strtotime($end_date . ' ' . $end_time)){
                return 'Start Date';
            }
            else if(strtotime($end_date . ' ' . $end_time) < strtotime($start_date . ' ' . $start_time)){
                return 'End Date';
            }
            else{
                return '';
            }
        }
        else{
            return '';
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #   Generate data
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : generate_page
    # Purpose    : Generates page options
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function generate_page(){
        if ($this->databaseConnection()) {
            $option = '';

            $sql = $this->db_connection->prepare('SELECT PAGE_ID, PAGE_NAME FROM tblpage ORDER BY PAGE_NAME');

            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    while($row = $sql->fetch()){
                        $page_id = trim($row['PAGE_ID']);
                        $page_name = trim($row['PAGE_NAME']);

                        $option .= "<option value='". $page_id ."'>". $page_name ."</option>";
                    }

                    return $option;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : generate_permission_check_box
    # Purpose    : Generates permission check box
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function generate_permission_check_box(){
        if ($this->databaseConnection()) {
            $counter = 0;
            $column = '';

            $sql = $this->db_connection->prepare('SELECT PAGE_ID, PAGE_NAME FROM tblpage ORDER BY PAGE_NAME');

            if($sql->execute()){
                while($row = $sql->fetch()){
                    $page_id = trim($row['PAGE_ID']);
                    $page_name = trim($row['PAGE_NAME']);

                    $column .= '<div class="col-lg-3">
                                    <div class="form-group">
                                        <div class="form-check form-switch mb-3">
                                            <input class="form-check-input role-page '. $page_id .'-parent" data-page="'. $page_id .'" type="checkbox" id="'. $page_id .'" value="'. $page_id .'">
                                            <label class="form-check-label" for="'. $page_id .'"><b>'. $page_name .'</b></label>
                                        </div>';

                    $sql2 = $this->db_connection->prepare('SELECT PERMISSION_ID, PERMISSION_DESC FROM tblpermission WHERE PAGE_ID = :page_id ORDER BY PERMISSION_DESC');
                    $sql2->bindParam(':page_id', $page_id);

                    if($sql2->execute()){
                        while($res = $sql2->fetch()){
                            $permission_id = trim($res['PERMISSION_ID']);
                            $permission_desc = trim($res['PERMISSION_DESC']);

                            $column .= '<div class="form-check form-switch mb-3">
                                            <input class="form-check-input role-permissions '. $page_id .'-child" data-page="'. $page_id .'" type="checkbox" id="'. $permission_id .'" value="'. $permission_id .'">
                                            <label class="form-check-label" for="'. $permission_id .'">'. $permission_desc .'</label>
                                        </div>';
                        }
                    }

                    $column .= '</div>
                        </div>';
                }

                return $column;
            }
            else{
                return $sql->errorInfo();
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : generate_user_check_box
    # Purpose    : Generates role check box
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function generate_user_check_box(){
        if ($this->databaseConnection()) {
            $counter = 0;
            $column = '';

            $sql = $this->db_connection->prepare('SELECT DEPARTMENT_ID, DEPARTMENT FROM tbldepartment ORDER BY DEPARTMENT');

            if($sql->execute()){
                while($row = $sql->fetch()){
                    $department_id = trim($row['DEPARTMENT_ID']);
                    $department = trim($row['DEPARTMENT']);

                    $sql2 = $this->db_connection->prepare("SELECT USERNAME, FIRST_NAME, LAST_NAME, MIDDLE_NAME, SUFFIX FROM tblemployeeprofile WHERE EMPLOYMENT_STATUS = '1' AND DEPARTMENT = :department_id AND EMPLOYEE_ID NOT LIKE 'USER-%' ORDER BY FIRST_NAME");
                    $sql2->bindParam(':department_id', $department_id);

                    if($sql2->execute()){
                        $count = $sql2->rowCount();

                        if($count > 0){
                            $column .= '<div class="col-lg-3">
                            <div class="form-group">
                                <div class="form-check form-switch mb-3">
                                    <input class="form-check-input role-department '. $department_id .'-parent" data-department="'. $department_id .'" type="checkbox" id="'. $department_id .'" value="'. $department_id .'">
                                    <label class="form-check-label" for="'. $department_id .'"><b>'. $department .'</b></label>
                                </div>';

                            while($res = $sql2->fetch()){
                                $employee_username = trim($res['USERNAME']);
                                $first_name = trim($res['FIRST_NAME']);
                                $last_name = trim($res['LAST_NAME']);
                                $middle_name = trim($res['MIDDLE_NAME']);
                                $suffix = trim($res['SUFFIX']);
                                $fullname = $this->get_full_name($first_name, $middle_name, $last_name, $suffix)[0]['REVERSE_FULL_NAME'];

                                $column .= '<div class="form-check form-switch mb-3">
                                                <input class="form-check-input role-user '. $department_id .'-child" data-department="'. $department_id .'" type="checkbox" id="'. $employee_username .'" value="'. $employee_username .'">
                                                <label class="form-check-label" for="'. $employee_username .'">'. $fullname .'</label>
                                            </div>';
                            }

                            $column .= '</div>
                            </div>';
                        }
                    }
                }

                return $column;
            }
            else{
                return $sql->errorInfo();
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : generate_payroll_group_employee_check_box
    # Purpose    : Generates payroll group employee
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function generate_payroll_group_employee_check_box(){
        if ($this->databaseConnection()) {
            $counter = 0;
            $column = '';

            $sql = $this->db_connection->prepare("SELECT DEPARTMENT_ID, DEPARTMENT FROM tbldepartment WHERE DEPARTMENT_ID IN (SELECT DISTINCT(DEPARTMENT) AS DEPARTMENT FROM tblemployeeprofile WHERE EMPLOYMENT_STATUS = '1' AND EMPLOYEE_ID NOT LIKE 'USER-%' AND EMPLOYEE_ID NOT IN (SELECT EMPLOYEE_ID FROM tblpayrollgroupemployee)) ORDER BY DEPARTMENT");

            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    while($row = $sql->fetch()){
                        $department_id = trim($row['DEPARTMENT_ID']);
                        $department = trim($row['DEPARTMENT']);

                        $column .= '<div class="col-lg-3">
                                        <div class="form-group">
                                            <label><b>'. $department .'</b></label>';

                        $sql2 = $this->db_connection->prepare("SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, MIDDLE_NAME, SUFFIX FROM tblemployeeprofile WHERE EMPLOYMENT_STATUS = '1' AND EMPLOYEE_ID NOT LIKE 'USER-%' AND DEPARTMENT = :department_id AND EMPLOYEE_ID NOT IN (SELECT EMPLOYEE_ID FROM tblpayrollgroupemployee) ORDER BY FIRST_NAME");
                        $sql2->bindParam(':department_id', $department_id);

                        if($sql2->execute()){
                            while($res = $sql2->fetch()){
                                $employee_id = trim($res['EMPLOYEE_ID']);
                                $first_name = trim($res['FIRST_NAME']);
                                $last_name = trim($res['LAST_NAME']);
                                $middle_name = trim($res['MIDDLE_NAME']);
                                $suffix = trim($res['SUFFIX']);
                                $fullname = $this->get_full_name($first_name, $middle_name, $last_name, $suffix)[0]['REVERSE_FULL_NAME'];

                                $column .= '<div class="form-check form-switch mb-3">
                                                <input class="form-check-input payroll-group-employee" type="checkbox" id="'. $employee_id .'" value="'. $employee_id .'">
                                                <label class="form-check-label" for="'. $employee_id .'">'. $fullname .'</label>
                                            </div>';
                            }
                        }

                        $column .= '</div>
                            </div>';
                    }
                }

                return $column;
            }
            else{
                return $sql->errorInfo();
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : generate_year
    # Purpose    : Generates year of dropdown
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function generate_year($start, $end, $sort){
        if ($this->databaseConnection()) {
            $option = '';

            if($sort == 'asc'){
                for($i = $start; $i <= $end; $i++){
                    $option .= '<option value="'. $i .'">'. $i.'</option>';
                }
            }
            else{
                for($i = $start; $i >= $end; $i--){
                    $option .= '<option value="'. $i .'">'. $i.'</option>';
                }
            }

            return $option;
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : generate_system_code_options
    # Purpose    : Generates system code options of dropdown
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function generate_system_code_options(){
        if ($this->databaseConnection()) {
            $option = '';
            $systype = 'SYSTYPE';

            $sql = $this->db_connection->prepare('SELECT SYSTEM_CODE, SYSTEM_DESC FROM tblsystemcode WHERE SYSTEM_TYPE = :systype ORDER BY SYSTEM_DESC');
            $sql->bindParam(':systype', $systype);

            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    while($row = $sql->fetch()){
                        $system_code = trim($row['SYSTEM_CODE']);
                        $system_desc = trim($row['SYSTEM_DESC']);

                        $option .= "<option value='". $system_code ."'>". $system_desc ."</option>";
                    }

                    return $option;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : generate_system_options
    # Purpose    : Generates system options of dropdown
    #              based on system type
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function generate_system_options($system_type){
        if ($this->databaseConnection()) {
            $option = '';

            $sql = $this->db_connection->prepare('SELECT SYSTEM_CODE, SYSTEM_DESC FROM tblsystemcode WHERE SYSTEM_TYPE = :system_type ORDER BY SYSTEM_DESC');
            $sql->bindParam(':system_type', $system_type);

            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    while($row = $sql->fetch()){
                        $system_code = trim($row['SYSTEM_CODE']);
                        $system_desc = trim($row['SYSTEM_DESC']);

                        if($system_type == 'CURRENCY'){
                            $option .= "<option value='". $system_code ."'>". $system_desc . " (" . $system_code . ")" ."</option>";
                        }
                        else if($system_type == 'DATEFORMAT' || $system_type == 'TIMEFORMAT'){
                            $option .= "<option value='". $system_code ."'>". $system_desc . " (" . date($system_code) . ")" ."</option>";
                        }
                        //this condition will exclude the 300KABOVE and 300KBELOW , date added : 05/09/2023 2:30 pm
                        else if($system_type == "WCFLOANTYPE"){

                            if($system_code == "300KABOVE" || $system_code == "300KBELOW" ){
                               //no action
                            }else{
                                $option .= "<option value='". $system_code ."'>". $system_desc ."</option>";
                            }
                        }
                        else{
                            $option .= "<option value='". $system_code ."'>". $system_desc ."</option>";
                        }
                    }

                    return $option;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : generate_phone_code_options
    # Purpose    : Generates phone code options of dropdown
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function generate_phone_code_options(){
        if ($this->databaseConnection()) {
            $option = '';

            $sql = $this->db_connection->prepare('SELECT PHONE_CODE, ISO2 FROM tblcountry WHERE PHONE_CODE IS NOT NULL ORDER BY ISO2');

            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    while($row = $sql->fetch()){
                        $phone_code = trim($row['PHONE_CODE']);
                        $iso2 = trim($row['ISO2']);

                        $option .= "<option value='". $phone_code ."'>+" . $phone_code . " (". $iso2 .")</option>";
                    }

                    return $option;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : generate_country_options
    # Purpose    : Generates country options of dropdown
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function generate_country_options(){
        if ($this->databaseConnection()) {
            $option = '';

            $sql = $this->db_connection->prepare('SELECT COUNTRY_ID, COUNTRY_NAME FROM tblcountry WHERE PHONE_CODE IS NOT NULL ORDER BY COUNTRY_NAME');

            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    while($row = $sql->fetch()){
                        $country_id = trim($row['COUNTRY_ID']);
                        $country_name = trim($row['COUNTRY_NAME']);

                        $option .= "<option value='". $country_id ."'>". $country_name ."</option>";
                    }

                    return $option;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------


     # -------------------------------------------------------------
    #
    # Name       : generate_country_options
    # Purpose    : Generates country options of dropdown
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function generate_insurance_options($type = null, $selected = null){
        if ($this->databaseConnection()) {
            $option = '';

            $sql = $this->db_connection->prepare('SELECT SYSTEM_CODE, SYSTEM_DESC FROM tblsystemcode WHERE SYSTEM_TYPE =:parameter');
            $sql->bindParam(':parameter',$type);


            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    while($row = $sql->fetch()){

                        $code = trim($row['SYSTEM_CODE']);
                        $desc = trim($row['SYSTEM_DESC']);

                        if($code == $selected){
                            $option .= "<option value='". $code ."' selected>". $desc ."</option>";
                        }else{
                            $option .= "<option value='". $code ."'>". $desc ."</option>";
                        }

                    }

                    return $option;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }

    # -------------------------------------------------------------



    # -------------------------------------------------------------
    #
    # Name       : generate_role_options
    # Purpose    : Generates role options of dropdown
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function generate_role_options(){
        if ($this->databaseConnection()) {
            $option = '';

            $sql = $this->db_connection->prepare('SELECT ROLE_ID, ROLE_DESC FROM tblrole ORDER BY ROLE_DESC');

            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    while($row = $sql->fetch()){
                        $role_id = trim($row['ROLE_ID']);
                        $role_desc = trim($row['ROLE_DESC']);

                        $option .= "<option value='". $role_id ."'>". $role_desc ."</option>";
                    }

                    return $option;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------



    # -------------------------------------------------------------
    #
    # Name       : generate_pr_requested_by_options
    # Purpose    : Generates role options of dropdown
    #
    # Returns    : String
    #
    # -------------------------------------------------------------

    public function generate_pr_requested_by_options($dept,$selected = null){
        if ($this->databaseConnection()) {
            $option = '';

            $sql = $this->db_connection->prepare("select * from tblemployeeprofile as emp WHERE emp.DEPARTMENT = '".$dept."' AND emp.EMPLOYMENT_STATUS = '1'");

            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    while($row = $sql->fetch()){
                        $emp_id = trim($row['EMPLOYEE_ID']);
                        $name = trim($row['LAST_NAME'].', '.$row['FIRST_NAME'].' '. $row['MIDDLE_NAME']);

                        $option .= "<option ".($selected != null || $selected == $emp_id) ? 'selected' : '' ." value='". $emp_id ."'>". $name ."</option>";
                    }

                    return $option;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }


    # -------------------------------------------------------------
    #
    # Name       : generate_department_options
    # Purpose    : Generates department options of dropdown
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function generate_department_options($custom_query = null){
        if ($this->databaseConnection()) {
            $option = '';

            $sql = $this->db_connection->prepare('SELECT DEPARTMENT_ID, DEPARTMENT FROM tbldepartment ORDER BY DEPARTMENT');

            if($custom_query!= null){
                $sql = $this->db_connection->prepare($custom_query);
            }



            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    while($row = $sql->fetch()){
                        $department_id = trim($row['DEPARTMENT_ID']);
                        $department = trim($row['DEPARTMENT']);

                        $option .= "<option value='". $department_id ."'>". $department ."</option>";
                    }

                    return $option;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : generate_inventory_category_options
    # Purpose    : Generates department options of dropdown
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function generate_inventory_category_options($custom_query = null){
        if ($this->databaseConnection()) {
            $option = '';

            $sql = $this->db_connection->prepare('SELECT cat.ITEM_CATEGORY, cat.CATEG_NAME, dhascat.DEPARTMENT_ID FROM tbldepthasitemcategory as dhascat LEFT JOIN tblitemcategory as cat on cat.ITEM_CATEGORY = dhascat.ITEM_CATEGORY');

            if($custom_query!= null){
                $sql = $this->db_connection->prepare($custom_query);
            }

            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    while($row = $sql->fetch()){
                        $id = trim($row['ITEM_CATEGORY']);
                        $name = trim($row['CATEG_NAME']);

                        $option .= "<option value='". $id ."'>". $name ."</option>";
                    }

                    return $option;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------



    # -------------------------------------------------------------
    #
    # Name       : generate_activity_type_options
    # Purpose    : Generates acitity type options of dropdown
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function generate_activity_type_options(){
        if ($this->databaseConnection()) {
            $option = '';

            $sql = $this->db_connection->prepare("SELECT SYSTEM_CODE, SYSTEM_DESC FROM tblsystemcode WHERE SYSTEM_TYPE ='ACTTYPE' ");

            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    while($row = $sql->fetch()){
                        $act_type_id = trim($row['SYSTEM_CODE']);
                        $act_type_desc = trim($row['SYSTEM_DESC']);

                        $option .= "<option value='". $act_type_id ."'>". $act_type_desc ."</option>";
                    }

                    return $option;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------





    # -------------------------------------------------------------
    #
    # Name       : generate_department_with_employee_options
    # Purpose    : Generates department options of dropdown
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function generate_department_with_employee_options(){
        if ($this->databaseConnection()) {
            $option = '';

            $sql = $this->db_connection->prepare('SELECT DEPARTMENT_ID, DEPARTMENT FROM tbldepartment WHERE DEPARTMENT_ID IN (SELECT DISTINCT(DEPARTMENT) AS DEPARTMENT FROM tblemployeeprofile) ORDER BY DEPARTMENT');

            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    while($row = $sql->fetch()){
                        $department_id = trim($row['DEPARTMENT_ID']);
                        $department = trim($row['DEPARTMENT']);

                        $option .= "<option value='". $department_id ."'>". $department ."</option>";
                    }

                    return $option;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : generate_designation_options
    # Purpose    : Generates designation options of dropdown
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function generate_designation_options(){
        if ($this->databaseConnection()) {
            $option = '';

            $sql = $this->db_connection->prepare('SELECT DESIGNATION_ID, DESIGNATION FROM tbldesignation ORDER BY DESIGNATION');

            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    while($row = $sql->fetch()){
                        $designation_id = trim($row['DESIGNATION_ID']);
                        $designation = trim($row['DESIGNATION']);

                        $option .= "<option value='". $designation_id ."'>". $designation ."</option>";
                    }

                    return $option;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : generate_branch_options
    # Purpose    : Generates branch options of dropdown
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function generate_branch_options(){
        if ($this->databaseConnection()) {
            $option = '';

            $sql = $this->db_connection->prepare('SELECT BRANCH_ID, BRANCH FROM tblbranch ORDER BY BRANCH');

            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    while($row = $sql->fetch()){
                        $branch_id = trim($row['BRANCH_ID']);
                        $branch = trim($row['BRANCH']);

                        $option .= "<option value='". $branch_id ."'>". $branch ."</option>";
                    }

                    return $option;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : generate_country_options
    # Purpose    : Generates timezone options of dropdown
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function generate_timezone(){
        $option = '';
        $n = 425;

        $timezone_identifiers = DateTimeZone::listIdentifiers(DateTimeZone::ALL);

        for($i = 0; $i < $n; $i++) {
            $option .= "<option value='" . $timezone_identifiers[$i] .
                "'>" . $timezone_identifiers[$i] . "</option>";
        }

        return $option;
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : generate_leave_type_options
    # Purpose    : Generates leave type options of dropdown
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function generate_leave_type_options(){
        if ($this->databaseConnection()) {
            $option = '';

            $sql = $this->db_connection->prepare('SELECT LEAVE_TYPE_ID, LEAVE_NAME FROM tblleavetype ORDER BY LEAVE_NAME');

            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    while($row = $sql->fetch()){
                        $leave_type_id = trim($row['LEAVE_TYPE_ID']);
                        $leave_name = trim($row['LEAVE_NAME']);

                        $option .= "<option value='". $leave_type_id ."'>". $leave_name ."</option>";
                    }

                    return $option;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : generate_available_leave_type_options
    # Purpose    : Generates leave type options of dropdown
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function generate_available_leave_type_options($username){
        if ($this->databaseConnection()) {
            $option = '';
            $employee_details = $this->get_data_details_one_parameter('employee profile', $username);
            $employee_id = $employee_details[0]['EMPLOYEE_ID'];

            $sql = $this->db_connection->prepare('SELECT LEAVE_TYPE_ID, LEAVE_NAME FROM tblleavetype WHERE LEAVE_TYPE_ID IN (SELECT LEAVE_TYPE FROM tblleaveentitlement WHERE EMPLOYEE_ID = :employee_id AND NO_LEAVES != ACQUIRED_NO_LEAVES) ORDER BY LEAVE_NAME');
            $sql->bindParam(':employee_id', $employee_id);

            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    while($row = $sql->fetch()){
                        $leave_type_id = trim($row['LEAVE_TYPE_ID']);
                        $leave_name = trim($row['LEAVE_NAME']);

                        $option .= "<option value='". $leave_type_id ."'>". $leave_name ."</option>";
                    }

                    return $option;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : generate_employee_options
    # Purpose    : Generates employee options of dropdown
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function generate_employee_options($selected=null){
        if ($this->databaseConnection()) {
            $option = '';

            $sql = $this->db_connection->prepare("SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, MIDDLE_NAME, SUFFIX FROM tblemployeeprofile WHERE EMPLOYEE_ID NOT LIKE 'USER-%' ORDER BY FIRST_NAME");

            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    while($row = $sql->fetch()){
                        $employee_id = trim($row['EMPLOYEE_ID']);
                        $first_name = trim($row['FIRST_NAME']);
                        $last_name = trim($row['LAST_NAME']);
                        $middle_name = trim($row['MIDDLE_NAME']);
                        $suffix = trim($row['SUFFIX']);
                        $fullname = $this->get_full_name($first_name, $middle_name, $last_name, $suffix)[0]['REVERSE_FULL_NAME'];

                        if($selected!= null && $selected == $employee_id){
                            $option .= "<option selected value='". $employee_id ."'>". $fullname ."</option>";
                        }else{
                            $option .= "<option value='". $employee_id ."'>". $fullname ."</option>";
                        }


                    }

                    return $option;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------




        # -------------------------------------------------------------
    #
    # Name       : generate_employee_options
    # Purpose    : Generates employee options of dropdown
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function generate_employee_options_by_department($selected=null,$dept){
        if ($this->databaseConnection()) {
            $option = '';

            $sql = $this->db_connection->prepare("SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, MIDDLE_NAME, SUFFIX FROM tblemployeeprofile WHERE EMPLOYEE_ID NOT LIKE 'USER-%' AND DEPARTMENT=:dept ORDER BY LAST_NAME DESC");
            $sql->bindParam(':dept', $dept);
            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    while($row = $sql->fetch()){
                        $employee_id = trim($row['EMPLOYEE_ID']);
                        $first_name = trim($row['FIRST_NAME']);
                        $last_name = trim($row['LAST_NAME']);
                        $middle_name = trim($row['MIDDLE_NAME']);
                        $suffix = trim($row['SUFFIX']);
                        $fullname = $this->get_full_name($first_name, $middle_name, $last_name, $suffix)[0]['REVERSE_FULL_NAME'];

                        if($selected!= null && $selected == $employee_id){
                            $option .= "<option selected value='". $employee_id ."'>". $fullname ."</option>";
                        }else{
                            $option .= "<option value='". $employee_id ."'>". $fullname ."</option>";
                        }


                    }

                    return $option;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------





    # -------------------------------------------------------------
    #
    # Name       : generate_active_employee_options
    # Purpose    : Generates active employee options of dropdown
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function generate_active_employee_options(){
        if ($this->databaseConnection()) {
            $option = '';
            $status = '1';

            $sql = $this->db_connection->prepare("SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, MIDDLE_NAME, SUFFIX FROM tblemployeeprofile WHERE EMPLOYMENT_STATUS = :status AND EMPLOYEE_ID NOT LIKE 'USER-%' ORDER BY FIRST_NAME");
            $sql->bindParam(':status', $status);

            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    while($row = $sql->fetch()){
                        $employee_id = trim($row['EMPLOYEE_ID']);
                        $first_name = trim($row['FIRST_NAME']);
                        $last_name = trim($row['LAST_NAME']);
                        $middle_name = trim($row['MIDDLE_NAME']);
                        $suffix = trim($row['SUFFIX']);
                        $fullname = $this->get_full_name($first_name, $middle_name, $last_name, $suffix)[0]['REVERSE_FULL_NAME'];

                        $option .= "<option value='". $employee_id ."'>". $fullname ."</option>";
                    }

                    return $option;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }

    public function Agenerate_active_employee_options() {
    if ($this->databaseConnection()) {
        $option = '';
        $status = '1';

        $sql = $this->db_connection->prepare("
            SELECT
                EMPLOYEE_ID,
                CONCAT(LAST_NAME, ', ', FIRST_NAME, ' ',
                    IFNULL(MIDDLE_NAME, ''), ' ',
                    IFNULL(SUFFIX, '')) AS FULL_NAME
            FROM tblemployeeprofile
            WHERE EMPLOYMENT_STATUS = :status
              AND EMPLOYEE_ID NOT LIKE 'USER-%'
            ORDER BY FULL_NAME
        ");
        $sql->bindParam(':status', $status);

        if ($sql->execute()) {
            $count = $sql->rowCount();

            if ($count > 0) {
                while ($row = $sql->fetch()) {
                    $employee_id = trim($row['EMPLOYEE_ID']);
                    $full_name = trim($row['FULL_NAME']);

                    $option .= "<option value='" . $employee_id . "'>" . $full_name . "</option>";
                }

                return $option;
            }
        } else {
            return $sql->errorInfo()[2];
        }
    }
}

    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : generate_employee_without_user_account_options
    # Purpose    : Generates employee without user account options of dropdown
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function generate_employee_without_user_account_options(){
        if ($this->databaseConnection()) {
            $option = '';
            $status = '1';

            $sql = $this->db_connection->prepare('SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, MIDDLE_NAME, SUFFIX FROM tblemployeeprofile WHERE EMPLOYMENT_STATUS = :status AND EMPLOYEE_ID NOT IN (SELECT EMPLOYEE_ID FROM tbluseraccount) ORDER BY FIRST_NAME');
            $sql->bindParam(':status', $status);

            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    while($row = $sql->fetch()){
                        $employee_id = trim($row['EMPLOYEE_ID']);
                        $first_name = trim($row['FIRST_NAME']);
                        $last_name = trim($row['LAST_NAME']);
                        $middle_name = trim($row['MIDDLE_NAME']);
                        $suffix = trim($row['SUFFIX']);
                        $fullname = $this->get_full_name($first_name, $middle_name, $last_name, $suffix)[0]['REVERSE_FULL_NAME'];

                        $option .= "<option value='". $employee_id ."'>". $fullname ."</option>";
                    }

                    return $option;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : generate_deduction_type_options
    # Purpose    : Generates deduction type options of dropdown
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function generate_deduction_type_options($category){
        if ($this->databaseConnection()) {
            $option = '';

            if(!empty($category)){
                $sql = $this->db_connection->prepare('SELECT DEDUCTION_TYPE_ID, DEDUCTION FROM tbldeductiontype WHERE CATEGORY = :category ORDER BY DEDUCTION');
                $sql->bindParam(':category', $category);
            }
            else{
                $sql = $this->db_connection->prepare('SELECT DEDUCTION_TYPE_ID, DEDUCTION FROM tbldeductiontype ORDER BY DEDUCTION');
            }

            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    while($row = $sql->fetch()){
                        $deduction_type_id = trim($row['DEDUCTION_TYPE_ID']);
                        $deduction = trim($row['DEDUCTION']);

                        $option .= "<option value='". $deduction_type_id ."'>". $deduction ."</option>";
                    }

                    return $option;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : generate_payroll_period_options
    # Purpose    : Generates payroll period options of dropdown
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function generate_payroll_period_options(){
        if ($this->databaseConnection()) {
            $option = '';

            $sql = $this->db_connection->prepare('SELECT PAYROLL_START_DATE, PAYROLL_END_DATE FROM tblpayroll GROUP BY PAYROLL_START_DATE ORDER BY PAYROLL_START_DATE DESC');

            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    while($row = $sql->fetch()){
                        $payroll_start_date_id = $this->check_date('empty', trim($row['PAYROLL_START_DATE']), '', 'Y-m-d', '', '', '');
                        $payroll_end_date_id = $this->check_date('empty', trim($row['PAYROLL_END_DATE']), '', 'Y-m-d', '', '', '');
                        $payroll_start_date = $this->check_date('empty', trim($row['PAYROLL_START_DATE']), '', 'F d, Y', '', '', '');
                        $payroll_end_date = $this->check_date('empty', trim($row['PAYROLL_END_DATE']), '', 'F d, Y', '', '', '');

                        $option .= "<option value='". $payroll_start_date_id ." | ". $payroll_end_date_id ."'>". $payroll_start_date ." - ". $payroll_end_date ."</option>";
                    }

                    return $option;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : generate_weekly_cash_flow_period_options
    # Purpose    : Generates weekly cash flow period options of dropdown
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function generate_weekly_cash_flow_period_options(){
        if ($this->databaseConnection()) {
            $option = '';

            $sql = $this->db_connection->prepare('SELECT START_DATE, END_DATE FROM tblwcf GROUP BY START_DATE ORDER BY START_DATE DESC');

            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    while($row = $sql->fetch()){
                        $wcf_start_date_id = $this->check_date('empty', trim($row['START_DATE']), '', 'Y-m-d', '', '', '');
                        $wcf_end_date_id = $this->check_date('empty', trim($row['END_DATE']), '', 'Y-m-d', '', '', '');
                        $wcf_start_date = $this->check_date('empty', trim($row['START_DATE']), '', 'F d, Y', '', '', '');
                        $wcf_end_date = $this->check_date('empty', trim($row['END_DATE']), '', 'F d, Y', '', '', '');

                        $option .= "<option value='". $wcf_start_date_id ." | ". $wcf_end_date_id ."'>". $wcf_start_date ." - ". $wcf_end_date ."</option>";
                    }

                    return $option;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : generate_payroll_group_option
    # Purpose    : Generates payroll group options of dropdown
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function generate_payroll_group_option(){
        if ($this->databaseConnection()) {
            $option = '';

            $sql = $this->db_connection->prepare('SELECT PAYROLL_GROUP_ID, PAYROLL_GROUP_DESC FROM tblpayrollgroup ORDER BY PAYROLL_GROUP_DESC');

            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    while($row = $sql->fetch()){
                        $payroll_group_id = trim($row['PAYROLL_GROUP_ID']);
                        $payroll_group_desc = trim($row['PAYROLL_GROUP_DESC']);

                        $option .= "<option value='". $payroll_group_id ."'>". $payroll_group_desc ."</option>";
                    }

                    return $option;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # --------------------------------------------------------- ----
    #
    # Name       : generate_file_name
    # Purpose    : generates random file name
    #
    # Returns    : Number
    #
    # -------------------------------------------------------------
    public function generate_file_name($length) {
        $key = '';
        $keys = array_merge(range(0, 9), range('a', 'z'));

        for ($i = 0; $i < $length; $i++) {
            $key .= $keys[array_rand($keys)];
        }

        return $key;
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : generate_document_department_permission_check_box
    # Purpose    : Generates permission check box
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function generate_document_department_permission_check_box($username){
        if ($this->databaseConnection()) {
            $counter = 0;
            $column = '';

            $employee_profile_details = $this->get_data_details_one_parameter('employee profile', $username);
            $employee_department = $employee_profile_details[0]['DEPARTMENT'];

            $sql = $this->db_connection->prepare('SELECT DEPARTMENT_ID, DEPARTMENT FROM tbldepartment ORDER BY DEPARTMENT');

            if($sql->execute()){
                $column .= '<div class="table-responsive">
                                    <table class="table table-bordered mb-0">

                                        <thead>
                                            <tr>
                                                <th>Department</th>
                                                <th>View</th>
                                                <th>Update</th>
                                                <th>Delete</th>
                                                <th>Set Permission</th>
                                            </tr>
                                        </thead>
                                        <tbody>';

                while($row = $sql->fetch()){
                    $department_id = trim($row['DEPARTMENT_ID']);
                    $department = trim($row['DEPARTMENT']);

                    if($employee_department == $department_id){
                        $column .= '<tr>
                            <th scope="row">'. $department .'</th>
                            <td>
                                <div class="form-check form-switch mb-3">
                                    <input class="form-check-input department-permission" type="checkbox" id="'. $department_id .'-V" value="'. $department_id .'-V" checked>
                                </div>
                            </td>
                            <td>
                                <div class="form-check form-switch mb-3">
                                    <input class="form-check-input department-permission" type="checkbox" id="'. $department_id .'-U" value="'. $department_id .'-U" checked>
                                </div>
                            </td>
                            <td>
                                <div class="form-check form-switch mb-3">
                                    <input class="form-check-input department-permission" type="checkbox" id="'. $department_id .'-D" value="'. $department_id .'-D" checked>
                                </div>
                            </td>
                            <td>
                                <div class="form-check form-switch mb-3">
                                    <input class="form-check-input department-permission" type="checkbox" id="'. $department_id .'-S" value="'. $department_id .'-S" checked>
                                </div>
                            </td>
                        </tr>';
                    }
                    else{
                        $column .= '<tr>
                            <th scope="row">'. $department .'</th>
                            <td>
                                <div class="form-check form-switch mb-3">
                                    <input class="form-check-input department-permission" type="checkbox" id="'. $department_id .'-V" value="'. $department_id .'-V">
                                </div>
                            </td>
                            <td>
                                <div class="form-check form-switch mb-3">
                                    <input class="form-check-input department-permission" type="checkbox" id="'. $department_id .'-U" value="'. $department_id .'-U">
                                </div>
                            </td>
                            <td>
                                <div class="form-check form-switch mb-3">
                                    <input class="form-check-input department-permission" type="checkbox" id="'. $department_id .'-D" value="'. $department_id .'-D">
                                </div>
                            </td>
                            <td>
                                <div class="form-check form-switch mb-3">
                                    <input class="form-check-input department-permission" type="checkbox" id="'. $department_id .'-S" value="'. $department_id .'-S">
                                </div>
                            </td>
                        </tr>';
                    }
                }

                $column .= '</tbody>
                        </table>
                    </div>';

                return $column;
            }
            else{
                return $sql->errorInfo();
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : generate_document_department_permission_check_box
    # Purpose    : Generates permission check box
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function generate_document_employee_permission_check_box(){
        if ($this->databaseConnection()) {
            $counter = 0;
            $column = '';
            $status = '1';

            $sql = $this->db_connection->prepare("SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, MIDDLE_NAME, SUFFIX FROM tblemployeeprofile WHERE EMPLOYMENT_STATUS = :status AND EMPLOYEE_ID NOT LIKE 'USER-%' ORDER BY FIRST_NAME");
            $sql->bindParam(':status', $status);

            if($sql->execute()){
                $column .= '<div class="table-responsive">
                                    <table class="table table-bordered mb-0">

                                        <thead>
                                            <tr>
                                                <th>Employee</th>
                                                <th>Forbidden</th>
                                                <th>View</th>
                                                <th>Update</th>
                                                <th>Delete</th>
                                                <th>Set Permission</th>
                                            </tr>
                                        </thead>
                                        <tbody>';

                while($row = $sql->fetch()){
                    $employee_id = trim($row['EMPLOYEE_ID']);
                    $first_name = trim($row['FIRST_NAME']);
                    $last_name = trim($row['LAST_NAME']);
                    $middle_name = trim($row['MIDDLE_NAME']);
                    $suffix = trim($row['SUFFIX']);
                    $fullname = $this->get_full_name($first_name, $middle_name, $last_name, $suffix)[0]['REVERSE_FULL_NAME'];

                    $column .= '<tr>
                            <th scope="row">'. $fullname .'</th>
                            <td>
                                <div class="form-check form-switch mb-3">
                                    <input class="form-check-input employee-permission" type="checkbox" id="'. $employee_id .'-F" value="'. $employee_id .'-F">
                                </div>
                            </td>
                            <td>
                                <div class="form-check form-switch mb-3">
                                    <input class="form-check-input employee-permission" type="checkbox" id="'. $employee_id .'-V" value="'. $employee_id .'-V">
                                </div>
                            </td>
                            <td>
                                <div class="form-check form-switch mb-3">
                                    <input class="form-check-input employee-permission" type="checkbox" id="'. $employee_id .'-U" value="'. $employee_id .'-U">
                                </div>
                            </td>
                            <td>
                                <div class="form-check form-switch mb-3">
                                    <input class="form-check-input employee-permission" type="checkbox" id="'. $employee_id .'-D" value="'. $employee_id .'-D">
                                </div>
                            </td>
                            <td>
                                <div class="form-check form-switch mb-3">
                                    <input class="form-check-input employee-permission" type="checkbox" id="'. $employee_id .'-S" value="'. $employee_id .'-S">
                                </div>
                            </td>
                        </tr>';
                }

                $column .= '</tbody>
                        </table>
                    </div>';

                return $column;
            }
            else{
                return $sql->errorInfo();
            }
        }
    }
    # -------------------------------------------------------------


    //++++++++++++++++++++++++++++++++++++++changes lemar bill +++++++++++++++++++++++++++++++++++++++

    //purchasing module


    //insert history status of Purchase request

    public function add_pr_history($prno,$status,$action_by){
        if($this->databaseConnection()){
            try {

                $conn =$this->db_connection->prepare("UPDATE tblpurchaserequest SET tblpurchaserequest.STATUS=? WHERE PRNO=?");
                if($conn->execute([$status,$prno])){

                    return ['RES' => ["updated"=>$prno, "error"=> null ]];
                }else{
                    return ['RES' => ["error" => $conn->errorInfo(), "lastInsertId"=> null]];
                }
            } catch(PDOException $e) {
                return $conn . "<br>" . $e->getMessage();
            }
        }
    }

    //change status of Purchase request
    public function change_pr_status($prno,$status){
        if($this->databaseConnection()){
            $currtd =  date('Y-m-d H:i:s');
            if($this->databaseConnection()){
                try {

                    $conn =$this->db_connection->prepare("UPDATE tblpurchaserequest SET tblpurchaserequest.STATUS=? WHERE PRNO=?");
                    if($conn->execute([$status,$prno])){

                        return ['RES' => ["updated"=>$prno, "error"=> null ]];
                    }else{
                        return ['RES' => ["error" => $conn->errorInfo(), "lastInsertId"=> null]];
                    }
                } catch(PDOException $e) {
                    return $conn . "<br>" . $e->getMessage();
                }
                }
        }
    }

    //change status of recom1status
    public function change_recommended_by1($prno,$status)
    {
        if($this->databaseConnection()){
            $currtd =  date('Y-m-d H:i:s');
            if($this->databaseConnection()){
                try {

                    $conn =$this->db_connection->prepare("UPDATE tblpurchaserequest SET tblpurchaserequest.RECOM1STATUS=? WHERE PRNO=?");
                    if($conn->execute([$status,$prno])){

                        return ['RES' => ["updated"=>$prno, "error"=> null ]];
                    }else{
                        return ['RES' => ["error" => $conn->errorInfo(), "lastInsertId"=> null]];
                    }
                } catch(PDOException $e) {
                    return $conn . "<br>" . $e->getMessage();
                }
                }
        }
    }

    //change status of recom2status
    public function change_recommended_by2($prno,$status)
    {
        if($this->databaseConnection()){
            $currtd =  date('Y-m-d H:i:s');
            if($this->databaseConnection()){
                try {

                    $conn =$this->db_connection->prepare("UPDATE tblpurchaserequest SET tblpurchaserequest.RECOM2STATUS=? WHERE PRNO=?");
                    if($conn->execute([$status,$prno])){

                        return ['RES' => ["updated"=>$prno, "error"=> null ]];
                    }else{
                        return ['RES' => ["error" => $conn->errorInfo(), "lastInsertId"=> null]];
                    }
                } catch(PDOException $e) {
                    return $conn . "<br>" . $e->getMessage();
                }
                }
        }
    }


    //delete pr item
    public function delete_item_id_pr($item_id){

        if($this->databaseConnection()){
            $currtd =  date('Y-m-d H:i:s');
            if($this->databaseConnection()){
                try {

                    $conn =$this->db_connection->prepare("DELETE FROM tblpritems WHERE IDNO =?");
                    if($conn->execute([$item_id])){
                       return $conn;
                       // return ['RES' => ["deleted"=>$item_id, "error"=> null ]];
                    }else{
                        return ['RES' => ["error" => $conn->errorInfo(), "lastInsertId"=> null]];
                    }
                } catch(PDOException $e) {
                    return $conn . "<br>" . $e->getMessage();
                    }
                }
        }
    }
    //add pr item
    public function add_pr_items($quantity,$unit,$particulars,$budget,$estcost,$prno)
    {
        if($this->databaseConnection()){
                $currtd =  date('Y-m-d H:i:s');
                if($this->databaseConnection()){
                    try {

                        $conn =$this->db_connection->prepare("INSERT INTO tblpritems (QUANTITY, UNIT, PARTICULAR, BUDGET,ESTIMATEDCOST, PRNO) VALUES(?,?,?,?,?,?)");
                        if($conn->execute([$quantity, $unit, $particulars,$budget,$estcost,$prno])){
                            $LAST_ID =  $this->encrypt_data($this->db_connection->lastInsertId());
                            return ['RES' => ["lastInsertId"=>$LAST_ID, "error"=> null ]];
                        }else{
                            return ['RES' => ["error" => $conn->errorInfo(), "lastInsertId"=> null]];
                        }
                    } catch(PDOException $e) {
                        return $conn . "<br>" . $e->getMessage();
                        }
                    }
            }



    }


    //update pr details

public function update_pr($prno,$remarks, $requested_by,$bud_con,$bud_con_rem, $recom1, $rcom2, $approver)
    {
        //$currtd =  date('Y-m-d H:i:s');
        if($this->databaseConnection()){

                $conn =$this->db_connection->prepare("UPDATE tblpurchaserequest SET REMARKS=?, REQUESTEDBY=?, BUDGETCONFIRMEE=?,BUDGETCONFIRMREM=?,RECOMMENDED_BY=?,RECOMMENDED_BY1=?,APPROVED_BY=? WHERE PRNO=?");
                if($conn->execute([$remarks, $requested_by, $bud_con,$bud_con_rem, $recom1, $rcom2, $approver,$prno])){

                    return ['RES' => [ "error"=> null ]];
                }else{
                    return ['RES' => ["error" => $conn->errorInfo()]];
                }
            }
    }

    //add PR
    public function add_pr($date_needed, $title, $dept, $status, $creator)
    {
        $currtd =  date('Y-m-d H:i:s');
        if($this->databaseConnection()){

                $conn =$this->db_connection->prepare("INSERT INTO tblpurchaserequest (TITLE, DATE_NEEDED, CREATED_AT, DEPARTMENT,STATUS, CREATOR) VALUES(?,?,?,?,?,?)");
                if($conn->execute([$title,$date_needed,$currtd,$dept,$status,$creator])){
                    $LAST_ID =  $this->encrypt_data($this->db_connection->lastInsertId());

                    $employee = $this->get_data_details_one_parameter('employee profile',$_SESSION['username'])[0];
                    $emp_name = $employee['FIRST_NAME']. $employee['LAST_NAME'];
                    $conn1 =$this->db_connection->prepare("INSERT INTO tblprstatushistory (tblprstatushistoryDATETIME,tblprstatushistory.STATUS, EXECUTE_BY, PRNO) VALUES(?,?,?,?)");
                    if($conn1->execute([$currtd,'Pending',$emp_name,$LAST_ID ])){

                    }

                    return ['RES' => ["lastInsertId"=>$LAST_ID, "error"=> null ]];


                }else{
                    return ['RES' => ["error" => $conn->errorInfo(), "lastInsertId"=> null]];
                }
            }
    }



    //vault access
        public function add_submit_qr_vault($person,$activity,$other_purpose = null, $branch){
            $date_time =  date('Y-m-d H:i:s');


            if($this->databaseConnection()){

            try {
                $conn =$this->db_connection;
                // set the PDO error mode to exception
                $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
                $sql = "INSERT INTO tblvaultacess (PERSON, ACTIVITY, TIME_IN, VAULT_BRANCH, REMARKS) VALUES ('".$person."','".$activity."','".$date_time."','".$branch."','".$other_purpose."')";
                // use exec() because no results are returned
                $conn->exec($sql);
                $last_id = $conn->lastInsertId();
                $this->insert_logs('',"add_submit_qr_vault",json_encode($_POST));
                return  ['ID' =>$last_id];
                } catch(PDOException $e) {
                return $sql . "<br>" . $e->getMessage();
                }

            }

            }

        public function time_out_qr_vault($id){

            if($this->databaseConnection()){
                $date_time =  date('Y-m-d H:i:s');

                $sql = $this->db_connection->prepare("UPDATE tblvaultacess SET TIME_OUT=:date_time WHERE ID=:id");
                $sql->bindParam(':date_time', $date_time);
                $sql->bindParam(':id', $id);

                if ($sql->execute()) {
                    $this->insert_logs($_SESSION['username'] ?? null,"time_out_qr_vault",json_encode($_POST));
                    return 'clock out';

                }  else{

                    return $sql->errorInfo();
                }
            }

        }
        //PDC Monitoring
        # -------------------------------------------------------------
        #
        # Name       : add_pdc_monitoring
        # Purpose    : creation of PDC monitoring
        #
        # Returns    : String
        #
        # -------------------------------------------------------------

        public function add_pdc_monitoring($loan_num, $curr_pdc_num,$undertaking,$assign_to, $branch){

            if($this->databaseConnection()){
                $date_time =  date('Y-m-d H:i:s');
                $username = $_SESSION['username'];
                $employee_id = $this->get_data_details_one_parameter('employee profile',$username)[0]['EMPLOYEE_ID'];


                $sql = $this->db_connection->prepare(
                "INSERT INTO tblpdcmonitoring(
                    LOAN_NUM,
                    UNDERTAKING,
                    CURR_PDC_NUMBER,
                    ASSIGN_TO,
                    BRANCH,
                    CREATED_AT,
                    CREATED_BY
                    )
                VALUES(
                    :loan_num,
                    :undertaking,
                    :curr_pdc_num,
                    :assign_to,
                    :branch,
                    :date_time,
                    :employee_id
                )");
                $sql->bindParam(':loan_num', $loan_num);
                $sql->bindParam(':undertaking', $undertaking);
                $sql->bindParam(':curr_pdc_num',$curr_pdc_num);
                $sql->bindParam(':assign_to',$assign_to);
                $sql->bindParam(':branch',$branch);
                $sql->bindParam(':date_time',$date_time);
                $sql->bindParam(':employee_id',$employee_id);


                if ($sql->execute()) {
                    $this->insert_logs($username,"add_pdc_monitoring",json_encode($_POST));
                    return '1';

                }  else{

                    return $sql->errorInfo();
                }
            }
        }



        # -------------------------------------------------------------
        #
        # Name       : add_pdc_monitoring
        # Purpose    : creation of PDC monitoring
        #
        # Returns    : String
        #
        # -------------------------------------------------------------

        public function update_pdc_current_check_number_monitoring($id_monitoring, $curr_pdc_num, $undertaking, $assign_emp_update, $branch_update){

            if($this->databaseConnection()){
                $date_time =  date('Y-m-d H:i:s');
                $username = $_SESSION['username'];
                $employee_id = $this->get_data_details_one_parameter('employee profile',$username)[0]['EMPLOYEE_ID'];


                $sql = $this->db_connection->prepare(
                "UPDATE tblpdcmonitoring SET
                CURR_PDC_NUMBER=:curr_pdc_num,
                ASSIGN_TO=:assign_emp_update,
                BRANCH=:branch_update,
                UNDERTAKING=:undertaking,
                UPDATED_AT=:date_time,
                UPDATED_BY=:emp_id
                WHERE ID_MONITORING=:id_monitoring");
                $sql->bindParam(':id_monitoring', $id_monitoring);
                $sql->bindParam(':curr_pdc_num', $curr_pdc_num);
                $sql->bindParam(':assign_emp_update', $assign_emp_update);
                $sql->bindParam(':branch_update', $branch_update);
                $sql->bindParam(':undertaking', $undertaking);
                $sql->bindParam(':date_time',$date_time);
                $sql->bindParam(':emp_id',$employee_id);



                if ($sql->execute()) {
                    $this->insert_logs($username,"update_pdc_current_check_number_monitoring",json_encode($_POST));
                    return '1';
                }  else{

                    return $sql->errorInfo();
                }
            }
        }

        # -------------------------------------------------------------
        #
        # Name       : get_pdc_monitoring_remarks
        # Purpose    : getting the remarks of PDC monitoring
        #
        # Returns    : String
        #
        # -------------------------------------------------------------
        public function get_pdc_remarks_monitoring($id_monitoring){

            if($this->databaseConnection()){

                //$username = $_SESSION['username'];
                $data = [];

                $sql = $this->db_connection->prepare(
                "SELECT * FROM tblpdcremarkshistory
                WHERE ID_MONITORING=:id_monitoring ORDER BY CREATED_AT DESC ");
                $sql->bindParam(':id_monitoring', $id_monitoring);
                $sql->setFetchMode(PDO::FETCH_ASSOC);
                if ($sql->execute()) {
                    while($row = $sql->fetch()){
                        //custom  rows
                        $row['CREATED_BY_USERNAME'] = $this->get_data_details_one_parameter('employee profile',$row['CREATED_BY'])[0]['USERNAME'];
                        $row['CREATED_BY_FNAME'] = $this->get_data_details_one_parameter('employee profile',$row['CREATED_BY'])[0]['FIRST_NAME'];
                        $row['CREATED_BY_LNAME'] = $this->get_data_details_one_parameter('employee profile',$row['CREATED_BY'])[0]['LAST_NAME'];
                        $row['LOAN_NUMBER'] = $this->get_data_details_one_parameter('pdc monitoring',$row['ID_MONITORING'])[0]['LOAN_NUM'];
                        array_push($data,$row);
                    }
                    return $data;

                }  else{

                    return $sql->errorInfo();
                }
            }
        }




        # -------------------------------------------------------------
        #
        # Name       : delete_pdc_monitoring
        # Purpose    : soft delete pdc monitoring
        #
        # Returns    : String
        #
        # -------------------------------------------------------------

        public function delete_pdc_monitoring($id_monitoring){

            if($this->databaseConnection()){
                $date_time =  date('Y-m-d H:i:s');
                $username = $_SESSION['username'];


                $sql = $this->db_connection->prepare(
                "UPDATE tblpdcmonitoring SET
                DELETED_AT=:date_time
                WHERE ID_MONITORING=:id_monitoring");
                $sql->bindParam(':id_monitoring', $id_monitoring);
                $sql->bindParam(':date_time', $date_time);

                if ($sql->execute()) {
                    $this->insert_logs($username,"delete_pdc_monitoring",json_encode($_POST));
                    return '1';
                }  else{

                    return $sql->errorInfo();
                }
            }
        }







        # -------------------------------------------------------------
        #
        # Name       : insert_pdc_remarks
        # Purpose    : inerting the pdc remarks
        #
        # Returns    : String
        #
        # -------------------------------------------------------------

        public function insert_pdc_remarks($id_monitoring, $remarks){

            if($this->databaseConnection()){
                $date_time =  date('Y-m-d H:i:s');
                $username = $_SESSION['username'];
                $employee_id = $this->get_data_details_one_parameter('employee profile',$username)[0]['EMPLOYEE_ID'];


                $sql = $this->db_connection->prepare(
                "INSERT INTO tblpdcremarkshistory(
                    DETAILS,
                    ID_MONITORING,
                    CREATED_AT,
                    CREATED_BY
                    )
                VALUES(
                    :remarks,
                    :id_monitoring,
                    :created_at,
                    :employee_id
                )");
                $sql->bindParam(':remarks', $remarks);
                $sql->bindParam(':id_monitoring',$id_monitoring);
                $sql->bindParam(':created_at',$date_time);
                $sql->bindParam(':employee_id',$employee_id);

                if ($sql->execute()) {
                    $this->insert_logs($username,"insert_pdc_remarks",json_encode($_POST));
                    return '1';

                }  else{

                    return $sql->errorInfo();
                }
            }


        }








            //insurance Module
        # -------------------------------------------------------------
        #
        # Name       : tag_as_complete_insurance_request
        # Purpose    : tag_as_complete_insurance_request
        #
        # Returns    : String
        #
        # -------------------------------------------------------------
    public function tag_as_complete_insurance_request($ins_id){

        if($this->databaseConnection()){
            $date_time =  date('Y-m-d H:i:s');
            $username = $_SESSION['username'];
            $status = 'complete';

            $sql = $this->db_connection->prepare("UPDATE tblinsurancerequest SET COMP_DT=:date_time,IRS=:statuss,COMP_BY=:username WHERE ID=:ins_req_id");
            $sql->bindParam(':date_time', $date_time);
            $sql->bindParam(':statuss',$status );
            $sql->bindParam(':ins_req_id', $ins_id);
            $sql->bindParam(':username', $username);

            if ($sql->execute()) {
                $this->insert_logs($_SESSION['username'],"tag_as_complete_insurance_request",json_encode($_POST));
                return 'complete';

            }  else{

                return $sql->errorInfo();
            }
        }

    }


    public function tag_as_cancel_insurance_request($ins_id,$rem){

        if($this->databaseConnection()){
            $date_time =  date('Y-m-d H:i:s');
            $username = $_SESSION['username'];
            $status = 'cancelled';

            $sql = $this->db_connection->prepare("UPDATE tblinsurancerequest SET CAN_DT=:date_time,IRS=:statuss,CAN_BY=:username,CAN_REM=:rem WHERE ID=:ins_req_id");
            $sql->bindParam(':date_time', $date_time);
            $sql->bindParam(':statuss',$status );
            $sql->bindParam(':ins_req_id', $ins_id);
            $sql->bindParam(':rem', $rem);
            $sql->bindParam(':username', $username);

            if ($sql->execute()) {
                $this->insert_logs($_SESSION['username'],"tag_as_cancel_insurance_request",json_encode($_POST));
                return 'cancelled';

            }  else{

                return $sql->errorInfo();
            }
        }

    }






        //insurance Module
        # -------------------------------------------------------------
        #
        # Name       : insert_activity_note_attachmment
        # Purpose    : insterts the activity note attachement
        #
        # Returns    : String
        #
        # -------------------------------------------------------------



        public function insert_insurance_request(
            $clientname,
            $address,
            $collaid,
            $unitdesc,

            $yearmod,
            $plate_num,
            $chasis_num,
            $motor_num,
            $color,
            $insbyen,
            $ins_code,
            $ins_clas,

            $mortgagee,
            $rate,
            $coverage,
            $otherlines,

            $prm,
            $prm_am,
            $is_aog,
            $incep_sdt,

            $incep_edt,
            $pay_term,
            $nod,
            $dd,

            $otdl,
            $bodin,
            $ptdmg,
            $peracc,

            $gp,
            $netmt,
            $netcom,
            $totalprem,

            $income,
            $dealcd,
            $req_by,
            $req_dt,
            $irs
            ){

               // return $otherlines;

                if($this->databaseConnection()){

                    $sql = $this->db_connection->prepare("INSERT INTO tblinsurancerequest
                    (
                        CLIENT_NAME,
                        tblinsurancerequest.ADDRESS,
                        COLLA_ID,
                        UNIT_DESC,
                        YEAR_MOD,
                        PLATE_NUM,
                        CHASIS_NUM,
                        MOTOR_NUM,
                        COLOR,
                        INS_BY_ELF,
                        INS_CODE,
                        INS_CLAS,
                        MORTGAGEE,
                        RATE,
                        COVERAGE,
                        OTHER_LINES,
                        PRM,
                        PRM_AM,
                        IS_AOG,
                        INCEP_SDT,
                        INCEP_EDT,
                        PAY_TERM,
                        NOD,
                        DD,
                        ODTL,
                        BODIN,
                        PTDMG,
                        PERACC,
                        GP,
                        NETMT,
                        NETCOMI,
                        TOTALPREM,
                        INCOME,
                        DEALCD,
                        REQ_BY,
                        REQ_DT,
                        IRS
                    ) VALUES (
                        :clientname,
                        :address,
                        :collid,
                        :unitdesc,
                        :yearmod,
                        :plate_num,
                        :chasis_num,
                        :motor_num,
                        :color,
                        :insbyen,
                        :ins_code,
                        :ins_clas,
                        :mortgagee,
                        :rate,
                        :coverage,
                        :otherlines,
                        :prm,
                        :prm_am,
                        :is_aog,
                        :incep_sdt,
                        :incep_edt,
                        :pay_term,
                        :nod,
                        :dd,
                        :otdl,
                        :bodin,
                        :ptdmg,
                        :peracc,
                        :gp,
                        :netmt,
                        :netcom,
                        :totalprem,
                        :income,
                        :dealcd,
                        :req_by,
                        :req_dt,
                        :irs
                        )");


                    $sql->bindParam(':clientname', $clientname);
                    $sql->bindParam(':address', $address);
                    $sql->bindParam(':collid', $collaid);
                    $sql->bindParam(':unitdesc', $unitdesc);
                    $sql->bindParam(':yearmod', $yearmod);
                    $sql->bindParam(':plate_num', $plate_num);
                    $sql->bindParam(':chasis_num', $chasis_num);
                    $sql->bindParam(':motor_num', $motor_num);
                    $sql->bindParam(':color', $color);
                    $sql->bindParam(':insbyen', $insbyen);
                    $sql->bindParam(':ins_code', $ins_code);
                    $sql->bindParam(':ins_clas', $ins_clas);
                    $sql->bindParam(':mortgagee', $mortgagee);
                    $sql->bindParam(':rate', $rate);
                    $sql->bindParam(':coverage', $coverage);
                    $sql->bindParam(':otherlines', $otherlines);
                    $sql->bindParam(':prm', $prm);
                    $sql->bindParam(':prm_am', $prm_am);
                    $sql->bindParam(':is_aog', $is_aog);
                    $sql->bindParam(':incep_sdt', $incep_sdt);
                    $sql->bindParam(':incep_edt', $incep_edt);
                    $sql->bindParam(':pay_term', $pay_term);
                    $sql->bindParam(':nod', $nod);
                    $sql->bindParam(':dd', $dd);
                    $sql->bindParam(':otdl', $otdl);
                    $sql->bindParam(':bodin', $bodin);
                    $sql->bindParam(':ptdmg', $ptdmg);
                    $sql->bindParam(':peracc', $peracc);
                    $sql->bindParam(':gp', $gp);
                    $sql->bindParam(':netmt', $netmt);
                    $sql->bindParam(':netcom', $netcom);
                    $sql->bindParam(':totalprem', $totalprem);
                    $sql->bindParam(':income', $income);
                    $sql->bindParam(':dealcd', $dealcd);
                    $sql->bindParam(':req_by', $req_by);
                    $sql->bindParam(':req_dt', $req_dt);
                    $sql->bindParam(':irs', $irs);


                    if ($sql->execute()) {
                        $this->insert_logs($_SESSION['username'],"insert_insurance_request",json_encode($_POST));
                        return 'added';

                    }  else{

                        return $sql->errorInfo();
                    }

                }

        }


        # -------------------------------------------------------------
        #
        # Name       : update_insurance_request
        # Purpose    : Update the activity note attachement
        #
        # Returns    : String
        #
        # -------------------------------------------------------------
        public function update_insurance_request(
            $ins_req_id,
            $clientname,
            $address,
            $collaid,
            $unitdesc,

            $yearmod,
            $plate_num,
            $chasis_num,
            $motor_num,
            $color,
            $insbyen,
            $ins_code,
            $ins_clas,

            $mortgagee,
            $rate,
            $coverage,
            $otherlines,

            $prm,
            $prm_am,
            $is_aog,
            $incep_sdt,

            $incep_edt,
            $pay_term,
            $nod,
            $dd,

            $otdl,
            $bodin,
            $ptdmg,
            $peracc,

            $gp,
            $netmt,
            $netcom,
            $totalprem,

            $income,
            $dealcd,
            $req_by,
            $req_dt,
            $irs
            ){


                if($this->databaseConnection()){

                    $sql = $this->db_connection->prepare("UPDATE tblinsurancerequest SET
                        CLIENT_NAME=:clientname,
                        tblinsurancerequest.ADDRESS=:address,
                        COLLA_ID=:collid,
                        UNIT_DESC=:unitdesc,
                        YEAR_MOD=:yearmod,
                        PLATE_NUM=:plate_num,
                        CHASIS_NUM=:chasis_num,
                        MOTOR_NUM=:motor_num,
                        COLOR=:color,
                        INS_BY_ELF=:insbyen,
                        INS_CODE=:ins_code,
                        INS_CLAS=:ins_clas,
                        MORTGAGEE=:mortgagee,
                        RATE=:rate,
                        COVERAGE=:coverage,
                        OTHER_LINES=:otherlines,
                        PRM=:prm,
                        PRM_AM=:prm_am,
                        IS_AOG=:is_aog,
                        INCEP_SDT=:incep_sdt,
                        INCEP_EDT=:incep_edt,
                        PAY_TERM=:pay_term,
                        NOD=:nod,
                        DD=:dd,
                        ODTL=:otdl,
                        BODIN=:bodin,
                        PTDMG=:ptdmg,
                        PERACC=:peracc,
                        GP=:gp,
                        NETMT=:netmt,
                        NETCOMI=:netcom,
                        TOTALPREM=:totalprem,
                        INCOME=:income,
                        DEALCD=:dealcd,
                        REQ_BY=:req_by,
                        REQ_DT=:req_dt
                        WHERE ID=:ins_req_id");


                    $sql->bindParam(':ins_req_id', $ins_req_id);
                    $sql->bindParam(':clientname', $clientname);
                    $sql->bindParam(':address', $address);
                    $sql->bindParam(':collid', $collaid);
                    $sql->bindParam(':unitdesc', $unitdesc);
                    $sql->bindParam(':yearmod', $yearmod);
                    $sql->bindParam(':plate_num', $plate_num);
                    $sql->bindParam(':chasis_num', $chasis_num);
                    $sql->bindParam(':motor_num', $motor_num);
                    $sql->bindParam(':color', $color);
                    $sql->bindParam(':insbyen', $insbyen);
                    $sql->bindParam(':ins_code', $ins_code);
                    $sql->bindParam(':ins_clas', $ins_clas);
                    $sql->bindParam(':mortgagee', $mortgagee);
                    $sql->bindParam(':rate', $rate);
                    $sql->bindParam(':coverage', $coverage);
                    $sql->bindParam(':otherlines', $otherlines);
                    $sql->bindParam(':prm', $prm);
                    $sql->bindParam(':prm_am', $prm_am);
                    $sql->bindParam(':is_aog', $is_aog);
                    $sql->bindParam(':incep_sdt', $incep_sdt);
                    $sql->bindParam(':incep_edt', $incep_edt);
                    $sql->bindParam(':pay_term', $pay_term);
                    $sql->bindParam(':nod', $nod);
                    $sql->bindParam(':dd', $dd);
                    $sql->bindParam(':otdl', $otdl);
                    $sql->bindParam(':bodin', $bodin);
                    $sql->bindParam(':ptdmg', $ptdmg);
                    $sql->bindParam(':peracc', $peracc);
                    $sql->bindParam(':gp', $gp);
                    $sql->bindParam(':netmt', $netmt);
                    $sql->bindParam(':netcom', $netcom);
                    $sql->bindParam(':totalprem', $totalprem);
                    $sql->bindParam(':income', $income);
                    $sql->bindParam(':dealcd', $dealcd);
                    $sql->bindParam(':req_by', $req_by);
                    $sql->bindParam(':req_dt', $req_dt);


                    if ($sql->execute()) {
                        $this->insert_logs($_SESSION['username'],"update_insurance_request",json_encode($_POST));
                        return 'updated';

                    }  else{

                        return $sql->errorInfo();
                    }

                }

        }


        # -------------------------------------------------------------
        #
        # Name       : delete_insurance_request
        # Purpose    : insterts the activity note attachement
        #
        # Returns    : String
        #
        # -------------------------------------------------------------

        public function delete_insurance_request($ins_req_id){

            if($this->databaseConnection()){


                $date_time =  date('Y-m-d h:i:sa');
                $sql = $this->db_connection->prepare("UPDATE tblinsurancerequest SET DELETED_AT=:date_time WHERE ID=:ins_req_id");
                $sql->bindParam(':date_time', $date_time);
                $sql->bindParam(':ins_req_id', $ins_req_id);

                if ($sql->execute()) {
                    $this->insert_logs($_SESSION['username'],"delete_insurance_request",json_encode($_POST));
                    return 'deleted';

                }  else{

                    return $sql->errorInfo();
                }




            }





        }




    //activity Module


        # -------------------------------------------------------------
        #
        # Name       : insert_activity_note_attachmment
        # Purpose    : insterts the activity note attachement
        #
        # Returns    : String
        #
        # -------------------------------------------------------------
        public function delete_activity_note_attachment($username,$attach_id){


            if($this->databaseConnection()){

                $sql = $this->db_connection->prepare('DELETE FROM tblactivityattachments  WHERE ID=:act_id');
                $sql->bindParam(':act_id', $attach_id);

                if ($sql->execute()) {
                    $this->insert_logs($username,"delete_activity_note_attachment",json_encode($_POST));
                    return 'deleted';

                }  else{

                    return $sql->errorInfo();
                }

            }

        }





            # -------------------------------------------------------------
            #
            # Name       : insert_activity_note_attachmment
            # Purpose    : insterts the activity note attachement
            #
            # Returns    : String
            #
            # -------------------------------------------------------------
            public function insert_activity_note_attachmment($filepath = null, $origname, $noteid, $username)
            {

                if($this->databaseConnection()){
                    $date_time =  date('Y-m-d H:i:s');
                    $sql = $this->db_connection->prepare('INSERT INTO tblactivityattachments (TITLE, tblactivityattachments.PATH,CREATED_AT, CREATED_BY, NOTE_ID)
                    VALUES (:origname,:filepath,:sysdt,:username,:note_id)');
                    $sql->bindParam(':origname',$origname);
                    $sql->bindParam(':filepath',$filepath);
                    $sql->bindParam(':sysdt',$date_time);
                    $sql->bindParam(':username',$username);
                    $sql->bindParam(':note_id',$noteid);

                    if ($sql->execute()) {
                        $this->insert_logs($username, 'insert_activity_note_attachmment', $filepath);
                       return '1';
                    }  else{

                        return $sql->errorInfo();
                    }

                }



            }

            # -------------------------------------------------------------
            #
            # Name       : insert_activity_note
            # Purpose    : insterts the activity note
            #
            # Returns    : String
            #
            # -------------------------------------------------------------
            public function insert_activity_note($username,$client_name,$phone=null,$act_type,$act_desc,$long,$lat){

                $user_dept_code = $this->get_data_details_one_parameter("employee profile",$username)[0]['DEPARTMENT'];

                if($this->databaseConnection()){
                    $date_time =  date('Y-m-d H:i:s');
                    $sql = $this->db_connection->prepare('INSERT INTO tblactivitynotes (ACTIVITY_DATE, USERNAME, USER_DEPT, CLIENT_NAME, CLIENT_TEL, NOTE_TYPE, NOTE_DESC, GEO_LONG, GEO_LAT, CREATED_AT)
                    VALUES (:activity_date,:username,:user_dept_code,:client_name,:phone,:act_type,:act_desc,:long,:lat,:created_at)');
                     $sql->bindParam(':activity_date', $date_time);
                     $sql->bindParam(':username', $username);
                     $sql->bindParam(':user_dept_code',$user_dept_code);
                     $sql->bindParam(':client_name',$client_name);
                     $sql->bindParam(':phone',$phone);
                     $sql->bindParam(':act_type',$act_type);
                     $sql->bindParam(':act_desc',$act_desc);
                     $sql->bindParam(':long',$long);
                     $sql->bindParam(':lat',$lat);
                     $sql->bindParam(':created_at',$date_time);

                    if ($sql->execute()) {
                        $this->insert_logs($username, 'insert_activity_note', '');
                       return 'Added';

                    }  else{

                        return $sql->errorInfo();
                    }

                }

            }


            public function update_activity_note($act_id,$client_name,$phone=null,$act_type,$act_desc,$username){

               // $user_dept_code = $this->get_data_details_one_parameter("employee profile",$username)[0]['DEPARTMENT'];


                if($this->databaseConnection()){

                    $sql = $this->db_connection->prepare('UPDATE tblactivitynotes SET CLIENT_NAME=:client_name, CLIENT_TEL=:phone, NOTE_TYPE=:act_type, NOTE_DESC=:act_desc  WHERE ID=:act_id');
                     $sql->bindParam(':client_name',$client_name);
                     $sql->bindParam(':phone',$phone);
                     $sql->bindParam(':act_type',$act_type);
                     $sql->bindParam(':act_desc',$act_desc);
                     $sql->bindParam(':act_id',$act_id);


                    if ($sql->execute()) {
                        $this->insert_logs($username, 'update_activity_note', $act_id);
                       return 'Updated';


                    }  else{

                        return $sql->errorInfo();
                    }

                }

            }

            public function delete_activity_note($username,$act_id){
                $data = $this->get_data_details_one_parameter("activity note",$act_id);

                if($this->databaseConnection()){

                    $sql = $this->db_connection->prepare('DELETE FROM tblactivitynotes  WHERE ID=:act_id');
                    $sql->bindParam(':act_id', $act_id);

                    if ($sql->execute()) {
                        $this->insert_logs($username,"delete_activity_note",json_encode($data));
                        return 'deleted';

                     }  else{

                         return $sql->errorInfo();
                     }

                }
                return $data;
            }





	//inventory module
            public function show_item_image($item_id){

                if($this->databaseConnection()){

                    $data = [];
                    $sql = $this->db_connection->prepare("SELECT * from tblitemimages WHERE ITEM_ID=:item_id");
                    $sql->bindParam(":item_id",$item_id);

                    try {
                        //code...
                        if($sql->execute()){
                            while($row = $sql->fetch()){
                                array_push($data,$row);
                            }
                            return $data;
                        }

                    } catch (\Throwable $th) {
                        return $th;
                    }



                }
            }


            public function insert_item_image($filename,$item_id){

                if($this->databaseConnection()){
                    $date_time =  date('Y-m-d h:i:sa');
                    $sql = $this->db_connection->prepare('INSERT INTO tblitemimages (ITEM_ID,image_name,created_at) VALUES (:item_id,:image_name,:created_at)');
                    $sql->bindParam(':item_id', $item_id);
                    $sql->bindParam(':image_name', $filename);
                    $sql->bindParam(':created_at',$date_time);

                    if ($sql->execute()) {

                       return 'upload success';

                    }  else{

                        return $sql->errorInfo();
                    }

                }


            }

            public function get_item_image($image_id){

                if($this->databaseConnection()){

                    $data = [];
                    $sql1 = $this->db_connection->prepare("SELECT * FROM tblitemimages WHERE id=:image_id");
                    //$sql1->setFetchMode(PDO::FETCH_ASSOC);
                    $sql1->bindParam(':image_id', $image_id);

                    if($sql1->execute()){

                        while($row = $sql1->fetch()){
                            array_push($data,$row);
                        }
                        return $data;

                    }


                }

            }

            public function delete_image_item ($image_id){

                if($this->databaseConnection()){

                    $sql = $this->db_connection->prepare('DELETE FROM tblitemimages WHERE id=:image_id');
                    $sql->bindParam(':image_id', $image_id);

                    if ($sql->execute()) {

                        return 'delete success';

                     }  else{

                         return $sql->errorInfo();
                     }

                }
            }







                # -------------------------------------------------------------
                #
                # Name       : get_latest_assigned_to_items
                # Purpose    :
                #
                # Returns    : String
                #
                # -------------------------------------------------------------

            public function get_latest_assigned_to_items($itemID){
                if($this->databaseConnection()){

                $data = [];
                $sql = $this->db_connection->prepare("SELECT item_AR.*,CONCAT(ep.FIRST_NAME,' ',ep.LAST_NAME) as EMP_NAME, br.BRANCH as BRANCHNAME FROM tblitemassignreturn as item_AR
                LEFT JOIN tblemployeeprofile as ep on ep.EMPLOYEE_ID = item_AR.EMPLOYEE_ID
                LEFT JOIN tblbranch as br on br.BRANCH_ID = item_AR.BRANCH
                WHERE item_AR.ITEM_ID = :itemid ORDER BY item_AR.ACTIVITY_ID DESC LIMIT 1");
                $sql->setFetchMode(PDO::FETCH_ASSOC);
                $sql->bindParam(':itemid', $itemID);

                if($sql->execute()){
                    while($row = $sql->fetch()){
                        array_push($data,$row);
                    }

                    return $data;
                }

            }

            }
            # -------------------------------------------------------------

            # -------------------------------------------------------------
            #
            # Name       : get_item_brand
            # Purpose    : Get the brand
            #
            # Returns    : Array
            #
            # -------------------------------------------------------------


            public function get_item_brand($brandcode = '')
            {

                if ($this->databaseConnection()) {

                    $data = [];
                    $sql = $this->db_connection->prepare("SELECT * from tblitembrand WHERE BRAND_CODE=:brandcode");
                    $sql->setFetchMode(PDO::FETCH_ASSOC);
                    $sql->bindParam(':brandcode', $brandcode);

                    if ($sql->execute()) {
                        while ($row = $sql->fetch()) {
                            array_push($data, $row);
                        }

                        return $data;
                    }
                }
            }
            //insert item
            public function insert_item_inventory($dept_owner,$itemcat,$brand,$model,$serial_num,$desc,$item_rem,$curr_val,$orig_val,$curr_stat="STOCK"){

                if($this->databaseConnection()){

                    $sql = $this->db_connection->prepare('INSERT INTO tblinventoryitems (BRAND, MODEL, SERIAL_NUMBER, tblinventoryitems.DESCRIPTION, ITEM_CATEGORY, CURR_STATUS, CURR_VALUE,ORIG_VALUE,DEPT_ITEM_OWNER,REMARKS) VALUES (:brand,:model,:serial_number,:description,:itemcat,:curr_status,:curr_val,:orig_val,:dept_owner,:item_rem)');
                    $sql->bindParam(':brand', $brand);
                    $sql->bindParam(':model', $model);
                    $sql->bindParam(':serial_number', $serial_num);
                    $sql->bindParam(':description', $desc);
                    $sql->bindParam(':itemcat', $itemcat);
                    $sql->bindParam(':curr_status',$curr_stat);
                    $sql->bindParam(':curr_val', $curr_val);
                    $sql->bindParam(':orig_val', $orig_val);
                    $sql->bindParam(':item_rem', $item_rem);
                    $sql->bindParam(':dept_owner', $dept_owner);

                    if ($sql->execute()) {

                        return ["new_item_id"=>$this->db_connection->lastInsertId(),"msg" => "add sucess"];

                    }  else{
                        return $sql->errorInfo();
                    }


                }


            }

            # -------------------------------------------------------------
            #
            # Name       : dispose_item_inventory
            # Purpose    : Update the deleted_at field  in tblinventoryitems
            #
            # Returns    : String
            #
            # -------------------------------------------------------------
            public function dispose_item_inventory($item_id){
                if($this->databaseConnection()){
                    $date_time =  date('Y-m-d h:i:sa');
                    $sql = $this->db_connection->prepare('UPDATE tblinventoryitems SET DELETED_AT=:curr_datetime WHERE ITEM_ID=:item_ID');

                    $sql->bindParam('curr_datetime',$date_time);
                    $sql->bindParam('item_ID', $item_id);

                    if($sql->execute()){

                        return 'dispose success';
                    }
                    else{
                        return $sql->errorInfo();
                    }

                }
            }

            # -------------------------------------------------------------


            # -------------------------------------------------------------
            #
            # Name       : update_item_inventory
            # Purpose    : Update the field  in tblinventoryitems
            #
            # Returns    : String
            #
            # -------------------------------------------------------------

            public function update_item_inventory($item_id,$dept_owner,$itemcat,$brand,$model,$serial_num,$desc,$item_rem,$curr_val,$orig_val){

                if($this->databaseConnection()){

                    $sql = $this->db_connection->prepare('UPDATE tblinventoryitems SET BRAND=:brand, MODEL=:model, SERIAL_NUMBER=:serial_number, tblinventoryitems.DESCRIPTION=:description, ITEM_CATEGORY=:itemcat, CURR_VALUE=:curr_val, ORIG_VALUE=:orig_val, REMARKS=:item_rem, DEPT_ITEM_OWNER=:dept_owner WHERE ITEM_ID=:item_id');
                    $sql->bindParam(':brand', $brand);
                    $sql->bindParam(':model', $model);
                    $sql->bindParam(':serial_number', $serial_num);
                    $sql->bindParam(':description', $desc);
                    $sql->bindParam(':itemcat', $itemcat);
                    $sql->bindParam(':curr_val', $curr_val);
                    $sql->bindParam(':orig_val', $orig_val);
                    $sql->bindParam(':item_rem', $item_rem);
                    $sql->bindParam(':dept_owner', $dept_owner);
                    $sql->bindParam(':item_id',$item_id);

                    if ($sql->execute()) {

                        return 'edit sucess';
                    }  else{
                        return $sql->errorInfo();
                    }


                }

            }

            # -------------------------------------------------------------

            # -------------------------------------------------------------
            #
            # Name       : get_item_inventory_single
            # Purpose    : Get the Item as Single
            #
            # Returns    : Array
            #
            # -------------------------------------------------------------

            public function get_item_inventory_single($cols="*",$itemid){

                if ($this->databaseConnection()) {

                    $data = [];
                    $sql = $this->db_connection->prepare("SELECT {$cols} from tblinventoryitems
                    LEFT JOIN tblitembrand on tblitembrand.BRAND_CODE = tblinventoryitems.BRAND
                    WHERE tblinventoryitems.ITEM_ID=:itemid");
                    $sql->setFetchMode(PDO::FETCH_ASSOC);
                    $sql->bindParam(':itemid', $itemid);

                    if ($sql->execute()) {
                        while ($row = $sql->fetch()) {
                            array_push($data, $row);
                        }

                        return $data;
                    }
                }
            }
            # -------------------------------------------------------------



            # -------------------------------------------------------------
            #
            # Name       : assign_item
            # Purpose    : Assigning the item to users
            #
            # Returns    : String
            #
            # -------------------------------------------------------------

            public function assign_item($emp_id=null,$item_id,$date_assign,$location,$branch)
            {
                $dateformatted = date_create($date_assign);
                    $newdateassign = date_format($dateformatted,"Y-m-d");
                    if ($emp_id == ''){$emp_id=null;}


                if($this->databaseConnection()){
                    $sql = $this->db_connection->prepare("INSERT INTO tblitemassignreturn (EMPLOYEE_ID, ITEM_ID, DATE_ASSIGN, tblitemassignreturn.LOCATION, BRANCH)
                    VALUES(:emp_id,:item_id,:date_assign,:item_location,:branch)");

                        $sql->bindParam(':emp_id', $emp_id);
                        $sql->bindParam(':item_id', $item_id);
                        $sql->bindParam(':date_assign', $newdateassign);
                        $sql->bindParam(':item_location', $location);
                        $sql->bindParam(':branch', $branch);

                        if ($sql->execute()) {

                        $sql1 = $this->db_connection->prepare("UPDATE tblinventoryitems SET CURR_STATUS=:curr_stat WHERE ITEM_ID=:item_id");
                        $status ="ISSUED";
                        $sql1->bindParam(':curr_stat', $status);
                        $sql1->bindParam(':item_id', $item_id);

                        if($sql1->execute()){
                            return 'assign sucess';
                        }


                    }  else{
                        return $sql->errorInfo();
                    }

                }
            }
            # -------------------------------------------------------------


            # -------------------------------------------------------------
            #
            # Name       : return_inventory_item
            # Purpose    : Returning the Item
            #
            # Returns    : Array
            #
            # -------------------------------------------------------------

            public function return_inventory_item($item_id)
            {

                if($this->databaseConnection()){
                $sql = $this->db_connection->prepare("SELECT * FROM tblitemassignreturn WHERE ITEM_ID =:item_id ORDER BY ACTIVITY_ID DESC LIMIT 1");
                $data = [];
                $stat = "STOCK";
                        $sql->bindParam(':item_id', $item_id);

                        if ($sql->execute()) {

                        while ($row = $sql->fetch()) {
                            array_push($data, $row);
                        }

                        $activity_ID = $data[0]['ACTIVITY_ID'];

                        $dateformatted = date_create($_POST['returndate']);
                        $newdatereturn = date_format($dateformatted,"Y-m-d");
                        $sql1 = $this->db_connection->prepare("UPDATE tblitemassignreturn SET DATE_RETURN=:returndate WHERE ACTIVITY_ID=:activity_id");
                        $sql1->bindParam(':activity_id', $activity_ID);
                        $sql1->bindParam(':returndate', $newdatereturn);


                        if($sql1->execute()){

                            $sql2 = $this->db_connection->prepare("UPDATE tblinventoryitems SET CURR_STATUS=:status_return WHERE ITEM_ID=:itemid");
                            $sql2->bindParam(':itemid',$item_id);
                            $sql2->bindParam(':status_return',$stat);


                            if($sql2->execute()){
                                return 'return success';
                            }

                        }else{
                            return $sql->errorInfo();
                        }

                        //return $_POST;
                    }  else{
                        return $sql->errorInfo();
                    }
                }

            }

            # -------------------------------------------------------------



            # -------------------------------------------------------------
            #
            # Name       : get_item_history
            # Purpose    : Getting the History
            #
            # Returns    : Array
            #
            # -------------------------------------------------------------

            public function get_item_history($item_id){

                if ($this->databaseConnection()) {

                    $data = [];
                    $sql = $this->db_connection->prepare("SELECT ar.*,CONCAT(ep.FIRST_NAME,' ',ep.LAST_NAME) as EMP_NAME,br.*
                    FROM tblitemassignreturn as ar
                    LEFT JOIN tblemployeeprofile as ep on ep.EMPLOYEE_ID = ar.EMPLOYEE_ID
                    LEFT JOIN tblbranch as br on br.BRANCH_ID = ar.BRANCH

                    WHERE ar.ITEM_ID=:itemid ORDER BY ar.ACTIVITY_ID DESC");
                    $sql->setFetchMode(PDO::FETCH_ASSOC);
                    $sql->bindParam(':itemid', $item_id);

                    if ($sql->execute()) {
                        while ($row = $sql->fetch()) {
                            array_push($data, $row);
                        }

                        return $data;
                    }
                }



            }
            # -------------------------------------------------------------


            # -------------------------------------------------------------
            #
            # Name       : add_item_category
            # Purpose    : Add Category data
            #
            # Returns    : String
            #
            # -------------------------------------------------------------

            public function add_item_category($catcode,$catname){
                if ($this->databaseConnection()) {

                    $sql = $this->db_connection->prepare('INSERT INTO tblitemcategory (ITEM_CATEGORY, CATEG_NAME)
                    VALUES (:catcode,:catname)');
                    $sql->bindParam(':catcode', $catcode);
                    $sql->bindParam(':catname', $catname);

                    if ($sql->execute()) {

                        return  "add success";

                    }  else{
                        return $sql->errorInfo();
                    }
                }
            }
            # -------------------------------------------------------------


            # -------------------------------------------------------------
            #
            # Name       : get_cat_single
            # Purpose    : Get the Category as single array
            #
            # Returns    : Array
            #
            # -------------------------------------------------------------
            public function get_cat_single($catcode){

                if ($this->databaseConnection()) {

                    $data = [];
                    $sql = $this->db_connection->prepare("SELECT * from tblitemcategory WHERE ITEM_CATEGORY=:catcode");
                    $sql->setFetchMode(PDO::FETCH_ASSOC);
                    $sql->bindParam(':catcode', $catcode);

                    if ($sql->execute()) {
                        while ($row = $sql->fetch()) {
                            array_push($data, $row);
                        }

                        return $data;
                    }
                }
            }

            # -------------------------------------------------------------


            # -------------------------------------------------------------
            public function assign_cat_dept($dept,$cat){
                if($this->databaseConnection()){

                    $date_time =  date('Y-m-d h:i:sa');
                    $sql = $this->db_connection->prepare("INSERT INTO tbldepthasitemcategory (ITEM_CATEGORY,DEPARTMENT_ID,ASSIGN_AT) VALUES(:item_cat,:dept_id,:assign_at)");
                    $sql->bindParam(':item_cat', $cat);
                    $sql->bindParam(':dept_id', $dept);
                    $sql->bindParam(':assign_at',$date_time);

                      try {
                        if ($sql->execute()) {
                            return  "assign success";
                        }
                      } catch (\Throwable $th) {
                          return $th;
                      }

                }

            }

            public function get_assigned_cat_dept($dept){
                if ($this->databaseConnection()) {

                    $data = [];
                    $sql = $this->db_connection->prepare("SELECT * from tbldepthasitemcategory WHERE DEPARTMENT_ID=:dept");
                    $sql->setFetchMode(PDO::FETCH_ASSOC);
                    $sql->bindParam(':dept', $dept);

                    if ($sql->execute()) {
                        while ($row = $sql->fetch()) {
                            array_push($data, $row);
                        }

                        return $data;
                    }
                }
            }



            # -------------------------------------------------------------
            #
            # Name       : update_cat
            # Purpose    : Update the fields of the Category
            #
            # Returns    : Array
            #
            # -------------------------------------------------------------
            public function update_cat($cat_code,$cat_name)
            {
                if ($this->databaseConnection()) {
                $sql = $this->db_connection->prepare("UPDATE tblitemcategory SET CATEG_NAME=:cat_name WHERE ITEM_CATEGORY=:cat_code");
                        $sql->bindParam(':cat_code', $cat_code);
                        $sql->bindParam(':cat_name', $cat_name);


                        if ($sql->execute()) {

                            return  "update success";

                        }  else{
                            return $sql->errorInfo();
                        }

                    }
            }


            # -------------------------------------------------------------
            #
            # Name       : delete_cat
            # Purpose    : Update the deleted_at field in the Category
            #
            # Returns    : Array
            #
            # -------------------------------------------------------------

            public function delete_cat($cat_code){
                if($this->databaseConnection()){
                    $date_time =  date('Y-m-d h:i:sa');
                    $sql = $this->db_connection->prepare('UPDATE tblitemcategory SET DELETED_AT=:curr_datetime WHERE ITEM_CATEGORY=:cat_code');

                    $sql->bindParam('curr_datetime',$date_time);
                    $sql->bindParam('cat_code', $cat_code);

                    if($sql->execute()){

                        return 'delete success';
                    }
                    else{
                        return $sql->errorInfo();
                    }

                }
            }
            # -------------------------------------------------------------


            # -------------------------------------------------------------
            #
            # Name       : add_brand
            # Purpose    : Add new Brand
            #
            # Returns    : Array
            #
            # -------------------------------------------------------------




            public function assign_brand_cat($brand_code,$cat){
                if($this->databaseConnection()){

                    $date_time =  date('Y-m-d h:i:sa');
                    $brand_id  = $this->get_brand($brand_code)[0]['BRAND'];
                    $sql = $this->db_connection->prepare("INSERT INTO tblcathasbrand (BRAND,ITEM_CATEGORY,ASSIGNED_AT) VALUES(:brand,:cat,:assign_at)");
                    $sql->bindParam(':brand', $brand_id);
                    $sql->bindParam(':cat', $cat);
                    $sql->bindParam(':assign_at',$date_time);

                      try {
                        if ($sql->execute()) {
                            return  "assign success";
                        }
                      } catch (\Throwable $th) {
                          return $th;
                      }
                }

            }


            # -------------------------------------------------------------
            #
            # Name       : add_brand
            # Purpose    : Add new Brand
            #
            # Returns    : Array
            #
            # -------------------------------------------------------------

            public function add_brand($brand_code,$brand_name)
            {
                if($this->databaseConnection()){

                    $sql = $this->db_connection->prepare('INSERT INTO tblitembrand (BRAND_CODE,BRANDNAME) VALUES(:brand_code,:brand_name)');
                    $sql->bindParam('brand_code',$brand_code);
                    $sql->bindParam('brand_name', $brand_name);
                   // $sql->bindParam('category', $category);

                    try {
                        if($sql->execute()){

                            return ['msg'=> "add success"];
                        }
                    } catch (\Throwable $th) {
                        return ['msg'=> $th] ;
                    }
                }
            }

            # -------------------------------------------------------------



            # -------------------------------------------------------------
            #
            # Name       : get_brand
            # Purpose    : Get Brand data
            #
            # Returns    : Array
            #
            # -------------------------------------------------------------

            public function get_brand($brand_code){

                if ($this->databaseConnection()) {
                    $data = [];
                    $sql = $this->db_connection->prepare("SELECT * FROM tblitembrand WHERE DELETED_AT is null AND BRAND_CODE=:brand_code");


                    $sql->setFetchMode(PDO::FETCH_ASSOC);
                    $sql->bindParam(':brand_code', $brand_code);

                    try {
                        if ($sql->execute()) {
                            while ($row = $sql->fetch()) {
                                array_push($data, $row);
                            }

                            return $data;
                        }
                    } catch (\Throwable $th) {
                        return $th;
                    }


                }
            }

            # -------------------------------------------------------------




            # -------------------------------------------------------------
            #
            # Name       : edit_brand
            # Purpose    : To Edit the data in Brand
            #
            # Returns    : Array
            #
            # -------------------------------------------------------------
            public function edit_brand($brand_code,$brand_name)
            {
                if($this->databaseConnection()){

                    $sql = $this->db_connection->prepare('UPDATE tblitembrand SET BRANDNAME=:brand_name WHERE BRAND_CODE=:brand_code');
                    $sql->bindParam('brand_code',$brand_code);
                    $sql->bindParam('brand_name', $brand_name);

                    try {
                        if($sql->execute()){

                            return ['msg'=> "edit success"];
                        }
                    } catch (\Throwable $th) {
                        return ['msg'=> $th] ;
                    }
                }
            }

            # -------------------------------------------------------------
            #
            # Name       : delete_brand
            # Purpose    : To Update the deleted_at in Brand
            #
            # Returns    : Array
            #
            # -------------------------------------------------------------

            public function delete_brand($brand_code){

                if($this->databaseConnection()){
                $sql = $this->db_connection->prepare('UPDATE tblitembrand SET DELETED_AT=:date_time  WHERE BRAND_CODE=:brand_code');
                $date_time =  date('Y-m-d h:i:sa');
                $sql->bindParam('brand_code',$brand_code);
                $sql->bindParam('date_time', $date_time);

                try {
                    if($sql->execute()){

                        return ['msg'=> "delete success"];
                    }
                } catch (\Throwable $th) {
                    return ['msg'=> $th] ;
                }


                }
                }
            # -------------------------------------------------------------


            public function get_assigned_brand_cat($cat){
                if ($this->databaseConnection()) {

                    $data = [];
                    $sql = $this->db_connection->prepare("SELECT cat_brand.*,bra.BRAND_CODE from tblcathasbrand as cat_brand
                    LEFT JOIN tblitembrand as bra on bra.BRAND = cat_brand.BRAND
                     WHERE ITEM_CATEGORY=:cat");
                    $sql->setFetchMode(PDO::FETCH_ASSOC);
                    $sql->bindParam(':cat', $cat);

                    if ($sql->execute()) {
                        while ($row = $sql->fetch()) {
                            array_push($data, $row);
                        }
                        return $data;
                    }
                }
            }

    //++++++++++++++++++++++++++++++++++++++changes lemar bill +++++++++++++++++++++++++++++++++++++++



    # -------------------------------------------------------------
    #
    # Name       : generate_meeting_permission_check_box
    # Purpose    : Generates permission check box
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function generate_meeting_permission_check_box($username){
        if ($this->databaseConnection()) {
            $counter = 0;
            $column = '';
            $status = '1';

            $employee_details = $this->get_data_details_one_parameter('employee profile', $username);
            $employee_id = $employee_details[0]['EMPLOYEE_ID'];

            $sql = $this->db_connection->prepare("SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, MIDDLE_NAME, SUFFIX FROM tblemployeeprofile WHERE EMPLOYMENT_STATUS = :status AND EMPLOYEE_ID NOT LIKE 'USER-%' AND EMPLOYEE_ID != :employee_id ORDER BY FIRST_NAME");
            $sql->bindParam(':status', $status);
            $sql->bindParam(':employee_id', $employee_id);

            if($sql->execute()){
                $column .= '<div class="table-responsive">
                                    <table class="table table-bordered mb-0">
                                        <thead>
                                            <tr>
                                                <th>Employee</th>
                                                <th>View</th>
                                                <th>Approve</th>
                                                <th>Update To Pending</th>
                                                <th>Set Permission</th>
                                            </tr>
                                        </thead>
                                        <tbody>';

                while($row = $sql->fetch()){
                    $employee_id = trim($row['EMPLOYEE_ID']);
                    $first_name = trim($row['FIRST_NAME']);
                    $last_name = trim($row['LAST_NAME']);
                    $middle_name = trim($row['MIDDLE_NAME']);
                    $suffix = trim($row['SUFFIX']);
                    $fullname = $this->get_full_name($first_name, $middle_name, $last_name, $suffix)[0]['REVERSE_FULL_NAME'];

                    $column .= '<tr>
                            <th scope="row">'. $fullname .'</th>
                            <td>
                                <div class="form-check form-switch mb-3">
                                    <input class="form-check-input employee-meeting-permission" type="checkbox" id="'. $employee_id .'-V" value="'. $employee_id .'-V">
                                </div>
                            </td>
                            <td>
                                <div class="form-check form-switch mb-3">
                                    <input class="form-check-input employee-meeting-permission" type="checkbox" id="'. $employee_id .'-A" value="'. $employee_id .'-A">
                                </div>
                            </td>
                            <td>
                                <div class="form-check form-switch mb-3">
                                    <input class="form-check-input employee-meeting-permission" type="checkbox" id="'. $employee_id .'-P" value="'. $employee_id .'-P">
                                </div>
                            </td>
                            <td>
                                <div class="form-check form-switch mb-3">
                                    <input class="form-check-input employee-meeting-permission" type="checkbox" id="'. $employee_id .'-S" value="'. $employee_id .'-S">
                                </div>
                            </td>
                        </tr>';
                }

                $column .= '</tbody>
                        </table>
                    </div>';

                return $column;
            }
            else{
                return $sql->errorInfo();
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : generate_dashboard_monitoring_widgets
    # Purpose    : Generates dashboard widgets
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function generate_dashboard_monitoring_widgets($items_per_row, $username){
        if ($this->databaseConnection()) {
            $dashboard = '';
            $i = 0;

            $sql = $this->db_connection->prepare("SELECT PERMISSION_ID FROM tblpermission WHERE PAGE_ID = '58' AND PERMISSION_ID IN (SELECT PERMISSION_ID FROM tblrolepermission WHERE ROLE_ID IN (SELECT ROLE_ID FROM tblroleuser WHERE USERNAME = :username AND ROLE_ID IN (SELECT ROLE_ID FROM tblrole WHERE ACTIVE = '1')));");
            $sql->bindParam(':username', $username);

            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    $class = $this->get_column_size($items_per_row, $count);

                    while($row = $sql->fetch()){
                        $permission_id = trim($row['PERMISSION_ID']);

                        if($i % $items_per_row == 0){
                            $dashboard .= '<div class="row">';
                        }

                        if($permission_id == '283'){
                            $leave_approval_page = $this->check_role_permissions($username, 283);

                            if($leave_approval_page > 0){
                                $shortcut = '<div class="col-md-6">
                                    <div class="float-end">
                                    <a href="leave-approval.php" class="btn btn-primary btn-sm waves-effect waves-light me-2 w-md mb-2">View Leave Approval</a>
                                    </div>
                                </div>';
                            }

                            $dashboard .= '<div class="col-md-12">
                                                <div class="card">
                                                    <div class="card-body">
                                                        <div class="row">
                                                            <div class="col-md-6">
                                                                <h4 class="card-title mb-4">Leave Approval</h4>
                                                            </div>
                                                            '. $shortcut .'
                                                        </div>
                                                        <div class="row md-12">
                                                            <div class="col-md-12">
                                                                <table id="leaves-datatable" class="table table-bordered align-middle mb-0 table-hover table-striped dt-responsive nowrap w-100">
                                                                    <thead>
                                                                        <tr>
                                                                            <th class="all" style="width:30%">Employee</th>
                                                                        <th class="all" style="width:20%">Leave</th>
                                                                        <th class="all" style="width:15%">Available Leave</th>
                                                                            <th class="all" style="width:20%">Date</th>
                                                                        <th class="all">Reason</th>
                                                                        <th class="none">Date Filed </th>
                                                                        <th class="all">Attachment </th>
                                                                            <th class="all" style="width:15%">Action</th>
                                                                        </tr>
                                                                    </thead>
                                                                    <tbody></tbody>
                                                                </table>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>';
                        }





                        if($i % $items_per_row == ($items_per_row-1)){
                            $dashboard .= '</div>';
                        }

                        if($i < $count){
                            $i++;
                        }
                    }
                }

                return $dashboard;
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : generate_notification_list
    # Purpose    : Generates permission check box
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function generate_notification_list($employee_id){
        if ($this->databaseConnection()) {
            $notification_list = '';
            $system_date = date('Y-m-d');

            $sql = $this->db_connection->prepare('SELECT NOTIFICATION_ID, NOTIFICATION_FROM, STATUS, NOTIFICATION_TITLE, NOTIFICATION, LINK, NOTIFICATION_DATE, NOTIFICATION_TIME FROM tblnotifications WHERE NOTIFICATION_TO = :employee_id ORDER BY NOTIFICATION_DATE DESC, NOTIFICATION_TIME DESC LIMIT 50');
            $sql->bindParam(':employee_id', $employee_id);

            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    while($row = $sql->fetch()){
                        $notification_id = trim($row['NOTIFICATION_ID']);
                        $notification_from = trim($row['NOTIFICATION_FROM']);
                        $status = $row['STATUS'];
                        $notification_title = trim($row['NOTIFICATION_TITLE']);
                        $notification = trim($row['NOTIFICATION']);
                        $notification_date = $this->check_date('empty', $row['NOTIFICATION_DATE'], '', 'd M Y', '', '', '');
                        $notification_time = $this->check_date('empty', trim($row['NOTIFICATION_TIME']), '', 'h:i:s a', '', '', '');
                        $notification_id_encrypted = $this->encrypt_data($notification_id);

                        $date_diff = round((strtotime($notification_date) - strtotime($system_date)) / (60 * 60 * 24));

                        if($date_diff <= 7){
                            $date_elapsed = $this->time_elapsed_string($notification_date .' '. $notification_time);
                        }
                        else{
                            $date_elapsed = $notification_date .' '. $notification_time;
                        }

                        if($status == 0){
                            $text_color = 'text-primary';
                        }
                        else{
                            $text_color = '';
                        }

                        if(!empty($row['LINK'])){
                            $link = $row['LINK'] . '?notification=' . $notification_id_encrypted;
                        }
                        else{
                            $link = 'javascript: void(0);';
                        }

                        if($notification_from == 'System'){
                            $avatar = '<div class="avatar-xs me-3">
                                            <span class="avatar-title bg-info rounded-circle font-size-16">
                                                <i class="bx bx-info-circle"></i>
                                            </span>
                                        </div>';
                        }
                        else{
                            $notification_from_details = $this->get_data_details_one_parameter('employee profile', $notification_from);
                            $profile_image = $this->check_profile_image($notification_from_details[0]['PROFILE_IMAGE'] ?? null);

                            $avatar = '<img src="'. $profile_image .'" class="me-3 rounded-circle avatar-xs" alt="user-pic">';
                        }

                        $notification_list .= '<a href="'. $link .'" class="text-reset notification-item" data-notificationid="'. $notification_id .'">
                                                    <div class="d-flex">
                                                        <div class="flex-shrink-0 me-3">
                                                            '. $avatar .'
                                                        </div>
                                                        <div class="flex-grow-1">
                                                            <h6 class="mb-1 '. $text_color .'" key="t-your-order">'. $notification_title .'</h6>
                                                            <div class="font-size-12 text-muted">
                                                                <p class="mb-1" key="t-grammer">'. $notification .'</p>
                                                                <p class="mb-0"><i class="mdi mdi-clock-outline"></i> <span key="t-min-ago">'. $date_elapsed .'</span></p>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </a>';
                    }
                }
                else{
                    $notification_list .= '<a href="javascript: void(0);" class="text-reset notification-item">
                                                <p class="mb-1 text-center" key="t-grammer">No New Notifications</p>
                                            </a>';
                }

                return $notification_list;
            }
            else{
                return $sql->errorInfo();
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : generate_documents
    # Purpose    : Generates documents options of dropdown
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function generate_documents($category){
        if ($this->databaseConnection()) {
            $option = '';

            $sql = $this->db_connection->prepare('SELECT DOCUMENT_ID, DOCUMENT_NAME, UPLOAD_DATE FROM tbldocument WHERE DOCUMENT_CATEGORY = :category ORDER BY PUBLISH_DATE DESC, PUBLISH_TIME DESC');
            $sql->bindParam(':category', $category);

            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    while($row = $sql->fetch()){
                        $document_id = trim($row['DOCUMENT_ID']);
                        $document_name = trim($row['DOCUMENT_NAME']);
                        $upload_date = $this->check_date('empty', $row['UPLOAD_DATE'], '', 'F d, Y', '', '', '');

                        $option .= "<option value='". $document_id ."'>". $document_name ." - ". $upload_date ."</option>";
                    }

                    return $option;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : generate_previous_meeting_options
    # Purpose    : Generates previous meeting options of dropdown
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function generate_previous_meeting_options($username){
        if ($this->databaseConnection()) {
            $option = '';

            $employee_details = $this->get_data_details_one_parameter('employee profile', $username);
            $employee_id = $employee_details[0]['EMPLOYEE_ID'];

            $sql = $this->db_connection->prepare("SELECT DISTINCT(tblmeeting.MEETING_ID) AS MEETING_ID, TITLE, MEETING_DATE FROM tblmeeting
            LEFT OUTER JOIN tblmeetingattendees ON tblmeetingattendees.MEETING_ID = tblmeeting.MEETING_ID
            LEFT OUTER JOIN tblmeetingabsentattendees ON tblmeetingabsentattendees.MEETING_ID = tblmeeting.MEETING_ID
            WHERE STATUS = '1' AND (AUTHOR = :employee_id OR tblmeetingattendees.EMPLOYEE_ID = :employee_id OR tblmeetingabsentattendees.EMPLOYEE_ID = :employee_id)
            ORDER BY MEETING_DATE DESC");
            $sql->bindParam(':employee_id', $employee_id);

            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    while($row = $sql->fetch()){
                        $meeting_id = trim($row['MEETING_ID']);
                        $title = trim($row['TITLE']);
                        $meeting_date = $this->check_date('empty', trim($row['MEETING_DATE']), '', 'F d, Y', '', '', '');

                        $option .= "<option value='". $meeting_id ."'>". $title ." - ". $meeting_date ."</option>";
                    }

                    return $option;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : generate_meeting_table
    # Purpose    : Generates meeting table
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function generate_meeting_table($type, $meeting_id){
        if ($this->databaseConnection()) {

            $meeting_details = $this->get_data_details_one_parameter('meeting', $meeting_id);
            $meeting_type = $meeting_details[0]['MEETING_TYPE'];

            if(empty($type)){
                $table = '<table class="table table-wrap table-bordered" style="table-layout: fixed;">
                            <thead>
                                <tr>
                                    <th width="12%">Agenda</th>
                                    <th width="33%">Points of Discussion</th>
                                    <th width="15%">Person Responsible</th>
                                    <th width="12%">Status</th>
                                    <th width="12%">Due Date</th>
                                    <th width="12%">New Due Date</th>
                                </tr>
                            </thead>
                            <tbody>';

                $sql = $this->db_connection->prepare("SELECT TASK_ID, AGENDA, TASK, EMPLOYEE_ID, DEPARTMENT, STATUS, DUE_DATE_TYPE, DUE_DATE, NEW_DUE_DATE FROM tblmeetingtask WHERE MEETING_ID = :meeting_id AND AGENDA != 'PREVIOUSUPDATES' ORDER BY AGENDA, EMPLOYEE_ID");
            }
            else{
                $table = '<table class="table table-wrap table-bordered" style="table-layout: fixed;">
                                <thead>
                                    <tr>
                                        <th width="55%">Points of Discussion</th>
                                        <th width="20%">Person Responsible</th>
                                        <th width="10%">Status</th>
                                        <th width="15%">Due Date</th>
                                    </tr>
                                </thead>
                                <tbody>';

                $sql = $this->db_connection->prepare("SELECT AGENDA, TASK, EMPLOYEE_ID, DEPARTMENT, STATUS, DUE_DATE_TYPE, DUE_DATE, NEW_DUE_DATE FROM tblmeetingtask WHERE MEETING_ID = :meeting_id AND AGENDA = :type ORDER BY AGENDA, EMPLOYEE_ID");
                $sql->bindParam(':type', $type);
            }

            $sql->bindParam(':meeting_id', $meeting_id);

            $all_task_arr = [];

            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    while($row = $sql->fetch()){
                        array_push($all_task_arr,$row);
                        $agenda = trim($row['AGENDA']);
                        $task = $row['TASK'];
                        $person = json_decode($row['EMPLOYEE_ID']);
                        $status = $row['STATUS'];
                        $agenda_task_status = $this->get_agenda_task_status($status)[0]['STATUS'];
                        $due_date_type = $row['DUE_DATE_TYPE'];
                        $new_due_date = $this->check_date('empty', trim($row['NEW_DUE_DATE'] ), '', 'm/d/y', '', '', '');

                       // $department_details = $this->get_data_details_one_parameter('department', $row['DEPARTMENT']);

                        if($meeting_type == 'MANCOMMEETING'){
                          // $meeting_agenda = $department_details[0]['DEPARTMENT'];
                           $meeting_agenda = $this->get_system_description('MEETINGAGENDA', $agenda);
                        }
                        else{
                            $meeting_agenda = $this->get_system_description('MEETINGAGENDA', $agenda);
                        }

                        // $employee_details = $this->get_data_details_one_parameter('employee profile', $person);
                        // $employee_first_name = $employee_details[0]['FIRST_NAME'];
                        // $employee_last_name = $employee_details[0]['LAST_NAME'];
                        // $employee_middle_name = $employee_details[0]['MIDDLE_NAME'];
                        // $employee_suffix = $employee_details[0]['SUFFIX'];
                        // $employee_fullname = $this->get_full_name($employee_first_name, $employee_middle_name, $employee_last_name, $employee_suffix)[0]['FIRST_LAST'];



                        //for old meetings
                    if(gettype($person) == 'integer'){

                        $employee_details = $this->get_data_details_one_parameter('employee profile', json_encode ($person));
                        $employee_first_name = $employee_details[0]['FIRST_NAME'] ?? null;
                        $employee_last_name = $employee_details[0]['LAST_NAME'] ?? null;
                        $employee_middle_name = $employee_details[0]['MIDDLE_NAME'] ?? null;
                        $employee_suffix = $employee_details[0]['SUFFIX'] ?? null;
                        $employee_fullname = $this->get_full_name($employee_first_name, $employee_middle_name, $employee_last_name, $employee_suffix)[0]['REVERSE_FULL_NAME'];

                    //for new meetings
                    }else if(gettype($person) == 'array'){

                        $employee_fullname = '';
                        foreach ($person as  $value) {
                                $employee_details = $this->get_data_details_one_parameter('employee profile', $value);
                                $employee_first_name = $employee_details[0]['FIRST_NAME'] ?? null;
                                $employee_last_name = $employee_details[0]['LAST_NAME'] ?? null;
                                $employee_middle_name = $employee_details[0]['MIDDLE_NAME'] ?? null;
                                $employee_suffix = $employee_details[0]['SUFFIX'] ?? null;
                            $employee_fullname .= $this->get_full_name($employee_first_name, $employee_middle_name, $employee_last_name, $employee_suffix)[0]['REVERSE_FULL_NAME'].' <br> ';
                        }

                    }




                        if($due_date_type == 'SPECIFICDATE'){
                            $due_date = $this->check_date('empty', trim($row['DUE_DATE']), '', 'm/d/y', '', '', '');
                        }
                        else{
                            $due_date = $this->get_system_description('DUEDATETYPE', $due_date_type);
                        }

                        if(empty($type)){
                            $table .= ' <tr>
                                            <td>'. $meeting_agenda .'</td>
                                            <td>'. $task.'</td>
                                            <td>'. $employee_fullname .'</td>
                                            <td>'. $agenda_task_status .'</td>
                                            <td>'. $due_date .'</td>
                                            <td>'. $new_due_date .'</td>
                                        </tr>';
                        }
                        else{
                            $table .= '<tr>
                                            <td>'. $task .'</td>
                                            <td>'. $employee_fullname .'</td>
                                            <td>'. $agenda_task_status .'</td>
                                            <td>'. $due_date .'</td>
                                        </tr>';
                        }
                    }

                    $table .= ' </tr>
                            </tbody>
                        </table>';
                }
                else{
                    $table = '';
                }

                return $table;
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : generate_meeting_memos
    # Purpose    : Generates meeting memo
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function generate_meeting_memos($meeting_id){
        if ($this->databaseConnection()) {

            $list = '<ul>';

            $sql = $this->db_connection->prepare("SELECT DOCUMENT_ID FROM tblmeetingmemo WHERE MEETING_ID = :meeting_id");
            $sql->bindParam(':meeting_id', $meeting_id);

            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    while($row = $sql->fetch()){
                        $document_id = trim($row['DOCUMENT_ID']);

                        $document_details = $this->get_data_details_one_parameter('document', $document_id);

                        $document_name = ucfirst(strtolower($document_details[0]['DOCUMENT_NAME']?? null));

						if(!empty($document_name)){
							$list .= '<li>' . $document_name . '</li>';
						}

                    }

                    $list .= '</ul>';
                }
                else{
                    $list = '';
                }

                return $list;
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    #
    # Name       : generate_meeting_other_matters
    # Purpose    : Generates meeting other matters
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function generate_meeting_other_matters($meeting_id){
        if ($this->databaseConnection()) {

            $list = '<ul>';

            $sql = $this->db_connection->prepare("SELECT OTHER_MATTERS FROM tblmeetingothermatters WHERE MEETING_ID = :meeting_id");
            $sql->bindParam(':meeting_id', $meeting_id);

            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    while($row = $sql->fetch()){
                        $other_matters = trim($row['OTHER_MATTERS']);

                        $list .= '<li>' . $other_matters . '</li>';
                    }

                    $list .= '</ul>';
                }
                else{
                    $list = '';
                }

                return $list;
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }




    public function generate_menus(){
        if ($this->databaseConnection()) {

            $list =[];

            $sql = $this->db_connection->prepare("SELECT * FROM  menu_item ");
            $sql->setFetchMode(PDO::FETCH_ASSOC);


            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    while($row = $sql->fetch()){

                        array_push($list,$row);

                    }


                }
                else{

                }

                return $list;
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
        }


        /**
 * Get HR announcements with optional filtering
 */
public function get_hr_announcements($type = null, $department = null, $branch = null) {
    if ($this->databaseConnection()) {
        $query = "
            SELECT
                id,
                title,
                content,
                type,
                start_date,
                end_date,
                attachment,
                is_priority,
                department,
                branch,
                created_by,
                created_at
            FROM
                hr_announcements
            WHERE
                status = 'active'
                AND (end_date IS NULL OR end_date >= CURRENT_DATE())";

        $params = [];

        // Add type filter if specified
        if ($type) {
            $query .= " AND type = ?";
            $params[] = $type;
        }

        // Add department filter if specified
        if ($department) {
            $query .= " AND (department IS NULL OR department = ?)";
            $params[] = $department;
        }

        // Add branch filter if specified
        if ($branch) {
            $query .= " AND (branch IS NULL OR branch = ?)";
            $params[] = $branch;
        }

        $query .= " ORDER BY is_priority DESC, start_date DESC, created_at DESC";

        $sql = $this->db_connection->prepare($query);

        if (!$sql->execute($params)) {
            error_log("Error fetching HR announcements: " . json_encode($sql->errorInfo()));
            return false;
        }

        return $sql->fetchAll(PDO::FETCH_ASSOC);
    }

    return false;
}

/**
 * Create a new HR announcement
 */
public function create_hr_announcement($data) {
    if ($this->databaseConnection()) {
        $query = "
            INSERT INTO hr_announcements (
                title,
                content,
                type,
                start_date,
                end_date,
                attachment,
                is_priority,
                department,
                branch,
                created_by
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

        $sql = $this->db_connection->prepare($query);

        $result = $sql->execute([
            $data['title'],
            $data['content'],
            $data['type'],
            $data['start_date'],
            $data['end_date'] ? $data['end_date'] : null,
            $data['attachment'] ? $data['attachment'] : null,
            $data['is_priority'] ? 1 : 0,
            $data['department'] ? $data['department'] : null,
            $data['branch'] ? $data['branch'] : null,
            $data['created_by']
        ]);

        if ($result) {
            return $this->db_connection->lastInsertId();
        }

        error_log("Error creating HR announcement: " . json_encode($sql->errorInfo()));
        return false;
    }

    return false;
}

/**
 * Optional: Get HR policy documents
 */
public function get_hr_policies() {
    if ($this->databaseConnection()) {
        $query = "
            SELECT
                id,
                title,
                description,
                file_path,
                type,
                version,
                effective_date,
                created_at,
                updated_at
            FROM
                hr_documents
            ORDER BY
                updated_at DESC, effective_date DESC";

        $sql = $this->db_connection->prepare($query);

        if (!$sql->execute()) {
            error_log("Error fetching HR policies: " . json_encode($sql->errorInfo()));
            return false;
        }

        return $sql->fetchAll(PDO::FETCH_ASSOC);
    }

    return false;
}

/**
 * Optional: Get HR events
 */
public function get_hr_events($start_date = null, $end_date = null) {
    if ($this->databaseConnection()) {
        // Default to current date if not specified
        if (!$start_date) {
            $start_date = date('Y-m-d');
        }

        // Default to 30 days from start date if not specified
        if (!$end_date) {
            $end_date = date('Y-m-d', strtotime('+30 days', strtotime($start_date)));
        }

        $query = "
            SELECT
                id,
                title,
                description,
                location,
                start_datetime,
                end_datetime,
                all_day
            FROM
                hr_events
            WHERE
                start_datetime <= ? AND end_datetime >= ?
            ORDER BY
                start_datetime ASC";

        $sql = $this->db_connection->prepare($query);

        if (!$sql->execute([$end_date, $start_date])) {
            error_log("Error fetching HR events: " . json_encode($sql->errorInfo()));
            return false;
        }

        return $sql->fetchAll(PDO::FETCH_ASSOC);
    }

    return false;
}







    # -------------------------------------------------------------

	 # -------------------------------------------------------------
    #
    # Name       : generate_car_search_parameter_options
    # Purpose    : Generates car search parameter options of dropdown
    #
    # Returns    : String
    #
    # -------------------------------------------------------------
    public function generate_car_search_parameter_options($category){
        if ($this->databaseConnection()) {
            $option = '';

            $sql = $this->db_connection->prepare("SELECT PARAMETER_CODE, PARAMETER_VALUE FROM tblcarparameter WHERE CATEGORY_TYPE = :category ORDER BY PARAMETER_VALUE");
            $sql->bindParam(':category', $category);

            if($sql->execute()){
                $count = $sql->rowCount();

                if($count > 0){
                    while($row = $sql->fetch()){
                        $parameter_code = trim($row['PARAMETER_CODE']);
                        $parameter_value = trim($row['PARAMETER_VALUE']);

                        $option .= "<option value='". $parameter_code ."'>". $parameter_value ."</option>";
                    }

                    return $option;
                }
            }
            else{
                return $sql->errorInfo()[2];
            }
        }
    }
    # -------------------------------------------------------------
}

class IRRHelper{
    function IRR($values, $guess=0.1) {

        # Initialize dates and check that values contains at least one positive value and one negative value
        $dates = array();
        $positive = false;
        $negative = false;
        foreach($values as $index=>$value){
            $dates[] = ($index===0) ? 0 : $dates[$index-1] + 365;
            if($values[$index] > 0) $positive = true;
            if($values[$index] < 0) $negative = true;
        }

        # Return error if values does not contain at least one positive value and one negative value
        if(!$positive || !$negative) return null;

        # Initialize guess and resultRate
        $resultRate = $guess;

        # Set maximum epsilon for end of iteration
        $epsMax = 0.0000000001;

        # Set maximum number of iterations
        $iterMax = 50;

        # Implement Newton's method
        $newRate;
        $epsRate;
        $resultValue;
        $iteration = 0;
        $contLoop = true;
        while($contLoop && (++$iteration < $iterMax)){
            $resultValue = self::irrResult($values, $dates, $resultRate);
            $newRate = $resultRate - $resultValue / self::irrResultDeriv($values, $dates, $resultRate);
            $epsRate = abs($newRate - $resultRate);
            $resultRate = $newRate;
            $contLoop = ($epsRate > $epsMax) && (abs($resultValue) > $epsMax);
        }

        if($contLoop) return null;

        # Return internal rate of return
        return $resultRate;
    }

    # Calculates the resulting amount
    function irrResult($values, $dates, $rate){
        $r = $rate + 1;
        $result = $values[0];
        for($i=1;$i<count($values);$i++){
            $result += $values[$i] / pow($r, ($dates[$i] - $dates[0]) / 365);
        }
        return $result;
    }

    # Calculates the first derivation
    function irrResultDeriv($values, $dates, $rate){
        $r = $rate + 1;
        $result = 0;
        for($i=1;$i<count($values);$i++){
            $frac = ($dates[$i] - $dates[0]) / 365;
            $result -= $frac * $values[$i] / pow($r, $frac + 1);
        }
        return $result;
    }
}

?>